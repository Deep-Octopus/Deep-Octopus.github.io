<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/03/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Leetcode刷题笔记</title>
    <url>/2023/03/23/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h1><blockquote>
<p>！！！</p>
<p>注：本文不会对某一算法进行很深入，很细致的讲解，博主追求以最少的文字获得更深的理解，全文的都将按照<code>是什么（what？）``为什么（why？）``怎么做（how？）</code>来进行讲解，我们一直都坚持实践是检验认识真理性的唯一标准，好的算法要能真正解决实际问题，不能光是侃侃而谈。本文代码都根据<code>C++</code>来实现，我们一直秉承一个理念：<code>编程语言永远只是工具，重要的是思想</code>。若想细致了解某一算法，可进行专门的学习。</p>
<p>！！！</p>
</blockquote>
<h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><h3 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h3><ul>
<li><p>是什么：回溯算法也叫<code>回溯搜索法</code>，就是一种搜索方式，本质就是<code>穷举</code>或<code>枚举</code>所有可能，如果当前选择不符合条件，就<code>回退一步</code>，尝试其他选择，直到找到符合条件的解或枚举完所有情况。所以有时候<code>效率</code>也不会很高，一般都以<code>递归函数</code>实现，<code>回溯</code>和<code>递归</code>相辅相成。</p>
</li>
<li><p>为什么：回溯算法的<code>基本思想</code>是：从问题的某一种状态开始搜索，每次搜索时都尝试<code>所有可能</code>的下一步状态，直到找到<code>一个解</code>或者所有可能的状态都被尝试过。如果找到了一个解，就返回；否则，回溯到上一个状态，继续搜索。回溯算法的<code>时间复杂度</code>通常很<code>高</code>，因为它需要穷举所有可能的情况。但是，在某些情况下，回溯算法是最优解，因为它可以找到所有解。</p>
</li>
<li><p>怎么做：回溯算法的实现通常使用<code>递归</code>。具体来说，可以定义一个递归函数，该函数<code>接收当前状态</code>作为参数，并<code>尝试所有可能</code>的下一步状态。如果找到了一个解，就返回；否则，<code>回溯</code>到上一个状态，继续搜索。在递归函数中，需要注意以下两点：</p>
<ul>
<li><p>定义递归函数的<code>参数</code>和<code>返回值</code>。通常情况下，递归函数的参数包括<code>当前状态</code>和<code>已经搜索到的解</code>，返回值为<code>已经搜索到的解</code>。</p>
</li>
<li><p>在递归函数中，需要判断当前状态是否满足要求。如果满足要求，就将当前状态加入已经搜索到的解中，并返回；否则，继续搜索。</p>
</li>
</ul>
</li>
</ul>
<p>​	根据上述特点，我们很容易可以得到一个回溯算法的程序模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (一种情况 : 当前层的所有情况(若比作N叉树，就是当前层的所有结点)) &#123;</span><br><span class="line">        处理该情况</span><br><span class="line">        <span class="built_in">backtracking</span>(路径, 下一个选择列表);<span class="comment">//递归过程</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="77-组合"><a href="#77-组合" class="headerlink" title="77.组合"></a>77.组合</h4><p><strong><a href="https://leetcode.cn/problems/combinations/description/">题目链接</a></strong></p>
<p><strong>题目：</strong></p>
<p>​	给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>
<p>​	你可以按 <strong>任何顺序</strong> 返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>1 &lt;= n &lt;= 20</code></li>
<li><code>1 &lt;= k &lt;= n</code></li>
</ul>
<p><strong>题解：</strong></p>
<p>​		当看到这个题，我们的本能反应就是：哎，这不就是高中学的那个排列组合里面的组合吗？ 好像是 $C_n^m$ 来着，就是从n个数字里面选择由m个数字所组成的所有组合嘛。但是我们这不是数学题，不然就没意思了，那我们来好好分析一下吧，看我们能怎么解决它：</p>
<p>​		我们可以很容易想到：如果有n个数字，我们现在要获得m个数字组成的所有组合，我们可以先在n个数字里面先取一个数字，然后再在剩下的$n-1$个数字里面再取一个数字……以此类推，我们最后可以取到m个数字，这就是我们要的所有组合里面的其中一个组合，我们把它放到结果集里面，然后再进行相同的操作，直到取完我们要的所有组合。如果结合回溯算法的树形结构，就是当我从n个数字里面取了一个后，剩下的$n-1$个数字都可以成为这个数字的备选数字，但是考虑到组合没有顺序要求，所以像$[1,2]和[2,1]$这样的组合其实是一样的，所以已经选择过的数字将不能成为后面数字的备选数字。</p>
<p>​		举个例子，假如我们要从$[1,2,3,4]$里面选择个数为3的所有组合，那么我们很容易联想到下面的流程：</p>
<pre class="mermaid">graph TB;
    1 --> 2
    1 --> 3
    1 -.-> 4
    2 --> a(3)
    2 --> b(4)
    3 --> c(4)
    d(2) --> e(3)
    e --> f(4)</pre>



<p>​		总共就四种组合情况</p>
<p>​		现在思想我们已经知道了，让我们试着转换成代码来试试看。我们可以用一个二维结果集$res$来保存我们找到的所有组合，用一个一维的集$path$来进行数字的临时保存，我们这里的终止条件就是当$path$集里面的数字个数达到了$k$个，当满足终止条件就将$path$集里面的数据存入结果集$res$里面， 随后就跳出这个函数，进行回溯操作，如果不满足终止条件，说明个数还没达到要求的个数，我们再取剩下的没有选择过的数字，直到满足终止条件。</p>
<p>​		以下是具体的实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">getGroup</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getGroup</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= n; i++) &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">getGroup</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其实只要想清楚了整个流程，想好了用什么算法，代码并不需要很多，就能解决这个问题。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库基本操作</title>
    <url>/2023/03/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="MySQL基本操作SQL-快速参考-菜鸟教程-runoob-com"><a href="#MySQL基本操作SQL-快速参考-菜鸟教程-runoob-com" class="headerlink" title="MySQL基本操作SQL 快速参考 | 菜鸟教程 (runoob.com)"></a>MySQL基本操作<a href="https://www.runoob.com/sql/sql-quickref.html">SQL 快速参考 | 菜鸟教程 (runoob.com)</a></h1><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><blockquote>
<p>以下是从命令行中连接mysql服务器的简单实例：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">host</span>]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>

<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><blockquote>
<p>以下命令简单的演示了创建数据库的过程，数据名为 TUTORIALS:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">host</span>]<span class="comment"># mysqladmin -u root -p create TUTORIALS</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>

<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><blockquote>
<p>以下实例删除数据库TUTORIALS</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">host</span>]<span class="comment"># mysqladmin -u root -p drop TUTORIALS</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>

<h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><blockquote>
<p>以下实例选取了数据库 TUTORIALS:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use TUTORIALS;</span><br></pre></td></tr></table></figure>

<h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><blockquote>
<p>以下为创建MySQL数据表的SQL通用语法：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tutorials_tbl(</span><br><span class="line">    tutorial_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    tutorial_title VARCHAR(<span class="number">100</span>) NOT NULL,</span><br><span class="line">    tutorial_author VARCHAR(<span class="number">40</span>) NOT NULL,</span><br><span class="line">    submission_date DATE,</span><br><span class="line">    PRIMARY KEY ( tutorial_id )</span><br><span class="line">    ); )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h2><blockquote>
<p>以下实例删除了数据表tutorials_tbl:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use TUTORIALS;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DROP TABLE tutorials_tbl</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.8</span> sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><blockquote>
<p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>

<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>
<h2 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h2><blockquote>
<p>以下为在MySQL数据库中查询数据通用的 SELECT 语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[<span class="keyword">OFFSET</span> M ][LIMIT N]</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li>
<li>SELECT 命令可以读取一条或者多条记录。</li>
<li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li>
<li>你可以使用 WHERE 语句来包含任何条件。</li>
<li>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</li>
<li>你可以使用 LIMIT 属性来设定返回的记录数。</li>
</ul>
<h2 id="where-子句"><a href="#where-子句" class="headerlink" title="where 子句"></a>where 子句</h2><blockquote>
<p>以下是SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure>

<ul>
<li>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li>
<li>你可以在WHERE子句中指定任何条件。</li>
<li>你可以使用AND或者OR指定一个或多个条件。</li>
<li>WHERE子句也可以运用于SQL的 DELETE 或者 UPDATE 命令。</li>
<li>WHERE 子句类似于程序语言中的if条件，根据 MySQL 表中的字段值来读取指定的数据。</li>
</ul>
<h1 id="UPDATE-查询"><a href="#UPDATE-查询" class="headerlink" title="UPDATE 查询"></a>UPDATE 查询</h1><blockquote>
<p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用SQL语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value1, field2<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以同时更新一个或多个字段。</li>
<li>你可以在 WHERE 子句中指定任何条件。</li>
<li>你可以在一个单独表中同时更新数据。</li>
</ul>
<p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p>
<h3 id="DELETE-语句"><a href="#DELETE-语句" class="headerlink" title="DELETE 语句"></a>DELETE 语句</h3><blockquote>
<p> 以下是SQL DELETE 语句从MySQL数据表中删除数据的通用语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>

<ul>
<li>如果没有指定 WHERE 子句，MySQL表中的所有记录将被删除。</li>
<li>你可以在 WHERE 子句中指定任何条件</li>
<li>您可以在单个表中一次性删除记录。</li>
</ul>
<p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p>
<h3 id="LIKE-子句-a"><a href="#LIKE-子句-a" class="headerlink" title="LIKE 子句(%a%)"></a>LIKE 子句(%a%)</h3><blockquote>
<p>  以下是SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 <span class="operator">=</span> <span class="string">&#x27;somevalue&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>你可以在WHERE子句中指定任何条件。</li>
<li>你可以在WHERE子句中使用LIKE子句。</li>
<li>你可以使用LIKE子句代替等号(&#x3D;)。</li>
<li>LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</li>
<li>你可以使用AND或者OR指定一个或多个条件。</li>
<li>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</li>
</ul>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote>
<p>以下是SQL SELECT 语句使用 <code>ORDER BY </code>子句将查询数据排序后再返回数据：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1, [field2...] [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure>

<ul>
<li>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</li>
<li>你可以设定多个字段来排序。</li>
<li>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升排列。</li>
<li>你可以添加 WHERE…LIKE 子句来设置条件。</li>
</ul>
<h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><blockquote>
<p>你可以在SELECT, UPDATE 和 DELETE 语句中使用Mysql 的 join 来联合多表查询。</p>
</blockquote>
<p>接下来我们就使用MySQL的JOIN来连接以上两张表来读取tutorials_tbl表中所有tutorial_author字段在tcount_tbl表对应的tutorial_count字段值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.tutorial_id, a.tutorial_author, b.tutorial_count</span><br><span class="line">     <span class="keyword">FROM</span> tutorials_tbl a, tcount_tbl b</span><br><span class="line">     <span class="keyword">WHERE</span> a.tutorial_author <span class="operator">=</span> b.tutorial_author;</span><br></pre></td></tr></table></figure>

<h3 id="INNER-JOIN关键字"><a href="#INNER-JOIN关键字" class="headerlink" title="INNER JOIN关键字"></a>INNER JOIN关键字</h3><blockquote>
<p>   INNER JOIN 关键字在表中存在至少一个匹配时返回行。</p>
</blockquote>
<h3 id="SQL-INNER-JOIN-语法"><a href="#SQL-INNER-JOIN-语法" class="headerlink" title="SQL INNER JOIN 语法"></a>SQL INNER JOIN 语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1  </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) </span><br><span class="line"><span class="keyword">FROM</span> table1  </span><br><span class="line"><span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>

<p><strong>注释</strong> : INNER JOIN 与 JOIN 是相同的。</p>
<h3 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h3><blockquote>
<p>                                MySQL left join 与 join 有所不同。 MySQL  LEFT  JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">SELECT</span> a.tutorial_id, a.tutorial_author, b.tutorial_count</span><br><span class="line">    -&gt; FROM tutorials_tbl a LEFT JOIN tcount_tbl b</span><br><span class="line">    -&gt; ON a.tutorial_author = b.tutorial_author;</span><br><span class="line">+<span class="literal">-------------</span>+<span class="literal">-----------------</span>+<span class="literal">----------------</span>+</span><br><span class="line">| tutorial_id | tutorial_author | tutorial_count |</span><br><span class="line">+<span class="literal">-------------</span>+<span class="literal">-----------------</span>+<span class="literal">----------------</span>+</span><br><span class="line">|           <span class="number">1</span> | John Poul       |              <span class="number">1</span> |</span><br><span class="line">|           <span class="number">2</span> | Abdul S         |           NULL |</span><br><span class="line">|           <span class="number">3</span> | Sanjay          |              <span class="number">1</span> |</span><br><span class="line">+<span class="literal">-------------</span>+<span class="literal">-----------------</span>+<span class="literal">----------------</span>+</span><br></pre></td></tr></table></figure>

<p>以上实例中使用了LEFT JOIN，该语句会读取左边的数据表tutorials_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的tutorial_author字段值。</p>
<h2 id="NULL-值处理"><a href="#NULL-值处理" class="headerlink" title="NULL 值处理"></a>NULL 值处理</h2><p>我们已经知道MySQL使用 SQL <code>SELECT </code>命令及<code> WHERE</code> 子句来读取数据表中的数据,但是当提供的查询条件字段为 <code>NULL </code>时，该命令可能就无法正常工作。</p>
<p>为了处理这种情况，MySQL提供了三大运算符:</p>
<ul>
<li><strong>IS NULL:</strong> 当列的值是NULL,此运算符返回true。</li>
<li><strong>IS NOT NULL:</strong> 当列的值不为NULL, 运算符返回true。</li>
<li><strong>&lt;&#x3D;&gt;:</strong> 比较操作符（不同于&#x3D;运算符），当比较的的两个值为NULL时返回true。</li>
</ul>
<p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 &#x3D; NULL 或 !&#x3D; NULL 在列中查找 NULL 值 。</p>
<p>在MySQL中，NULL值与任何其它值的比较（即使是NULL）永远返回<code>false</code>，即 NULL &#x3D; NULL 返回false 。</p>
<p>MySQL中处理NULL使用IS NULL和IS NOT NULL运算符。</p>
<p>查找数据表中 tutorial_count 列是否为 NULL，必须使用IS NULL和IS NOT NULL，如下实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * FROM tcount_tbl</span> </span><br><span class="line">    -&gt; WHERE tutorial_count IS NULL;</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| tutorial_author | tutorial_count |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| mahnaz          |           NULL |</span><br><span class="line">| Jen             |           NULL |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * from tcount_tbl</span> </span><br><span class="line">    -&gt; WHERE tutorial_count IS NOT NULL;</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| tutorial_author | tutorial_count |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| mahran          |             20 |</span><br><span class="line">| Gill            |             20 |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote>
<p>MySQL可以通过 <strong>LIKE …%</strong> 来进行模糊匹配。</p>
</blockquote>
<blockquote>
<p>MySQL 同样也支持其他正则表达式的匹配， MySQL中使用 <code>REGEXP </code>操作符来进行正则表达式匹配。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">^</span> <span class="built_in">$</span> . [...] [<span class="built_in">^</span>...] p1|p2|p3 * + &#123;n&#125; &#123;m,n&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查找name字段中以’st’为开头的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;^st&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查找name字段中以’ok’为结尾的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;ok$&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查找name字段中包含’mar’字符串的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;mar&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>查找name字段中以元音字符开头且以’ok’字符串结尾的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;^[aeiou]|ok$&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote>
<p>                                MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个<code>事务</code>！</p>
</blockquote>
<ul>
<li>在MySQL中只有使用了Innodb数据库引擎的数据库或表才支持事务</li>
<li>事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行</li>
<li>事务用来管理insert,update,delete语句</li>
</ul>
<blockquote>
<p>                                一般来说，事务是必须满足4个条件（<code>ACID</code>）： Atomicity（原子性）、Consistency（稳定性）、Isolation（隔离性）、Durability（可靠性）</p>
</blockquote>
<ul>
<li>1、<strong>事务的原子性</strong>:     一组事务，要么成功；要么撤回。</li>
<li>2、<strong>稳定性</strong>： 有非法数据（外键约束之类），事务撤回。</li>
<li>3、<strong>隔离性</strong>:    事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度。</li>
<li>4、<strong>可靠性</strong>:    软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit选项 决定什么时候吧事务保存到日志里。</li>
</ul>
<h3 id="在Mysql控制台使用事务来操作"><a href="#在Mysql控制台使用事务来操作" class="headerlink" title="在Mysql控制台使用事务来操作"></a>在Mysql控制台使用事务来操作</h3><p>1，开始一个事务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span> transaction</span><br></pre></td></tr></table></figure>

<p>2, 做保存点</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">save point 保存点名称</span><br></pre></td></tr></table></figure>

<p>3, 操作</p>
<p>4，可以回滚，可以提交，没有问题，就提交，有问题就回滚。</p>
<h2 id="ALTER命令"><a href="#ALTER命令" class="headerlink" title="ALTER命令"></a>ALTER命令</h2><blockquote>
<p>当我们需要<code>修改数据表名</code>或者<code>修改数据表字段</code>时，就需要使用到MySQL ALTER命令。</p>
</blockquote>
<blockquote>
<p>如下命令使用了 ALTER 命令及 DROP 子句来删除以上创建表的 i 字段：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl  DROP i;</span><br></pre></td></tr></table></figure>

<p>如果数据表中只剩余一个字段则无法使用DROP来删除字段。</p>
<blockquote>
<p>MySQL 中使用 ADD 子句来想数据表中添加列，如下实例在表 testalter_tbl 中添加 i 字段，并定义数据类型:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;</span><br></pre></td></tr></table></figure>

<p>执行以上命令后，i 字段会自动添加到数据表字段的末尾。</p>
<h3 id="如果需要修改字段类型及名称-你可以在ALTER命令中使用-MODIFY-或-CHANGE-子句-。"><a href="#如果需要修改字段类型及名称-你可以在ALTER命令中使用-MODIFY-或-CHANGE-子句-。" class="headerlink" title="如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。"></a>如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</h3><blockquote>
<p>把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段的类型及名称。尝试如下实例：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>&lt;p如果你现在想把字段 j&#x3D;”” 从&#x3D;”” bigint&#x3D;”” 修改为&#x3D;”” int，sql语句如下：&lt;&#x3D;”” p&#x3D;””&gt;</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT;</span><br></pre></td></tr></table></figure>

<blockquote>
<h2 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h2></blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;</span><br></pre></td></tr></table></figure>

<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><blockquote>
<p>NOT    NULL约束<a href="https://www.runoob.com/sql/sql-notnull.html">SQL NOT NULL 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>UNIQUE约束<a href="https://www.runoob.com/sql/sql-unique.html">SQL UNIQUE 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>PRIMARY KEY 约束<a href="https://www.runoob.com/sql/sql-primarykey.html">SQL PRIMARY KEY 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>FOREIGN KEY 约束<a href="https://www.runoob.com/sql/sql-foreignkey.html">SQL FOREIGN KEY 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>CHECK 约束  [<a href="https://www.runoob.com/sql/sql-check.html">SQL CHECK 约束 | 菜鸟教程 (runoob.com)</a>]</p>
</blockquote>
<blockquote>
<p>DEFAULT 约束<a href="https://www.runoob.com/sql/sql-default.html">SQL DEFAULT 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<h2 id="AUTO-INCREMENT-字段"><a href="#AUTO-INCREMENT-字段" class="headerlink" title="AUTO INCREMENT 字段"></a>AUTO INCREMENT 字段</h2><p>我们通常希望在每次插入新记录时，自动地创建主键字段的值。</p>
<p>我们可以在表中创建一个 auto-increment 字段。</p>
<p>下面的 SQL 语句把 “Persons” 表中的 “ID” 列定义为 auto-increment 主键字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    ID <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (ID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。</p>
<p>要让 AUTO_INCREMENT 序列以其他的值起始，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>要在 “Persons” 表中插入新记录，我们不必为 “ID” 列规定值（会自动添加一个唯一的值）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (FirstName,LastName) <span class="keyword">VALUES</span> (<span class="string">&#x27;Lars&#x27;</span>,<span class="string">&#x27;Monsen&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="MySQL多表操作-一对一-一对多-多对多"><a href="#MySQL多表操作-一对一-一对多-多对多" class="headerlink" title="MySQL多表操作(一对一 一对多 多对多)"></a><a href="https://www.cnblogs.com/minseo/p/14318464.html">MySQL多表操作(一对一 一对多 多对多)</a></h2>]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>后端</tag>
      </tags>
  </entry>
</search>
