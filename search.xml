<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JWT入门与实践</title>
    <url>/2023/03/29/JWT%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1><span id="认识jwt">认识JWT</span></h1>
<p><a href="https://jwt.io/">JSON Web Tokens - jwt.io</a></p>
<p>​		JWT（JSON Web Token）是一种用于在网络上<code>安全传输信息</code>的开放标准。它由三个部分组成：<code>头部</code>、<code>载荷</code>和<code>签名</code>。头部包含<code>加密算法</code>和<code>令牌类型</code>等信息，载荷包含<code>用户信息</code>和其他<code>元数据</code>，签名则通过使用<code>密钥</code>对头部和载荷进行加密来验证令牌的真实性和完整性。JWT 可以被用于<code>身份验证</code>和<code>授权</code>，因为它可以帮助验证请求是否来自可信的源，并且可以将<code>用户信息</code>和<code>权限信息</code>嵌入到令牌中，从而避免了每次请求都需要进行<code>数据库查询</code>的情况。</p>
<p>​		下面是一个JWT样例，头部、载荷、签名都用<code>.</code>进行分隔</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>
<p>下面是对于一个JWT的解析过程：</p>
<ol>
<li class="lvl-4">
<p>将JWT字符串按照点号（.）分成三个部分：<code>头部</code>、<code>载荷</code>和<code>签名</code>。</p>
</li>
<li class="lvl-4">
<p>解码头部，得到<code>加密算法</code>和<code>令牌类型</code>等信息。</p>
</li>
<li class="lvl-4">
<p>解码载荷，得到JWT中存储的<code>信息</code>。</p>
</li>
<li class="lvl-4">
<p>验证签名，确保JWT没有被篡改过。具体验证方式取决于使用的加密算法。</p>
</li>
<li class="lvl-4">
<p>如果验证成功，则可以信任JWT中的信息。</p>
</li>
</ol>
<p>需要注意的是，JWT只是一种<code>基于文本的令牌</code>，因此它<code>不提供加密功能</code>，只提供了<code>签名</code>功能。<strong>如果需要加密数据，可以将JWT作为一个整体进行加密</strong>。</p>
<h1><span id="使用jwt">使用JWT</span></h1>
<p>以下是一些JWT的具体使用例子：</p>
<ol>
<li class="lvl-3">
<p>身份验证：当用户成功登录时，<code>服务器</code>可以生成一个JWT并将其返回给<code>客户端</code>。客户端可以在后续请求中将该JWT作为<code>身份验证凭据</code>发送到服务器。服务器可以验证JWT的签名并确定用户是否有权访问所请求的资源。</p>
</li>
<li class="lvl-3">
<p>单点登录：当用户成功登录到一个应用程序时，服务器可以生成一个JWT并将其返回给客户端。客户端可以在后续请求中将该JWT作为身份验证凭据发送到其他应用程序。其他应用程序可以验证JWT的签名并确定用户是否有权访问所请求的资源。</p>
</li>
<li class="lvl-3">
<p>授权：当用户请求访问某个受保护的资源时，服务器可以检查JWT中包含的声明以确定用户是否有权访问该资源。例如，服务器可以检查JWT中是否包含特定的角色或权限声明。</p>
</li>
<li class="lvl-3">
<p>信息交换：两个服务之间可以使用JWT来安全地交换信息。一个服务可以生成一个JWT并将其发送到另一个服务。接收方可以验证JWT的签名并提取其中包含的信息。</p>
</li>
<li class="lvl-3">
<p>重置密码：当用户请求重置密码时，服务器可以生成一个包含重置令牌的JWT并将其发送到用户的电子邮件地址。用户可以使用该令牌来验证其身份并设置新密码。</p>
</li>
</ol>
<p>以下是基于Vue+SpringBoot的一个简单例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入所需的包</span></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户登录接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证用户身份</span></span><br><span class="line">        <span class="keyword">if</span> (authenticate(user)) &#123;</span><br><span class="line">            <span class="comment">// 生成JWT令牌</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                    .setSubject(user.getUsername())</span><br><span class="line">                    .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600000</span>))</span><br><span class="line">                    .signWith(SignatureAlgorithm.HS512, <span class="string">&quot;secret&quot;</span>)</span><br><span class="line">                    .compact();</span><br><span class="line">            <span class="keyword">return</span> token;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Invalid credentials&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单点登录接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sso&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sso</span><span class="params">(<span class="meta">@RequestHeader(&quot;Authorization&quot;)</span> String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证JWT令牌</span></span><br><span class="line">        <span class="keyword">if</span> (validate(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Success&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unauthorized&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 授权接口</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/protected&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">protectedResource</span><span class="params">(<span class="meta">@RequestHeader(&quot;Authorization&quot;)</span> String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证JWT令牌中是否包含特定的角色或权限声明</span></span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">                .setSigningKey(<span class="string">&quot;secret&quot;</span>)</span><br><span class="line">                .parseClaimsJws(token.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                .getBody();</span><br><span class="line">        <span class="keyword">if</span> (claims.get(<span class="string">&quot;role&quot;</span>).equals(<span class="string">&quot;admin&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Access granted&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Access denied&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 信息交换接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/exchange&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exchange</span><span class="params">(<span class="meta">@RequestBody</span> String data, <span class="meta">@RequestHeader(&quot;Authorization&quot;)</span> String token)</span> &#123;</span><br><span class="line">        <span class="comment">// 验证JWT令牌</span></span><br><span class="line">        <span class="keyword">if</span> (validate(token)) &#123;</span><br><span class="line">            <span class="comment">// 处理数据并返回结果</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Processed data: &quot;</span> + data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unauthorized&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重置密码接口</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/reset-password&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">resetPassword</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 生成包含重置令牌的JWT令牌并发送到用户的电子邮件地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                .setSubject(user.getUsername())</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">600000</span>))</span><br><span class="line">                .claim(<span class="string">&quot;reset&quot;</span>, <span class="literal">true</span>)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, <span class="string">&quot;secret&quot;</span>)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="comment">// 发送电子邮件</span></span><br><span class="line">        sendEmail(user.getEmail(), token);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Email sent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证用户身份</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">authenticate</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 实现用户身份验证逻辑</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证JWT令牌</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(<span class="string">&quot;secret&quot;</span>).parseClaimsJws(token.replace(<span class="string">&quot;Bearer &quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送电子邮件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendEmail</span><span class="params">(String email, String token)</span> &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> 实现发送电子邮件逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的代码是一个Vue.js组件，提供了各种身份验证和授权相关操作的用户界面。该组件包含一个用户登录表单，该表单使用用户的凭据向服务器发送POST请求。如果登录成功，服务器将响应一个JWT（JSON Web Token），该JWT存储在组件的<code>token</code>属性中。<code>sso</code>方法发送一个POST请求到服务器，以使用Authorization头中的JWT启动单点登录过程。<code>protectedResource</code>方法发送一个GET请求以访问受保护的资源，再次使用<code>Authorization</code>头中的JWT。<code>exchangeData</code>方法使用表单输入的数据和<code>Authorization</code>头中的JWT发送一个POST请求以与服务器交换数据。最后，<code>resetPassword</code>方法使用表单中输入的电子邮件发送一个POST请求以重置用户的密码。该组件使用<code>Axios</code>库向服务器发出HTTP请求。该库提供了一个简单和一致的API来发出HTTP请求，并支持拦截器来处理请求和响应。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Login&lt;/h2&gt;</span><br><span class="line">    &lt;form @submit.prevent=&quot;login&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;label for=&quot;username&quot;&gt;Username:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; id=&quot;username&quot; v-model=&quot;user.username&quot; required&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;label for=&quot;password&quot;&gt;Password:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;password&quot; id=&quot;password&quot; v-model=&quot;user.password&quot; required&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;Login&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;Single Sign-On&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;sso&quot;&gt;SSO&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;Protected Resource&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;protectedResource&quot;&gt;Access Protected Resource&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;Exchange Data&lt;/h2&gt;</span><br><span class="line">    &lt;form @submit.prevent=&quot;exchangeData&quot;&gt;</span><br><span class="line">      &lt;label for=&quot;data&quot;&gt;Data:&lt;/label&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; id=&quot;data&quot; v-model=&quot;data&quot;&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;Exchange Data&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;Reset Password&lt;/h2&gt;</span><br><span class="line">    &lt;form @submit.prevent=&quot;resetPassword&quot;&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;label for=&quot;email&quot;&gt;Email:&lt;/label&gt;</span><br><span class="line">        &lt;input type=&quot;email&quot; id=&quot;email&quot; v-model=&quot;user.email&quot; required&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;button type=&quot;submit&quot;&gt;Reset Password&lt;/button&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        username: &#x27;&#x27;,</span><br><span class="line">        password: &#x27;&#x27;,</span><br><span class="line">        email: &#x27;&#x27;,</span><br><span class="line">      &#125;,</span><br><span class="line">      token: &#x27;&#x27;,</span><br><span class="line">      data: &#x27;&#x27;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login() &#123;</span><br><span class="line">      axios.post(&#x27;/api/login&#x27;, this.user)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          this.token = response.data;</span><br><span class="line">          console.log(this.token);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    sso() &#123;</span><br><span class="line">      axios.post(&#x27;/api/sso&#x27;, null, &#123; headers: &#123; Authorization: `Bearer $&#123;this.token&#125;` &#125; &#125;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    protectedResource() &#123;</span><br><span class="line">      axios.get(&#x27;/api/protected&#x27;, &#123; headers: &#123; Authorization: `Bearer $&#123;this.token&#125;` &#125; &#125;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    exchangeData() &#123;</span><br><span class="line">      axios.post(&#x27;/api/exchange&#x27;, this.data, &#123; headers: &#123; Authorization: `Bearer $&#123;this.token&#125;` &#125; &#125;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    resetPassword() &#123;</span><br><span class="line">      axios.post(&#x27;/api/reset-password&#x27;, this.user)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1><span id="注意">注意</span></h1>
<p>在项目中使用JWT时，需要注意以下几点：</p>
<ol>
<li class="lvl-3">
<p>安全性：JWT令牌是基于密钥签名的，因此确保在使用时使用强大的加密算法和安全的密钥管理。</p>
<p>以下是一些强大的加密算法：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>AES (Advanced Encryption Standard) - 对称加密算法，用于加密数据传输和存储。</p>
</li>
<li class="lvl-6">
<p>RSA (Rivest–Shamir–Adleman) - 非对称加密算法，用于数字签名和密钥交换。</p>
</li>
<li class="lvl-6">
<p>HMAC (Hash-based Message Authentication Code) - 基于哈希函数的消息认证码，用于验证数据完整性和真实性。</p>
</li>
<li class="lvl-6">
<p>SHA-256 (Secure Hash Algorithm 256-bit) - 哈希函数，用于生成固定长度的摘要，常用于密码学应用中。</p>
</li>
<li class="lvl-6">
<p>ECDH (Elliptic Curve Diffie-Hellman) - 椭圆曲线密钥交换协议，用于在两个参与者之间安全地共享密钥。</p>
</li>
</ul>
</li>
<li class="lvl-3">
<p>过期时间：为了防止令牌被滥用，应该设置适当的<code>过期时间</code>，并<code>定期更新</code>令牌。</p>
<p>要为Spring Boot中的JWT令牌设置过期时间，我们可以使用以下代码：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"><span class="keyword">import</span> java.security.Key;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> Keys.secretKeyFor(SignatureAlgorithm.HS256);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">expirationTimeInMs</span> <span class="operator">=</span> <span class="number">3600000</span>; <span class="comment">// 1 hour</span></span><br><span class="line">		<span class="comment">// 生成JWT令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String subject)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(now.getTime() + expirationTimeInMs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setExpiration(expiration)</span><br><span class="line">                .signWith(key)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// 验证JWT令牌</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(key).parseClaimsJws(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getSubjectFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser().setSigningKey(key).parseClaimsJws(token).getBody();</span><br><span class="line">        <span class="keyword">return</span> claims.getSubject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		要定期更新JWT令牌，我们可以实现一个定时任务，在当前令牌过期之前生成一个新令牌。我们可以使用Spring的@Scheduled注释来安排任务。这是一个例子：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenScheduler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JwtUtil jwtUtil;</span><br><span class="line">    <span class="keyword">private</span> String currentToken;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TokenScheduler</span><span class="params">(JwtUtil jwtUtil)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jwtUtil = jwtUtil;</span><br><span class="line">        <span class="built_in">this</span>.currentToken = jwtUtil.generateToken(<span class="string">&quot;user123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCurrentToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentToken;</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">// 使用Spring的@Scheduled注释来安排任务</span></span><br><span class="line">    <span class="meta">@Scheduled(fixedRate = 1800000)</span> <span class="comment">// 30 minutes</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateToken</span><span class="params">()</span> &#123;</span><br><span class="line">        currentToken = jwtUtil.generateToken(<span class="string">&quot;user123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>数据隐私：不要将<code>敏感数据</code>存储在JWT令牌中，因为它们可以通过<code>解码令牌</code>来访问。</p>
</li>
<li class="lvl-3">
<p>令牌刷新：在某些情况下，可能需要刷新JWT令牌，例如用户<code>更改密码</code>或<code>权限</code>等。在这种情况下，需要重新颁发新的令牌。</p>
</li>
<li class="lvl-3">
<p>跨站点请求伪造（<code>CSRF</code>）攻击：为了防止<code>CSRF</code>攻击，应该在JWT令牌中包含<code>CSRF</code>令牌，并在每个请求中验证它。</p>
</li>
</ol>
<p>​			 <code>CSRF攻击</code>是一种利用用户<code>已经登录的身份</code>来进行恶意操作的攻击方式。攻击者会在第三方网站上放置一个<code>恶意代码</code>，当用户访问该网站时，代码会自动向目标网站发送请求，利用用户的登录状态进行操作。为了防止CSRF攻击，可以在JWT令牌中包含CSRF令牌，并在每个请求中验证它。在每个请求中，服务器会验证<code>请求头</code>或<code>请求参数</code>中的CSRF令牌是否与JWT令牌中的CSRF令牌一致，如果不一致则拒绝该请求。</p>
<ol start="6">
<li class="lvl-3">
<p>滥用检测：监控系统以检测任何异常活动，如频繁的登录尝试或使用同一JWT令牌进行多个请求。该系统跟踪用户行为并标记任何偏离正常模式的活动，有助于防止未经授权的访问并保护系统免受攻击</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入必要的包</span></span><br><span class="line">$&#123;INSERT_HERE&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为滥用检测系统定义一个类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbuseDetectionSystem</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义必要的变量和数据结构</span></span><br><span class="line">    $&#123;INSERT_HERE&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监视用户活动并检测任何可疑行为的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">monitorUserActivity</span><span class="params">(User user, Request request)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查用户活动是否在正常模式内</span></span><br><span class="line">        <span class="keyword">if</span> (!isActivityWithinNormalPatterns(user, request)) &#123;</span><br><span class="line">            <span class="comment">// 如果不是，则标记为可疑活动</span></span><br><span class="line">            flagSuspiciousActivity(user, request);</span><br><span class="line">            <span class="comment">// 处理滥用或可疑行为</span></span><br><span class="line">            handleAbuse(user, request);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新用户活动历史记录</span></span><br><span class="line">        updateActivityHistory(user, request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记任何偏离正常模式的活动的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">flagSuspiciousActivity</span><span class="params">(User user, Request request)</span> &#123;</span><br><span class="line">        <span class="comment">// 标记用户的活动为可疑</span></span><br><span class="line">        $&#123;INSERT_HERE&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新用户活动历史记录的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateActivityHistory</span><span class="params">(User user, Request request)</span> &#123;</span><br><span class="line">        <span class="comment">// 将用户的活动添加到历史记录中</span></span><br><span class="line">        $&#123;INSERT_HERE&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查用户的活动是否在正常模式内的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isActivityWithinNormalPatterns</span><span class="params">(User user, Request request)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查用户的活动是否在正常模式内</span></span><br><span class="line">        $&#123;INSERT_HERE&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理任何检测到的滥用或可疑行为的方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleAbuse</span><span class="params">(User user, Request request)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理滥用或可疑行为</span></span><br><span class="line">        $&#123;INSERT_HERE&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java后端开发你应该知道的全局异常处理</title>
    <url>/2023/04/23/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>​		在开发Web应用程序时，异常处理是一项非常重要的任务。异常处理可以提高程序的健壮性和稳定性。Java后端开发人员可以设计一个统一的全局异常处理方案来解决异常处理的问题，避免代码冗余，提高开发效率。在本文中，我们将介绍如何设计Java后端的全局异常处理方案。</p>
<h2><span id="什么是全局异常处理">什么是全局异常处理？</span></h2>
<p>​		全局异常处理是一种将异常处理代码从业务逻辑中分离出来的技术。在Java中，全局异常处理使用@ControllerAdvice注解定义一个全局的异常处理类。在该类中，使用@ExceptionHandler注解捕获异常并进行处理。使用全局异常处理技术，可以统一处理异常，提高代码的复用性，降低代码的冗余度。</p>
<h2><span id="如何设计java后端的全局异常处理方案">如何设计Java后端的全局异常处理方案？</span></h2>
<p>设计Java后端的全局异常处理方案包括以下几个步骤：</p>
<h3><span id="1-定义自定义异常类">1. 定义自定义异常类</span></h3>
<p>定义自定义异常类可以使异常信息更加明确，方便后续的处理。自定义异常类需要继承Exception类或其子类。在自定义异常类中，可以定义异常编码和异常消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="2-定义全局异常处理类">2. 定义全局异常处理类</span></h3>
<p>定义全局异常处理类需要使用@ControllerAdvice注解。在该类中，使用@ExceptionHandler注解捕获异常并进行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(MyException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleMyException</span><span class="params">(MyException e)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(e.getCode(), e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>(<span class="string">&quot;500&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@ControllerAdvice注解可以让我们定义一个全局的异常处理类。@ExceptionHandler注解用于捕获异常，并将异常信息封装到ErrorResponse类中。@ResponseBody注解用于返回自定义的异常信息，HttpStatus.INTERNAL_SERVER_ERROR表示返回500错误。</p>
<h3><span id="3-定义异常编码和异常消息">3. 定义异常编码和异常消息</span></h3>
<p>在自定义异常类中，我们需要定义异常编码和异常消息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorResponse</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ErrorResponse</span><span class="params">(String code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="4-前端处理异常信息">4. 前端处理异常信息</span></h3>
<p>​		前端可以根据返回的异常编码和异常消息，对异常进行相应的处理。在使用Axios进行数据请求时，可以通过拦截器拦截返回的异常信息。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> response,</span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = error.<span class="property">response</span>;</span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>.<span class="property">code</span>, response.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>​		在拦截器中，使用if语句判断是否返回500错误。如果是，就将异常编码和异常消息输出到控制台上。这样，在前端出现异常时，我们可以通过控制台输出的信息快速定位异常，进行相应的处理。</p>
<h2><span id="利用面向切面aop对全局异常进行处理">利用面向切面AOP对全局异常进行处理</span></h2>
<p>​		利用面向切面编程（AOP）可以更方便地实现Java后端的全局统一异常处理。我们可以通过AOP将异常处理代码从业务逻辑代码中分离出来，降低代码耦合度，提高代码的可维护性和可扩展性。</p>
<p>下面是利用AOP实现Java后端全局统一异常处理的步骤：</p>
<ol>
<li class="lvl-3">
<p>定义一个异常处理类，用于处理全局异常。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理全局异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;全局异常信息：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="type">ErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>();</span><br><span class="line">        errorResponse.setCode(<span class="number">500</span>);</span><br><span class="line">        errorResponse.setMessage(<span class="string">&quot;服务器出错啦！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们使用@ControllerAdvice注解定义了一个全局异常处理类，用于处理所有的异常。在该类中，我们定义了一个handleException方法，该方法用于处理所有的异常，将异常信息封装到一个ErrorResponse对象中，并将该对象返回给前端。</p>
<ol start="2">
<li class="lvl-3">
<p>定义一个切面类，用于捕获所有的异常。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.example.demo.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleException</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;异常信息：&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">            <span class="type">ErrorResponse</span> <span class="variable">errorResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorResponse</span>();</span><br><span class="line">            errorResponse.setCode(<span class="number">500</span>);</span><br><span class="line">            errorResponse.setMessage(<span class="string">&quot;服务器出错啦！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用@Aspect注解定义了一个切面类，用于捕获所有的异常。在该类中，我们定义了一个handleException方法，该方法用于处理所有的异常。如果有异常发生，该方法会将异常信息封装到一个ErrorResponse对象中，并将该对象返回给前端。</p>
<ol start="3">
<li class="lvl-3">
<p>配置AOP。</p>
</li>
</ol>
<p>在Spring Boot中，我们可以通过@Configuration注解定义一个配置类，并使用@EnableAspectJAutoProxy注解开启AOP功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAspectJAutoProxy</span><br><span class="line">public class AopConfig &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们定义了一个AopConfig类，并使用@EnableAspectJAutoProxy注解开启AOP功能。</p>
<ol start="4">
<li class="lvl-3">
<p>测试。</p>
</li>
</ol>
<p>​		现在，我们已经完成了全局统一异常处理的配置，可以进行测试了。在测试过程中，如果出现异常，会自动被切面类捕获并处理，返回给前端一个ErrorResponse对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/test&quot;)</span><br><span class="line">    public String test() &#123;</span><br><span class="line">        int i = 1 / 0;</span><br><span class="line">        return &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们定义了一个TestController类，并在其中的test方法中故意抛出一个异常。当我们访问该接口时，会自动被切面类捕获并进行统一异常处理。</p>
<p>​		在这个例子中，我们使用了切面技术实现了全局统一异常处理，这种方式相比于try-catch代码块的方式更加简洁和优雅，也更易于维护。同时，AOP还可以用于处理其他方面的逻辑，比如日志、缓存、权限控制等。</p>
<p>​		当然，这种方式也存在一些限制和注意事项。比如，如果应用中存在多个切面，可能会出现切面的执行顺序问题，需要手动配置切面执行的顺序。另外，在使用AOP时，也需要注意对性能的影响，如果切面代码逻辑过于复杂或者切入的方法过多，可能会对应用的性能产生一定的影响。</p>
<p>​		全局统一异常处理是Java后端开发中不可或缺的一部分，通过切面技术实现全局异常处理可以有效地提高代码的可维护性和可读性，也可以更加方便地对异常信息进行管理和处理。</p>
<h2><span id="总结">总结</span></h2>
<p>​		在Java后端开发中，异常处理是一项非常重要的任务。通过设计一个统一的全局异常处理方案，我们可以将异常处理代码从业务逻辑中分离出来，避免代码冗余，提高开发效率。在本文中，我们介绍了Java后端的全局异常处理方案，包括定义自定义异常类、定义全局异常处理类、定义异常编码和异常消息以及前端处理异常信息。希望本文能够对Java后端开发人员设计统一全局异常处理方案有所帮助。定性。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程</title>
    <url>/2023/04/23/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>并发编程</tag>
      </tags>
  </entry>
  <entry>
    <title>基姆·拉尔森公式</title>
    <url>/2023/05/19/%E5%9F%BA%E5%A7%86%C2%B7%E6%8B%89%E5%B0%94%E6%A3%AE%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>基姆·拉尔森（Kim Larsen）计算公式，也被称为Zeller’s congruence（泽勒公式）。该公式用于计算给定日期的星期几。</p>
</blockquote>
<h3><span id="基本原理">基本原理</span></h3>
<p>基姆·拉尔森公式是一种算法，用于确定给定日期是星期几。公式通过将日期的年份、月份和日期进行一系列数学运算，并结合一些修正项，最终计算出星期几的值。它基于每个月的排列规律以及年份的编码，通过模运算和整除运算得到结果。</p>
<h3><span id="公式的表达式">公式的表达式</span></h3>
<p>基姆·拉尔森公式的表达式如下所示：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">h = (q + ⌊(<span class="number">13</span>(m+<span class="number">1</span>))/<span class="number">5</span>⌋ + K + ⌊K/<span class="number">4</span>⌋ + ⌊J/<span class="number">4</span>⌋ - <span class="number">2</span>J) <span class="built_in">mod</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>h</code> 表示星期几的值（0 表示星期六，1 表示星期日，以此类推）。</p>
</li>
<li class="lvl-2">
<p><code>q</code> 表示日期（在公式中为月份的第几天）。</p>
</li>
<li class="lvl-2">
<p><code>m</code> 表示月份（3 表示3月，4 表示4月，以此类推，1、2月分别视为上一年的13、14月）。</p>
</li>
<li class="lvl-2">
<p><code>J</code> 表示年份的前两位数。</p>
</li>
<li class="lvl-2">
<p><code>K</code> 表示年份的后两位数。</p>
</li>
</ul>
<h3><span id="公式的计算步骤">公式的计算步骤</span></h3>
<p>基姆·拉尔森公式的计算步骤如下：</p>
<ol>
<li class="lvl-3">
<p>根据日期，月份和年份的值，将表达式中的各个变量代入公式。</p>
</li>
<li class="lvl-3">
<p>根据整除和模运算规则，计算出最终的结果。</p>
</li>
<li class="lvl-3">
<p>最终的结果即为对应日期的星期几的值。</p>
</li>
</ol>
<p>使用C++代码更加细致地进行讲解：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">cppCopy codeint <span class="title">dayOfWeek</span><span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (month &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        month += <span class="number">12</span>;</span><br><span class="line">        year--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q = day;</span><br><span class="line">    <span class="type">int</span> m = month;</span><br><span class="line">    <span class="type">int</span> J = year / <span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> K = year % <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> h = (q + (<span class="number">13</span> * (m + <span class="number">1</span>) / <span class="number">5</span>) + K + (K / <span class="number">4</span>) + (J / <span class="number">4</span>) - (<span class="number">2</span> * J)) % <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 转换为星期表示（0 表示星期六，1 表示星期日，以此类推）</span></span><br><span class="line">    <span class="keyword">if</span> (h &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        h += <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个实现基姆·拉尔森公式的C++函数。它接受年份（year）、月份（month）和日期（day）作为输入，并返回一个表示星期几的值（0 表示星期六，1 表示星期日，以此类推）。</p>
<p>在函数中，首先对月份和年份进行一些调整：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果月份小于3，则将月份加上12，并将年份减去1，这是为了按照公式中的规定将1月和2月视为上一年的13月和14月。</p>
</li>
<li class="lvl-2">
<p>接下来，根据公式将日期（q）、月份（m）、年份的前两位数（J）和后两位数（K）代入公式。</p>
</li>
</ul>
<p>公式中的各个项通过数学运算符进行计算，并最终得到星期几的值（h）。注意，在计算过程中使用了整除运算和模运算。</p>
<p>最后，将计算得到的星期几的值转换为常规的星期表示形式，确保返回的结果在 0 到 6 的范围内。</p>
<p>这样，使用上述代码实现的函数可以准确计算给定日期的星期几，进一步应用在你的项目中。</p>
<h3><span id="公式的适用范围">公式的适用范围</span></h3>
<p>基姆·拉尔森公式适用于格里历（Gregorian calendar）下的日期计算，可以用来确定任意年份、月份和日期的星期几。它的应用范围广泛，包括计算机编程、日历算法等领域。</p>
<h3><span id="公式的实现注意事项">公式的实现注意事项</span></h3>
<p>在实现基姆·拉尔森公式时，需要注意以下几个方面：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对于1月和2月，需要将它们视为上一年的13月和14月进行计算。</p>
</li>
<li class="lvl-2">
<p>在整除运算中，需要使用整数除法（取商的整数部分），以获得准确的结果。</p>
</li>
<li class="lvl-2">
<p>在公式中，某些项需要进行向下取整操作（Floor），以确保计算的准确性。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL数据库基本操作</title>
    <url>/2023/03/23/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1><span id="mysql基本操作">MySQL基本操作</span></h1>
<h1><span id="sql-快速参考-菜鸟教程-runoobcom"></span></h1>
<div class="success">
<p><strong>我们开始吧</strong><br>
Let us go！！</p>
</div>
<h2><span id="连接数据库">连接数据库</span></h2>
<blockquote>
<p>以下是从命令行中连接mysql服务器的简单实例：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">host</span>]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>
<h2><span id="创建数据库">创建数据库</span></h2>
<blockquote>
<p>以下命令简单的演示了创建数据库的过程，数据名为 TUTORIALS:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">host</span>]<span class="comment"># mysqladmin -u root -p create TUTORIALS</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>
<h3><span id="删除数据库">删除数据库</span></h3>
<blockquote>
<p>以下实例删除数据库TUTORIALS</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">host</span>]<span class="comment"># mysqladmin -u root -p drop TUTORIALS</span></span><br><span class="line">Enter password:******</span><br></pre></td></tr></table></figure>
<h3><span id="选择数据库">选择数据库</span></h3>
<blockquote>
<p>以下实例选取了数据库 TUTORIALS:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">use TUTORIALS;</span><br></pre></td></tr></table></figure>
<h3><span id="创建数据表">创建数据表</span></h3>
<blockquote>
<p>以下为创建MySQL数据表的SQL通用语法：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE table_name (column_name column_type);</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">CREATE TABLE tutorials_tbl(</span><br><span class="line">    tutorial_id INT NOT NULL AUTO_INCREMENT,</span><br><span class="line">    tutorial_title VARCHAR(<span class="number">100</span>) NOT NULL,</span><br><span class="line">    tutorial_author VARCHAR(<span class="number">40</span>) NOT NULL,</span><br><span class="line">    submission_date DATE,</span><br><span class="line">    PRIMARY KEY ( tutorial_id )</span><br><span class="line">    ); )</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2><span id="删除数据表">删除数据表</span></h2>
<blockquote>
<p>以下实例删除了数据表tutorials_tbl:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@host<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:*******</span><br><span class="line">mysql&gt; use TUTORIALS;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; DROP TABLE tutorials_tbl</span><br><span class="line">Query OK, <span class="number">0</span> rows affected (<span class="number">0.8</span> sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<h2><span id="插入数据">插入数据</span></h2>
<blockquote>
<p>以下为向MySQL数据表插入数据通用的 <strong>INSERT INTO</strong> SQL语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN )</span><br><span class="line">                       <span class="keyword">VALUES</span></span><br><span class="line">                       ( value1, value2,...valueN );</span><br></pre></td></tr></table></figure>
<p>如果数据是字符型，必须使用单引号或者双引号，如：“value”。</p>
<h2><span id="查询数据">查询数据</span></h2>
<blockquote>
<p>以下为在MySQL数据库中查询数据通用的 SELECT 语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br><span class="line">[<span class="keyword">OFFSET</span> M ][LIMIT N]</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</p>
</li>
<li class="lvl-2">
<p>SELECT 命令可以读取一条或者多条记录。</p>
</li>
<li class="lvl-2">
<p>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</p>
</li>
<li class="lvl-2">
<p>你可以使用 WHERE 语句来包含任何条件。</p>
</li>
<li class="lvl-2">
<p>你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为0。</p>
</li>
<li class="lvl-2">
<p>你可以使用 LIMIT 属性来设定返回的记录数。</p>
</li>
</ul>
<h2><span id="where-子句">where 子句</span></h2>
<blockquote>
<p>以下是SQL SELECT 语句使用 WHERE 子句从数据表中读取数据的通用语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line">[<span class="keyword">WHERE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] condition2.....</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>查询语句中你可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</p>
</li>
<li class="lvl-2">
<p>你可以在WHERE子句中指定任何条件。</p>
</li>
<li class="lvl-2">
<p>你可以使用AND或者OR指定一个或多个条件。</p>
</li>
<li class="lvl-2">
<p>WHERE子句也可以运用于SQL的 DELETE 或者 UPDATE 命令。</p>
</li>
<li class="lvl-2">
<p>WHERE 子句类似于程序语言中的if条件，根据 MySQL 表中的字段值来读取指定的数据。</p>
</li>
</ul>
<h2><span id="update-查询">UPDATE 查询</span></h2>
<blockquote>
<p>以下是 UPDATE 命令修改 MySQL 数据表数据的通用SQL语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> field1<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value1, field2<span class="operator">=</span><span class="keyword">new</span><span class="operator">-</span>value2</span><br><span class="line">[<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>你可以同时更新一个或多个字段。</p>
</li>
<li class="lvl-2">
<p>你可以在 WHERE 子句中指定任何条件。</p>
</li>
<li class="lvl-2">
<p>你可以在一个单独表中同时更新数据。</p>
</li>
</ul>
<p>当你需要更新数据表中指定行的数据时 WHERE 子句是非常有用的。</p>
<h3><span id="delete-语句">DELETE 语句</span></h3>
<blockquote>
<p>以下是SQL DELETE 语句从MySQL数据表中删除数据的通用语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name [<span class="keyword">WHERE</span> Clause]</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果没有指定 WHERE 子句，MySQL表中的所有记录将被删除。</p>
</li>
<li class="lvl-2">
<p>你可以在 WHERE 子句中指定任何条件</p>
</li>
<li class="lvl-2">
<p>您可以在单个表中一次性删除记录。</p>
</li>
</ul>
<p>当你想删除数据表中指定的记录时 WHERE 子句是非常有用的。</p>
<h3><span id="like-子句a">LIKE 子句(%a%)</span></h3>
<blockquote>
<p>以下是SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line"><span class="keyword">WHERE</span> field1 <span class="keyword">LIKE</span> condition1 [<span class="keyword">AND</span> [<span class="keyword">OR</span>]] filed2 <span class="operator">=</span> <span class="string">&#x27;somevalue&#x27;</span></span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>你可以在WHERE子句中指定任何条件。</p>
</li>
<li class="lvl-2">
<p>你可以在WHERE子句中使用LIKE子句。</p>
</li>
<li class="lvl-2">
<p>你可以使用LIKE子句代替等号(=)。</p>
</li>
<li class="lvl-2">
<p>LIKE 通常与 % 一同使用，类似于一个元字符的搜索。</p>
</li>
<li class="lvl-2">
<p>你可以使用AND或者OR指定一个或多个条件。</p>
</li>
<li class="lvl-2">
<p>你可以在 DELETE 或 UPDATE 命令中使用 WHERE…LIKE 子句来指定条件。</p>
</li>
</ul>
<h2><span id="排序">排序</span></h2>
<blockquote>
<p>以下是SQL SELECT 语句使用 <code>ORDER BY </code>子句将查询数据排序后再返回数据：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> field1, field2,...fieldN table_name1, table_name2...</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> field1, [field2...] [<span class="keyword">ASC</span> [<span class="keyword">DESC</span>]]</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>你可以使用任何字段来作为排序的条件，从而返回排序后的查询结果。</p>
</li>
<li class="lvl-2">
<p>你可以设定多个字段来排序。</p>
</li>
<li class="lvl-2">
<p>你可以使用 ASC 或 DESC 关键字来设置查询结果是按升序或降序排列。 默认情况下，它是按升排列。</p>
</li>
<li class="lvl-2">
<p>你可以添加 WHERE…LIKE 子句来设置条件。</p>
</li>
</ul>
<h2><span id="join">Join</span></h2>
<blockquote>
<p>你可以在SELECT, UPDATE 和 DELETE 语句中使用Mysql 的 join 来联合多表查询。</p>
</blockquote>
<p>接下来我们就使用MySQL的JOIN来连接以上两张表来读取tutorials_tbl表中所有tutorial_author字段在tcount_tbl表对应的tutorial_count字段值：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.tutorial_id, a.tutorial_author, b.tutorial_count</span><br><span class="line">     <span class="keyword">FROM</span> tutorials_tbl a, tcount_tbl b</span><br><span class="line">     <span class="keyword">WHERE</span> a.tutorial_author <span class="operator">=</span> b.tutorial_author;</span><br></pre></td></tr></table></figure>
<h3><span id="inner-join关键字">INNER JOIN关键字</span></h3>
<blockquote>
<p>INNER JOIN 关键字在表中存在至少一个匹配时返回行。</p>
</blockquote>
<h3><span id="sql-inner-join-语法">SQL INNER JOIN 语法</span></h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table1  </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) </span><br><span class="line"><span class="keyword">FROM</span> table1  </span><br><span class="line"><span class="keyword">JOIN</span> table2 </span><br><span class="line"><span class="keyword">ON</span> table1.column_name <span class="operator">=</span> table2.column_name;</span><br></pre></td></tr></table></figure>
<p><strong>注释</strong> : INNER JOIN 与 JOIN 是相同的。</p>
<h3><span id="left-join">LEFT JOIN</span></h3>
<blockquote>
<p>MySQL left join 与 join 有所不同。 MySQL  LEFT  JOIN 会读取左边数据表的全部数据，即便右边表无对应数据。</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">SELECT</span> a.tutorial_id, a.tutorial_author, b.tutorial_count</span><br><span class="line">    -&gt; FROM tutorials_tbl a LEFT JOIN tcount_tbl b</span><br><span class="line">    -&gt; ON a.tutorial_author = b.tutorial_author;</span><br><span class="line">+<span class="literal">-------------</span>+<span class="literal">-----------------</span>+<span class="literal">----------------</span>+</span><br><span class="line">| tutorial_id | tutorial_author | tutorial_count |</span><br><span class="line">+<span class="literal">-------------</span>+<span class="literal">-----------------</span>+<span class="literal">----------------</span>+</span><br><span class="line">|           <span class="number">1</span> | John Poul       |              <span class="number">1</span> |</span><br><span class="line">|           <span class="number">2</span> | Abdul S         |           NULL |</span><br><span class="line">|           <span class="number">3</span> | Sanjay          |              <span class="number">1</span> |</span><br><span class="line">+<span class="literal">-------------</span>+<span class="literal">-----------------</span>+<span class="literal">----------------</span>+</span><br></pre></td></tr></table></figure>
<p>以上实例中使用了LEFT JOIN，该语句会读取左边的数据表tutorials_tbl的所有选取的字段数据，即便在右侧表tcount_tbl中没有对应的tutorial_author字段值。</p>
<h2><span id="null-值处理">NULL 值处理</span></h2>
<p>我们已经知道MySQL使用 SQL <code>SELECT </code>命令及<code> WHERE</code> 子句来读取数据表中的数据,但是当提供的查询条件字段为 <code>NULL </code>时，该命令可能就无法正常工作。</p>
<p>为了处理这种情况，MySQL提供了三大运算符:</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>IS NULL:</strong> 当列的值是NULL,此运算符返回true。</p>
</li>
<li class="lvl-2">
<p><strong>IS NOT NULL:</strong> 当列的值不为NULL, 运算符返回true。</p>
</li>
<li class="lvl-2">
<p><strong>&lt;=&gt;:</strong> 比较操作符（不同于=运算符），当比较的的两个值为NULL时返回true。</p>
</li>
</ul>
<p>关于 NULL 的条件比较运算是比较特殊的。你不能使用 = NULL 或 != NULL 在列中查找 NULL 值 。</p>
<p>在MySQL中，NULL值与任何其它值的比较（即使是NULL）永远返回<code>false</code>，即 NULL = NULL 返回false 。</p>
<p>MySQL中处理NULL使用IS NULL和IS NOT NULL运算符。</p>
<p>查找数据表中 tutorial_count 列是否为 NULL，必须使用IS NULL和IS NOT NULL，如下实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * FROM tcount_tbl</span> </span><br><span class="line">    -&gt; WHERE tutorial_count IS NULL;</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| tutorial_author | tutorial_count |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| mahnaz          |           NULL |</span><br><span class="line">| Jen             |           NULL |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT * from tcount_tbl</span> </span><br><span class="line">    -&gt; WHERE tutorial_count IS NOT NULL;</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| tutorial_author | tutorial_count |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">| mahran          |             20 |</span><br><span class="line">| Gill            |             20 |</span><br><span class="line">+-----------------+----------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<h2><span id="正则表达式">正则表达式</span></h2>
<blockquote>
<p>MySQL可以通过 <strong>LIKE …%</strong> 来进行模糊匹配。</p>
</blockquote>
<blockquote>
<p>MySQL 同样也支持其他正则表达式的匹配， MySQL中使用 <code>REGEXP </code>操作符来进行正则表达式匹配。</p>
</blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">^</span> <span class="built_in">$</span> . [...] [<span class="built_in">^</span>...] p1|p2|p3 * + &#123;n&#125; &#123;m,n&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查找name字段中以’st’为开头的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;^st&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查找name字段中以’ok’为结尾的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;ok$&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查找name字段中包含’mar’字符串的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;mar&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>查找name字段中以元音字符开头且以’ok’字符串结尾的所有数据：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT name FROM person_tbl WHERE name REGEXP <span class="string">&#x27;^[aeiou]|ok$&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<h2><span id="事务">事务</span></h2>
<blockquote>
<p>MySQL 事务主要用于处理操作量大，复杂度高的数据。比如说，在人员管理系统中，你删除一个人员，你即需要删除人员的基本资料，也要删除和该人员相关的信息，如信箱，文章等等，这样，这些数据库操作语句就构成一个<code>事务</code>！</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>在MySQL中只有使用了Innodb数据库引擎的数据库或表才支持事务</p>
</li>
<li class="lvl-2">
<p>事务处理可以用来维护数据库的完整性，保证成批的SQL语句要么全部执行，要么全部不执行</p>
</li>
<li class="lvl-2">
<p>事务用来管理insert,update,delete语句</p>
</li>
</ul>
<blockquote>
<p>一般来说，事务是必须满足4个条件（<code>ACID</code>）： Atomicity（原子性）、Consistency（稳定性）、Isolation（隔离性）、Durability（可靠性）</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>1、<strong>事务的原子性</strong>:     一组事务，要么成功；要么撤回。</p>
</li>
<li class="lvl-2">
<p>2、<strong>稳定性</strong>： 有非法数据（外键约束之类），事务撤回。</p>
</li>
<li class="lvl-2">
<p>3、<strong>隔离性</strong>:    事务独立运行。一个事务处理后的结果，影响了其他事务，那么其他事务会撤回。事务的100%隔离，需要牺牲速度。</p>
</li>
<li class="lvl-2">
<p>4、<strong>可靠性</strong>:    软、硬件崩溃后，InnoDB数据表驱动会利用日志文件重构修改。可靠性和高速度不可兼得， innodb_flush_log_at_trx_commit选项 决定什么时候吧事务保存到日志里。</p>
</li>
</ul>
<h3><span id="在mysql控制台使用事务来操作">在Mysql控制台使用事务来操作</span></h3>
<p>1，开始一个事务</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start</span> transaction</span><br></pre></td></tr></table></figure>
<p>2, 做保存点</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">save point 保存点名称</span><br></pre></td></tr></table></figure>
<p>3, 操作</p>
<p>4，可以回滚，可以提交，没有问题，就提交，有问题就回滚。</p>
<h2><span id="alter命令">ALTER命令</span></h2>
<blockquote>
<p>当我们需要<code>修改数据表名</code>或者<code>修改数据表字段</code>时，就需要使用到MySQL ALTER命令。</p>
</blockquote>
<blockquote>
<p>如下命令使用了 ALTER 命令及 DROP 子句来删除以上创建表的 i 字段：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl  DROP i;</span><br></pre></td></tr></table></figure>
<p>如果数据表中只剩余一个字段则无法使用DROP来删除字段。</p>
<blockquote>
<p>MySQL 中使用 ADD 子句来想数据表中添加列，如下实例在表 testalter_tbl 中添加 i 字段，并定义数据类型:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl ADD i INT;</span><br></pre></td></tr></table></figure>
<p>执行以上命令后，i 字段会自动添加到数据表字段的末尾。</p>
<h3><span id="如果需要修改字段类型及名称-你可以在alter命令中使用-modify-或-change-子句">如果需要修改字段类型及名称, 你可以在ALTER命令中使用 MODIFY 或 CHANGE 子句 。</span></h3>
<blockquote>
<p>把字段 c 的类型从 CHAR(1) 改为 CHAR(10)，可以执行以下命令:</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl MODIFY c CHAR(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>使用 CHANGE 子句, 语法有很大的不同。 在 CHANGE 关键字之后，紧跟着的是你要修改的字段名，然后指定新字段的类型及名称。尝试如下实例：</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE i j BIGINT;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>&lt;p如果你现在想把字段 j=“” 从=“” bigint=“” 修改为=“” int，sql语句如下：&lt;=“” p=“”&gt;</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl CHANGE j j INT;</span><br></pre></td></tr></table></figure>
<blockquote>
<h2><span id="修改表名">修改表名</span></h2>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE testalter_tbl RENAME TO alter_tbl;</span><br></pre></td></tr></table></figure>
<h2><span id="约束">约束</span></h2>
<blockquote>
<p>NOT    NULL约束<a href="https://www.runoob.com/sql/sql-notnull.html">SQL NOT NULL 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>UNIQUE约束<a href="https://www.runoob.com/sql/sql-unique.html">SQL UNIQUE 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>PRIMARY KEY 约束<a href="https://www.runoob.com/sql/sql-primarykey.html">SQL PRIMARY KEY 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>FOREIGN KEY 约束<a href="https://www.runoob.com/sql/sql-foreignkey.html">SQL FOREIGN KEY 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<blockquote>
<p>CHECK 约束  [<a href="https://www.runoob.com/sql/sql-check.html">SQL CHECK 约束 | 菜鸟教程 (runoob.com)</a>]</p>
</blockquote>
<blockquote>
<p>DEFAULT 约束<a href="https://www.runoob.com/sql/sql-default.html">SQL DEFAULT 约束 | 菜鸟教程 (runoob.com)</a></p>
</blockquote>
<h2><span id="auto-increment-字段">AUTO INCREMENT 字段</span></h2>
<p>我们通常希望在每次插入新记录时，自动地创建主键字段的值。</p>
<p>我们可以在表中创建一个 auto-increment 字段。</p>
<p>下面的 SQL 语句把 “Persons” 表中的 “ID” 列定义为 auto-increment 主键字段：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">    ID <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    City <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (ID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。</p>
<p>要让 AUTO_INCREMENT 序列以其他的值起始，请使用下面的 SQL 语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Persons AUTO_INCREMENT<span class="operator">=</span><span class="number">100</span></span><br></pre></td></tr></table></figure>
<p>要在 “Persons” 表中插入新记录，我们不必为 “ID” 列规定值（会自动添加一个唯一的值）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (FirstName,LastName) <span class="keyword">VALUES</span> (<span class="string">&#x27;Lars&#x27;</span>,<span class="string">&#x27;Monsen&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/minseo/p/14318464.html">MySQL多表操作(一对一 一对多 多对多)</a></p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode刷题笔记</title>
    <url>/2023/03/23/Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1><span id="leetcode刷题笔记">LeetCode刷题笔记</span></h1>
<blockquote>
<p>！！！</p>
<p>注：本文不会对某一算法进行很深入，很细致的讲解，博主追求以最少的文字获得更深的理解，全文的都将按照<code>是什么（what？）``为什么（why？）``怎么做（how？）</code>来进行讲解，我们一直都坚持实践是检验认识真理性的唯一标准，好的算法要能真正解决实际问题，不能光是侃侃而谈。本文代码都根据<code>C++</code>来实现，我们一直秉承一个理念：<code>编程语言永远只是工具，重要的是思想</code>。若想细致了解某一算法，可进行专门的学习。</p>
<p>！！！</p>
</blockquote>
<h2><span id="回溯算法">回溯算法</span></h2>
<h3><span id="认识">认识</span></h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>是什么：回溯算法也叫<code>回溯搜索法</code>，就是一种搜索方式，本质就是<code>穷举</code>或<code>枚举</code>所有可能，如果当前选择不符合条件，就<code>回退一步</code>，尝试其他选择，直到找到符合条件的解或枚举完所有情况。所以有时候<code>效率</code>也不会很高，一般都以<code>递归函数</code>实现，<code>回溯</code>和<code>递归</code>相辅相成。</p>
</li>
<li class="lvl-2">
<p>为什么：回溯算法的<code>基本思想</code>是：从问题的某一种状态开始搜索，每次搜索时都尝试<code>所有可能</code>的下一步状态，直到找到<code>一个解</code>或者所有可能的状态都被尝试过。如果找到了一个解，就返回；否则，回溯到上一个状态，继续搜索。回溯算法的<code>时间复杂度</code>通常很<code>高</code>，因为它需要穷举所有可能的情况。但是，在某些情况下，回溯算法是最优解，因为它可以找到所有解。</p>
</li>
<li class="lvl-2">
<p>怎么做：回溯算法的实现通常使用<code>递归</code>。具体来说，可以定义一个递归函数，该函数<code>接收当前状态</code>作为参数，并<code>尝试所有可能</code>的下一步状态。如果找到了一个解，就返回；否则，<code>回溯</code>到上一个状态，继续搜索。在递归函数中，需要注意以下两点：</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>定义递归函数的<code>参数</code>和<code>返回值</code>。通常情况下，递归函数的参数包括<code>当前状态</code>和<code>已经搜索到的解</code>，返回值为<code>已经搜索到的解</code>。</p>
</li>
<li class="lvl-4">
<p>在递归函数中，需要判断当前状态是否满足要求。如果满足要求，就将当前状态加入已经搜索到的解中，并返回；否则，继续搜索。</p>
</li>
</ul>
</li>
</ul>
<p>​	根据上述特点，我们很容易可以得到一个回溯算法的程序模板：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (一种情况 : 当前层的所有情况(若比作N叉树，就是当前层的所有结点)) &#123;</span><br><span class="line">        处理该情况</span><br><span class="line">        <span class="built_in">backtracking</span>(路径, 下一个选择列表);<span class="comment">//递归过程</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="实践">实践</span></h3>
<h4><span id="组合">组合</span></h4>
<p><strong><a href="https://leetcode.cn/problems/combinations/description/">题目链接</a></strong></p>
<p><strong>题目：</strong></p>
<p>​	给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p>
<p>​	你可以按 <strong>任何顺序</strong> 返回答案。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1, k = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>1 &lt;= n &lt;= 20</code></p>
</li>
<li class="lvl-2">
<p><code>1 &lt;= k &lt;= n</code></p>
</li>
</ul>
<p><strong>题解：</strong></p>
<p>​		当看到这个题，我们的本能反应就是：哎，这不就是高中学的那个排列组合里面的组合吗？ 好像是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mi>C</mi><mi>n</mi><mi>m</mi></msubsup></mrow><annotation encoding="application/x-tex">C_n^m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9303em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-2.453em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span> 来着，就是从n个数字里面选择由m个数字所组成的所有组合嘛。但是我们这不是数学题，不然就没意思了，那我们来好好分析一下吧，看我们能怎么解决它：</p>
<p>​		我们可以很容易想到：如果有n个数字，我们现在要获得m个数字组成的所有组合，我们可以先在n个数字里面先取一个数字，然后再在剩下的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个数字里面再取一个数字……以此类推，我们最后可以取到m个数字，这就是我们要的所有组合里面的其中一个组合，我们把它放到结果集里面，然后再进行相同的操作，直到取完我们要的所有组合。如果结合回溯算法的树形结构，就是当我从n个数字里面取了一个后，剩下的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个数字都可以成为这个数字的备选数字，但是考虑到组合没有顺序要求，所以像<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo stretchy="false">]</mo><mtext>和</mtext><mo stretchy="false">[</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,2]和[2,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mclose">]</span><span class="mord cjk_fallback">和</span><span class="mopen">[</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>这样的组合其实是一样的，所以已经选择过的数字将不能成为后面数字的备选数字。</p>
<p>​		举个例子，假如我们要从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mn>4</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[1,2,3,4]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4</span><span class="mclose">]</span></span></span></span>里面选择个数为3的所有组合，那么我们很容易联想到下面的流程：</p>
<pre class="mermaid">graph TB;
	1 --> 2
	1 --> 3
	1 -.-> 4
	2 --> a(3)
	2 --> b(4)
	3 --> c(4)
	d(2) --> e(3)
	e --> f(4)</pre>
<p>​		总共就四种组合情况</p>
<p>​		现在思想我们已经知道了，让我们试着转换成代码来试试看。我们可以用一个二维结果集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">res</span></span></span></span>来保存我们找到的所有组合，用一个一维的集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span></span></span></span>来进行数字的临时保存，我们这里的终止条件就是当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span></span></span></span>集里面的数字个数达到了<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个，当满足终止条件就将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">path</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">t</span><span class="mord mathnormal">h</span></span></span></span>集里面的数据存入结果集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">res</span></span></span></span>里面， 随后就跳出这个函数，进行回溯操作，如果不满足终止条件，说明个数还没达到要求的个数，我们再取剩下的没有选择过的数字，直到满足终止条件。</p>
<p>​		以下是具体的实现代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        <span class="built_in">getGroup</span>(n, k, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">getGroup</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> startIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.<span class="built_in">size</span>() == k) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = startIndex; i &lt;= n; i++) &#123;</span><br><span class="line">            path.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="built_in">getGroup</span>(n, k, i + <span class="number">1</span>);</span><br><span class="line">            path.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>其实只要想清楚了整个流程，想好了用什么算法，代码并不需要很多，就能解决这个问题。</p>
<h3><span id="n皇后问题">N皇后问题</span></h3>
<p><a href="https://leetcode.cn/problems/n-queens/description/">题目链接</a></p>
<p><strong>题目：</strong></p>
<p>​			按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p>
<p>​	<strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>
<p>​	给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p>
<p>​	每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p>
<p><strong>示例1：</strong></p>
<p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 4</span><br><span class="line">输出：[[&quot;.Q..&quot;,&quot;...Q&quot;,&quot;Q...&quot;,&quot;..Q.&quot;],[&quot;..Q.&quot;,&quot;Q...&quot;,&quot;...Q&quot;,&quot;.Q..&quot;]]</span><br><span class="line">解释：如上图所示，4 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[&quot;Q&quot;]]</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>1 &lt;= n &lt;= 9</code></p>
</li>
</ul>
<p><strong>题解：</strong></p>
<p>​		当看见这个题，我的第一反应就是，这不是我之前Java课程那本很大很厚的黑皮书里面的经典的八皇后问题的拓展吗，好家伙，直接N皇后了，之前我不知道回溯算法，当时只需要找到一种就行了，我硬生生熬夜才给它做出来了，让我对Java产生了短暂的厌恶。现在我学了回溯算法，看我把你撕碎！！！</p>
<p>​		用回溯算法的思路，这个题虽然显示的是困难，但是其实思路很简单。一个<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo>∗</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">N*N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>大小的棋盘，我们可以先在第一行放一个，然后在第二排放一个，然后在第三排放一个，直到放到最后一行，在摆放棋子的过程中，我们每一次放都需要对该位置放置的合法度进行判断，判断一下它所在的列，左上斜线，右上斜线是否已经放置了棋子，如果都没有放置，那么我就可以摆放一个，反之则不能摆放。当在最后一行摆放了棋子后，那我们就找到了一种N个皇后的摆放方式，直接加到结果集<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>r</mi><mi>e</mi><mi>s</mi></mrow><annotation encoding="application/x-tex">res</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">res</span></span></span></span>里面。我们每一次放置了皇后过后，不管是否找到了一种摆放方式，我们都要进行回溯，就是还原放置前的样子，然后对其下一个格子进行相同的操作。</p>
<p>所以：</p>
<p>​		终止条件：最后一行放置完毕</p>
<p>​		循环域：一行的每一列的集合</p>
<p>​		递归域：每一列的集合</p>
<p>上代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt;res;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;string&gt;&gt; <span class="built_in">solveNQueens</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;string&gt;<span class="built_in">path</span>(n,<span class="built_in">string</span>(n,<span class="string">&#x27;.&#x27;</span>));</span><br><span class="line">        <span class="built_in">insertBacking</span>(n, <span class="number">0</span>, path);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insertBacking</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, vector&lt;string&gt;&amp; path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(path);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isValid</span>(n, row, i, path)) &#123;</span><br><span class="line">                path[row][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                <span class="built_in">insertBacking</span>(n, row + <span class="number">1</span>, path);</span><br><span class="line">                <span class="comment">// 回溯</span></span><br><span class="line">                path[row][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isValid</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, <span class="type">int</span> col, vector&lt;string&gt;&amp; path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; row; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path[i][col] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 45deg</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i --, j --) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 135deg</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i --, j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (path[i][j] == <span class="string">&#x27;Q&#x27;</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>代码解读：</strong></p>
<p>​	代码使用回溯算法求解，主要<code>思路</code>如下：</p>
<ol>
<li class="lvl-3">
<p>定义一个二维字符串数组 res，用于存储所有符合要求的解；</p>
</li>
<li class="lvl-3">
<p>定义一个 insertBacking 函数，用于递归回溯，其中参数 n 表示棋盘大小，row 表示当前处理的行数，path 表示当前棋盘的布局；</p>
</li>
<li class="lvl-3">
<p>当 row == n 时，说明已经处理完了所有的行，将 path 添加到 res 中；</p>
</li>
<li class="lvl-3">
<p>在当前行 row 中枚举每一个列 col，检查该位置是否可以放置皇后，如果可以，就将皇后放在该位置，然后继续处理下一行，否则跳过；</p>
</li>
<li class="lvl-3">
<p>处理完当前行后，需要回溯到上一行，将上一行中放置的皇后位置改回空位，然后尝试该行的下一个位置；</p>
</li>
<li class="lvl-3">
<p>isValid 函数用于检查当前位置是否可以放置皇后，检查的方式包括：检查当前列是否已经有皇后，检查 45 度和 135 度方向上是否有皇后。</p>
</li>
</ol>
<p>​	最终，solveNQueens 函数调用 insertBacking 函数，完成对 N-Queens 问题的求解，返回所有的解。</p>
<p><strong>注意：</strong></p>
<p>​		第六行我用了<code>string(n, '.')</code>语句，该语句可以生成一个长度为 n 的每一位都是<code>'.'</code>的字符串，加上vector的初始化语法，完成了对结果集res的初始化，对C++不了解的朋友可以根据自己的兴趣去了解一下对应的知识点，但是不强制。因为我们一直秉持一个理念：<code>“编程语言永远只是工具，重要的是思想”</code>。</p>
<p><strong>附：</strong></p>
<p>​		为了一些刚学习Java的同学理解，这里给出Java版本，希望不要被那个黑色厚书给击败，Java还是很有趣的，🙉🛩️</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] chessboard = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        backTrack(n, <span class="number">0</span>, chessboard);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backTrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> row, <span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;</span><br><span class="line">            res.add(Array2List(chessboard));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">col</span> <span class="operator">=</span> <span class="number">0</span>;col &lt; n; ++col) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid (row, col, n, chessboard)) &#123;</span><br><span class="line">                chessboard[row][col] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">                backTrack(n, row+<span class="number">1</span>, chessboard);</span><br><span class="line">                chessboard[row][col] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">Array2List</span><span class="params">(<span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chessboard) &#123;</span><br><span class="line">            list.add(String.copyValueOf(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n, <span class="type">char</span>[][] chessboard)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查列</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;row; ++i) &#123; <span class="comment">// 相当于剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查45度对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=row-<span class="number">1</span>, j=col-<span class="number">1</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&gt;=<span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查135度对角线</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=row-<span class="number">1</span>, j=col+<span class="number">1</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&lt;=n-<span class="number">1</span>; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (chessboard[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2><span id="贪心算法">贪心算法</span></h2>
<h3><span id="认识">认识</span></h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>是什么：贪心算法是一种基于<code>贪心策略</code>的算法，它在<code>每个阶段</code>选择当前看起来最优的解决方案，以期望能够得到<code>全局最优解</code>。在贪心算法中，我们<code>不考虑</code>未来的决策所造成的影响，只关注<code>当前的最优解</code>。</p>
</li>
<li class="lvl-2">
<p>为什么：贪心算法具有<code>简单</code>、<code>高效</code>的特点，并且可以应用于许多实际问题的求解中。虽然贪心算法不能保证一定得到全局最优解，但是对于某些问题，贪心算法能够得到与全局最优解<code>非常接近</code>的解。</p>
</li>
<li class="lvl-2">
<p>怎么做：</p>
<p>​		贪心算法的实现步骤通常包括以下几个步骤：</p>
<p>​				1. 确定问题的<code>最优子结构</code>：将原问题分解成若干个子问题，每个子问题都可以独立求解，且原问题的最优解包含<code>所有子问题的最优解</code>。</p>
<p>​				2. 构造贪心选择：确定每个子问题的最优解，这里需要使用贪心策略，即每次<code>选择当前看起来最优</code>的解决方案。</p>
<p>​				3. 证明贪心选择的<code>正确性</code>：证明每个子问题的最优解组合起来可以得到原问题的最优解。</p>
<p>​				4. 实现贪心算法：根据贪心选择的策略实现算法，通常使用<code>迭代</code>或<code>递归</code>的方式求解。</p>
<p>​		需要注意的是，在使用贪心算法时，需要满足<code>贪心选择性质</code>和<code>最优子结构性质</code>。如果问题不满足这些性质，则贪心算法可能无法得到正确的结果。</p>
</li>
</ul>
<h3><span id="实践">实践</span></h3>
<h4><span id="分发饼干">分发饼干</span></h4>
<p><a href="https://leetcode.cn/problems/assign-cookies/">题目链接</a></p>
<p><strong>题目：</strong></p>
<p>​		假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p>
<p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: g = [1,2,3], s = [1,1]</span><br><span class="line">输出: 1</span><br><span class="line">解释: </span><br><span class="line">你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。</span><br><span class="line">虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。</span><br><span class="line">所以你应该输出1。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入: g = [1,2], s = [1,2,3]</span><br><span class="line">输出: 2</span><br><span class="line">解释: </span><br><span class="line">你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。</span><br><span class="line">你拥有的饼干数量和尺寸都足以让所有孩子满足。</span><br><span class="line">所以你应该输出2.</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>1 &lt;= g.length &lt;= 3 * 104</code></p>
</li>
<li class="lvl-2">
<p><code>0 &lt;= s.length &lt;= 3 * 104</code></p>
</li>
<li class="lvl-2">
<p><code>1 &lt;= g[i], s[j] &lt;= 231 - 1</code></p>
</li>
</ul>
<p><strong>题解：</strong></p>
<p>​		说实话，我第一眼看见这个题，我有点懵，但是看见这只是一个简单题，心想：蛙趣，怎么搞的？简单题都看懵了（但是我确实没有想到很好的方法）。我沉思了一下……有了：我直接一个孩子一个孩子分配，每次都找大于孩子胃口且最接近孩子胃口的饼干，这样不就可以了。试一试</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 每次都找一个最接近孩子胃口的</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> countChild = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 最合适的下标</span></span><br><span class="line">        <span class="type">int</span> suIndex = <span class="number">-1</span>;</span><br><span class="line">        <span class="comment">// 差值</span></span><br><span class="line">        <span class="type">int</span> delta = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; g.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; s.<span class="built_in">size</span>(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span> (s[j] &gt;= g[i] &amp;&amp; s[j] - g[i] &gt; delta) &#123;</span><br><span class="line">                    delta = s[j] - g[i];</span><br><span class="line">                    suIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (delta != <span class="number">-1</span>) &#123;</span><br><span class="line">                s[suIndex] = <span class="number">-1</span>;</span><br><span class="line">                countChild ++;</span><br><span class="line">                delta = <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> countChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>直接运行：😄</p>
<p><img src="https://gitee.com/zhang-jie-king/myfigurebed/raw/master/202304261038026.png" alt="image-20230327205517166" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p><img src="https://gitee.com/zhang-jie-king/myfigurebed/raw/master/202304261038178.png" alt="image-20230327205530828" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>😢😢😢😢😢😢</p>
<p>错了……</p>
<p>why？</p>
<p>明明没问题呀！！</p>
<p>怎么会呀？这可是简单题呀😱我是不是要寄了，啊，不行，我得思考一下……………………………………………………</p>
<p>啊，我知道了，虽然我这个思路看似没问题，但是我虽然每次都选一个最接近当前孩子胃口的饼干，看似很合理，但是，但是万一下一个孩子更适合当前这个饼干呢，当测试数据少的时候可能没问题，但是要是数据到达一定程度，就会有问题。🙀</p>
<p>怎么办？有了：我何不先满足胃口大的孩子，虽然我最开始的思路错了，但是也是有一定的用处，要是分配给当前孩子的饼干就是最合适他的不就行了吗，但是怎么确定就是最合适的呢。我们判断是不是最合适的，本质上不就是看二者之间的差值是不是最小的嘛，之所以我不知道是不是最合适的，是因为我不知道下一个数字和当前数字的大小关系，那我要是给这两个数组都排个序，那不就解决了吗，下一个数字和当前数字的大小关系不就确定了吗？而且我还有两种分配方式：1️⃣先给胃口大的分配；2️⃣ 先给胃口小的分配；二者的思路是一致的，在结合我最开始的想法，那问题不就解决了吗？</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>先给胃口大的分配</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 优先满足胃口大的Child</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> countChild = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index_g = g.<span class="built_in">size</span>() - <span class="number">1</span>, index_s = s.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(index_g &gt;= <span class="number">0</span> &amp;&amp; index_s &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[index_s] &gt;= g[index_g]) &#123;</span><br><span class="line">                countChild++;</span><br><span class="line">                index_s--;   </span><br><span class="line">            &#125;</span><br><span class="line">            index_g--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>过了：<img src="/images/2023-03-23-Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/image-20230327211806716.png" alt="image-20230327211806716" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>先给胃口小的分配</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findContentChildren</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; g, vector&lt;<span class="type">int</span>&gt;&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(g.<span class="built_in">begin</span>(), g.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>());</span><br><span class="line">        <span class="comment">// 优先满足胃口小的Child</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> countChild = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> index_g = <span class="number">0</span>, index_s = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index_g &lt; g.<span class="built_in">size</span>() &amp;&amp; index_s &lt; s.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[index_s] &gt;= g[index_g]) &#123;</span><br><span class="line">                countChild++;</span><br><span class="line">                index_g++;   </span><br><span class="line">            &#125;</span><br><span class="line">            index_s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countChild;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>也过了！！！<img src="/images/2023-03-23-Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/image-20230327211826720.png" alt="image-20230327211826720" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>nice！！！😸</p>
<h2><span id="刷题记录">刷题记录</span></h2>
<p><sub>2023/3/26</sub></p>
<h3><span id="和相等的子数组">和相等的子数组</span></h3>
<p><strong>题目描述：</strong></p>
<p>​		给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，判断是否存在 <strong>两个</strong> 长度为 <code>2</code> 的子数组且它们的 <strong>和</strong> 相等。注意，这两个子数组起始位置的下标必须 <strong>不相同</strong> 。</p>
<p>如果这样的子数组存在，请返回 <code>true</code>，否则返回 <code>false</code> 。</p>
<p><strong>子数组</strong> 是一个数组中一段连续非空的元素组成的序列。</p>
<p><strong>示例 1：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [4,2,4]</span><br><span class="line">输出：true</span><br><span class="line">解释：元素为 [4,2] 和 [2,4] 的子数组有相同的和 6 。</span><br></pre></td></tr></table></figure>
<p><strong>示例 2：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [1,2,3,4,5]</span><br><span class="line">输出：false</span><br><span class="line">解释：没有长度为 2 的两个子数组和相等。</span><br></pre></td></tr></table></figure>
<p><strong>示例 3：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,0,0]</span><br><span class="line">输出：true</span><br><span class="line">解释：子数组 [nums[0],nums[1]] 和 [nums[1],nums[2]] 的和相等，都为 0 。</span><br><span class="line">注意即使子数组的元素相同，这两个子数组也视为不相同的子数组，因为它们在原数组中的起始位置不同。</span><br></pre></td></tr></table></figure>
<p><strong>提示：</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>2 &lt;= nums.length &lt;= 1000</code></p>
</li>
<li class="lvl-2">
<p><code>$-10^9$ &lt;= nums[i] &lt;= $10^9$</code></p>
</li>
</ul>
<p>​			这个题及时一个简单题，我们看完题目其实就会有一个很简单粗暴的想法：直接两层for循环不就解决了吗？</p>
<p>​	马上试试：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先用最简单粗暴的方式</span></span><br><span class="line">        <span class="type">int</span> temp_sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">2</span>; i ++) &#123;</span><br><span class="line">            temp_sum = nums[i] + nums[i + <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (temp_sum == nums[j] + nums[j + <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>​		感觉没问题，直接自信点击提交按钮。</p>
<p><img src="/images/2023-03-23-Leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/0326_1.png" alt="image-20230326110858429" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>​		直接就过了，但是我们肯定不能就这样妥协，这样根本达不到练题的目的，虽然这是一个简单题。这个时间花的也太多了吧，能不能压缩一下。</p>
<p>​		这个题的本质不就是找到两个和相等的长度为2 的子数组吗？能不能值遍历一次，这样时间复杂度会大大降低。怎么办呢？突然，我灵光一现，仿佛有人点了我一下。</p>
<blockquote>
<p>人生苦短，我用set</p>
</blockquote>
<p>​		我直接遍历一次，从第一个开始，用一个set集合将当前数字和他的下一个数字的和保存起来。set集合的特性就是不允许有重复的项出现，那我一个一个保存，如果有重复的，那么就算我加进去一个新的和，如果有一样的，该set集合的长度并不会增加，那我只需要每次加完了都判断一下不就好了。（如果有对set集合的特性不清楚的朋友可以点击 <a href="https://blog.csdn.net/yas12345678/article/details/52601454">这里</a> 去了解一下）</p>
<p>​		想清楚了，直接写：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">findSubarrays</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用set</span></span><br><span class="line">        set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">        <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>() - <span class="number">1</span>; i ++)&#123;</span><br><span class="line">            len = set.<span class="built_in">size</span>();</span><br><span class="line">            set.<span class="built_in">insert</span>(nums[i] + nums[i + <span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (set.<span class="built_in">size</span>() == len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>运行一下：</p>
<p><img src="https://gitee.com/zhang-jie-king/myfigurebed/raw/master/202304261038926.png" alt="image-20230326112435936" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>呼，看见0ms我就开心，但是内存占用变多了。</p>
<p>博主目前没有想到更好的方法可以同时兼顾时间和空间，如果你有好的点子，欢迎<code>pr</code></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机导论</title>
    <url>/2023/05/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<p>#计算机发展历程与分类</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>早期计算机技术（如差分机、分析机）</p>
<p>​		早期计算机技术指的是20世纪上半叶的计算机技术。在这个时期，计算机的设计和制造还处于起步阶段，计算机的体积庞大，运算速度较慢，且只能进行简单的数学计算。其中比较典型的代表是差分机和分析机。</p>
<p>差分机是由美国数学家查尔斯·巴贝奇发明的一种机械式计算机。它利用齿轮和滑动计数器来进行数值计算，能够进行多项式插值、数值积分等运算，是现代计算机的先驱。</p>
<p>​		分析机是由英国科学家查尔斯·贝贝奇设计的计算机。它是第一台真正意义上的计算机，采用了程序控制的思想，可以进行更加复杂的数值和符号运算。然而，由于当时的技术限制，分析机并未真正建成。</p>
<p>这些早期的计算机技术为现代计算机的发展奠定了基础，其主要思想和技术手段仍在现代计算机中得到广泛应用。</p>
</li>
<li class="lvl-2">
<p>计算机的五代发展历程</p>
<p>计算机的五代发展历程可以概括为以下几个时期：</p>
<p>​		第一代计算机：20世纪40年代到50年代初，采用真空管和机械继电器进行运算，速度慢，体积大，功耗高。</p>
<p>​		第二代计算机：50年代中期到60年代，采用晶体管进行运算，速度更快，可靠性更高，功耗更低。</p>
<p>​		第三代计算机：60年代末到70年代中期，采用集成电路进行运算，计算能力和可靠性进一步提高。</p>
<p>​		第四代计算机：70年代末到80年代末，采用微处理器和大规模集成电路进行运算，计算机体积更小，价格更低，功能更强大。</p>
<p>​		第五代计算机：80年代末到现在，采用超大规模集成电路进行运算，具有更高的运算速度和存储容量，支持人工智能等新兴应用。</p>
<p>这五代计算机的发展历程，不仅提高了计算机的性能和功能，而且改变了人们的生产、生活和思维方式，对人类社会产生了深远影响。</p>
</li>
<li class="lvl-2">
<p>计算机的分类（按用途、按结构等）</p>
<p>计算机按用途可以分为以下几类：</p>
<ol>
<li class="lvl-7">
<p>通用计算机（General-Purpose Computer）：也叫通用型计算机，是一种功能非常广泛的计算机，可以用于各种不同的应用领域。常见的个人电脑、笔记本电脑、工作站等就属于通用计算机。</p>
</li>
<li class="lvl-7">
<p>专用计算机（Special-Purpose Computer）：也叫专用型计算机，是为特定的应用领域而设计的计算机。如数字信号处理器（DSP）、自动化控制计算机等都属于专用计算机。</p>
</li>
<li class="lvl-7">
<p>嵌入式计算机（Embedded Computer）：也叫嵌入式系统，是嵌入到其他设备中的计算机。如电视机、汽车、洗衣机等都有可能内嵌有嵌入式计算机。</p>
</li>
</ol>
<p>按结构分类： 计算机按结构可以分为以下几类：</p>
<ol>
<li class="lvl-7">
<p>冯·诺依曼结构计算机：是最早的计算机结构之一，其特点是程序和数据存储在同一存储器中，计算机按照程序顺序进行操作。</p>
</li>
<li class="lvl-7">
<p>程序可编程结构计算机：也叫存储程序计算机，是在冯·诺依曼结构的基础上发展而来的计算机，可以将程序和数据存储在不同的存储器中，支持程序的修改和执行。</p>
</li>
<li class="lvl-7">
<p>并行计算机：是同时进行多个计算任务的计算机，可以大大提高计算效率和速度。其结构可以分为共享内存结构、分布式结构和混合结构等。</p>
</li>
<li class="lvl-7">
<p>分布式计算机：是由多个计算机组成的计算系统，可以进行分布式数据存储和处理。其结构可以分为集中式结构、对等式结构和混合式结构等。</p>
</li>
<li class="lvl-7">
<p>计算机的应用领域和发展前景</p>
</li>
</ol>
</li>
<li class="lvl-2">
<p>计算机的应用领域和发展前景</p>
<p>计算机应用涉及的领域十分广泛，可以大致分为以下几类：</p>
<ol>
<li class="lvl-7">
<p>科学计算领域：包括天气预报、地震模拟、分子模拟、流体力学模拟等。</p>
</li>
<li class="lvl-7">
<p>工业自动化领域：包括控制系统、机器人、智能制造等。</p>
</li>
<li class="lvl-7">
<p>信息管理领域：包括数据库、信息检索、知识管理等。</p>
</li>
<li class="lvl-7">
<p>多媒体应用领域：包括图形图像处理、音视频处理等。</p>
</li>
<li class="lvl-7">
<p>网络和通信领域：包括互联网、移动通信等。</p>
</li>
</ol>
<p>随着技术的不断发展，计算机的应用领域也在不断拓展。未来计算机将更加智能。</p>
</li>
</ul>
<p>#计算机硬件基础知识</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>计算机的主板、显卡、声卡、电源等组成部分</p>
<ul class="lvl-2">
<li class="lvl-6">主板：是计算机的中央组件，它连接了其他所有组件。主板上包含了CPU插槽、内存插槽、显卡插槽等接口，还包括北桥芯片和南桥芯片等电路板。</li>
<li class="lvl-6">显卡：是计算机的显示器控制器，负责将计算机处理后的数字信号转换成显示器可以显示的图像。显卡通常包括图形处理器（GPU）、显存等核心部件。</li>
<li class="lvl-6">声卡：是计算机的音频控制器，负责将计算机处理后的音频信号转换成扬声器可以播放的声音。声卡通常包括模拟-数字转换器（ADC）、数字-模拟转换器（DAC）等核心部件。</li>
<li class="lvl-6">电源：是计算机的供电系统，负责将交流电转换成计算机需要的直流电，并提供稳定的电压和电流。电源通常包括变压器、整流器、滤波器、稳压器等核心部件。</li>
</ul>
</li>
<li class="lvl-2">
<p>CPU的工作原理和性能指标（主频、缓存、核心数量等）</p>
<ul class="lvl-2">
<li class="lvl-6">CPU：是计算机的中央处理器，负责执行计算机程序的指令，控制计算机的运作。CPU通常包括运算器、控制器、寄存器等核心部件。</li>
<li class="lvl-6">主频：是CPU运行的时钟频率，通常用GHz表示，主频越高表示CPU的运算速度越快。</li>
<li class="lvl-6">缓存：是CPU内部的一种高速缓存，存储常用的数据和指令，可以提高CPU访问数据的速度。缓存分为一级缓存、二级缓存等多级，缓存容量越大、速度越快，则CPU的性能越好。</li>
<li class="lvl-6">核心数量：是指CPU内部的处理器核心数量，通常表示为单核、双核、四核等，核心数量越多，则CPU可以同时处理更多的任务，性能也越好。</li>
</ul>
</li>
<li class="lvl-2">
<p>存储器的类型、特点和使用</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>存储器：是计算机的数据存储设备，包括内存和硬盘等存储介质。</p>
</li>
<li class="lvl-6">
<p>内存：是计算机的主存储器，用于临时存储正在运行的程序和数据。内存分为DRAM和SRAM两种类型，DRAM容量大、价格便宜，但速度较慢；SRAM速度快，但容量小、价格昂贵。</p>
</li>
<li class="lvl-6">
<p>硬盘：是计算机的永久性存储设备，用于长期存储程序和数据。硬盘通常包括机械硬盘和固态硬盘两种类型，机械硬盘的存储介质是旋转的磁盘，速度相对较慢但容量较大；固态硬盘则采用闪存芯片作为存储介质，速度相对较快但容量较小，价格也更贵。</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>输入输出设备的工作原理和分类（如鼠标、键盘、打印机、扫描仪、摄像头等）</p>
<ul class="lvl-2">
<li class="lvl-6">鼠标：是一种计算机输入设备，用于控制光标在计算机屏幕上移动和进行选择等操作。鼠标的工作原理是通过感应鼠标底部的球或光电传感器来感知鼠标的移动方向和速度，从而控制光标在屏幕上的移动。</li>
<li class="lvl-6">键盘：是一种计算机输入设备，用于输入字符、数字和命令等。键盘的工作原理是通过按键触发机械开关，从而产生电信号，计算机通过接收这些信号来识别用户的输入。</li>
<li class="lvl-6">打印机：是一种计算机输出设备，用于将计算机中的信息打印成纸质文档。打印机的工作原理是通过喷墨、激光或热敏等技术将打印头上的墨水、粉末或热敏纸转移到打印纸上，从而形成文本和图像等内容。</li>
<li class="lvl-6">扫描仪：是一种计算机输入设备，用于将纸质文档、图片等转换成数字信号，以便在计算机上进行编辑和处理。扫描仪的工作原理是通过激光、CCD等技术将纸质文档的信息转换成数字信号。</li>
<li class="lvl-6">摄像头：是一种计算机输入设备，用于捕捉图像和视频等信息。摄像头的工作原理是通过感光元件和透镜等技术将光线转换成数字信号，从而形成图像和视频等内容。</li>
</ul>
</li>
</ul>
<p>这些硬件组成部分和输入输出设备都是计算机体系结构的重要组成部分，了解它们的工作原理和性能指标可以帮助用户更好地了解计算机的运作机制，并选择更适合自己需求的硬件和设备。</p>
<p>#计算机软件基础知识</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>操作系统的启动过程、内核结构和管理资源的方式</p>
<ul class="lvl-2">
<li class="lvl-6">启动过程：计算机加电后，操作系统会先进行自检，然后加载BIOS（Basic Input/Output System，基本输入输出系统），BIOS会负责初始化硬件，并将控制权转交给操作系统的引导程序（bootloader）。引导程序会读取操作系统的核心文件，将其加载到内存中，并执行操作系统的初始化过程。</li>
<li class="lvl-6">内核结构：操作系统的内核通常由多个子系统组成，如进程管理、内存管理、文件系统、设备驱动程序等。不同的操作系统内核结构可能会有所不同，但它们都具有相似的功能和架构。</li>
<li class="lvl-6">资源管理方式：操作系统通过分配资源的方式来管理计算机的硬件和软件资源，包括处理器、内存、输入输出设备等。操作系统通过调度算法来分配CPU时间片，避免不同进程之间的互相干扰；内存管理会为每个进程分配虚拟地址空间，并将其映射到物理内存上；输入输出设备管理会负责设备的初始化、数据传输和中断处理等。</li>
</ul>
</li>
<li class="lvl-2">
<p>程序设计语言的基本语法、数据类型和控制结构</p>
<ul class="lvl-2">
<li class="lvl-6">基本语法：程序设计语言有自己的语法规则，包括标识符、数据类型、运算符、控制语句等。不同的编程语言具有不同的语法结构和关键字，如C语言、Python、Java等。</li>
<li class="lvl-6">数据类型：不同的编程语言支持不同的数据类型，如整型、浮点型、字符型、布尔型等。不同的数据类型可以用于不同的计算和存储场景。</li>
<li class="lvl-6">控制结构：程序设计语言支持不同的控制结构，如顺序结构、分支结构、循环结构等。这些结构可以用于控制程序的执行流程，实现不同的功能和算法。</li>
</ul>
</li>
<li class="lvl-2">
<p>常见的应用软件（如办公软件、浏览器、媒体播放器等）和系统软件（如防病毒软件、压缩软件、网络管理软件等）</p>
<ul class="lvl-2">
<li class="lvl-6">应用软件：应用软件是用于完成特定任务或功能的软件，如办公软件（如Word、Excel、PPT等）、浏览器（如Chrome、Firefox等）、媒体播放器（如VLC、Potplayer等）等。这些软件具有各自的特点和功能，可以帮助用户完成不同的工作和娱乐任务。</li>
<li class="lvl-6">系统软件：系统软件是用于管理和控制计算机硬件和软件资源的软件，如操作系统、防病毒软件、网络管理软件、压缩软件等。这些软件在计算机的使用过程中起到至关重要的作用，保证了计算机的安全、稳定和高效运行。</li>
<li class="lvl-6">防病毒软件：防病毒软件是一种用于防止电脑病毒的软件，它通过对计算机的扫描和监控，及时发现并清除病毒。防病毒软件通常由病毒数据库、扫描引擎、行为监控等多个组件组成，可以保障计算机的安全。常见的防病毒软件有 Windows Defender、Avast、360安全卫士等。</li>
<li class="lvl-6">压缩软件：压缩软件是一种将多个文件压缩成一个文件的工具。通过将多个文件压缩在一起，可以减小文件的总大小，从而更方便地存储和传输。常见的压缩软件有 WinRAR、7-Zip、WinZip等。</li>
<li class="lvl-6">网络管理软件：网络管理软件是一种用于管理和监控网络的软件，它可以对网络进行配置、监控和维护。常见的网络管理软件有Wireshark、Nmap、Putty等，它们可以帮助用户监测网络流量、发现网络漏洞，以及进行远程管理和维护等操作。</li>
</ul>
</li>
</ul>
<p>#计算机网络与通信</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网络拓扑结构和协议的种类</p>
<ul class="lvl-2">
<li class="lvl-6">网络拓扑结构：网络拓扑结构指的是计算机网络中各个节点之间的物理连接方式，常见的网络拓扑结构有总线型、星型、环型、网状型、树形等。不同的拓扑结构对网络的性能和可靠性都有不同的影响。</li>
<li class="lvl-6">协议的种类：计算机网络中，不同的网络节点之间需要通过协议进行通信，常见的协议有传输层的TCP、UDP协议，网络层的IP协议，以及应用层的HTTP、FTP、SMTP、POP3等协议。这些协议定义了不同层次上的数据传输方式和规则，保证了网络通信的顺畅和可靠。</li>
</ul>
</li>
<li class="lvl-2">
<p>网络通信的基本原理和过程（如TCP/IP协议、DNS解析、数据包传输等）</p>
<ul class="lvl-2">
<li class="lvl-6">TCP/IP协议：TCP/IP协议是计算机网络中最常用的协议之一，它是一个分层协议体系，包括物理层、数据链路层、网络层、传输层和应用层。TCP/IP协议的工作方式是将数据分成小块，通过不同的网络节点传输，最终组合成完整的数据包。TCP协议保证了数据的可靠传输，而UDP协议则更加简洁，适用于实时性要求较高的应用场景。</li>
<li class="lvl-6">DNS解析：DNS解析是将域名转换为IP地址的过程。当用户在浏览器中输入一个网址时，浏览器会将这个网址发送到DNS服务器，DNS服务器根据域名查询相应的IP地址，并将结果返回给浏览器，浏览器再根据IP地址访问相应的网站。这个过程中涉及到了DNS协议、DNS缓存等多个方面。</li>
<li class="lvl-6">数据包传输：数据包是网络中传输数据的基本单位，它包含了数据、目标地址、源地址等信息。在传输过程中，数据包会从一个节点经过多个网络设备，如路由器、交换机等，每个设备会根据目标地址将数据包转发到下一个节点，最终到达目标设备。在传输过程中，还涉及到数据校验、重传等多个机制，保证了数据的可靠传输。</li>
</ul>
</li>
<li class="lvl-2">
<p>互联网的基本组成和工作原理</p>
<p>互联网是一个全球性的计算机网络，由各种计算机网络相互连接而成，其基本组成包括：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>主机（Host）：指连接到互联网上的计算机或其他设备，包括个人电脑、服务器、移动设备等。</p>
</li>
<li class="lvl-6">
<p>路由器（Router）：负责将数据包从一个网络传输到另一个网络，是互联网的关键设备之一。</p>
</li>
<li class="lvl-6">
<p>互联网服务提供商（ISP）：提供连接到互联网的服务，包括宽带、光纤、卫星等。</p>
</li>
<li class="lvl-6">
<p>互联网交换中心（IXP）：连接不同的ISP，使数据可以在不同的ISP之间传输。</p>
</li>
</ul>
<p>互联网的工作原理基于TCP/IP协议族，它是一种用于互联网的通信协议，由传输控制协议（TCP）和网络协议（IP）两个部分组成。TCP协议负责数据的可靠传输，IP协议负责将数据包从源主机传输到目标主机。</p>
<p>互联网的通信过程可以分为以下几个步骤：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>数据包的生成：数据包是网络传输中的基本单位，由源主机生成。</p>
</li>
<li class="lvl-6">
<p>数据包的传输：数据包在源主机经过物理层、数据链路层、网络层和传输层等多个层次的封装和解封装，最终被传输到目标主机。</p>
</li>
<li class="lvl-6">
<p>路由选择：当数据包到达路由器时，路由器根据路由表选择最佳路径传输数据包。</p>
</li>
<li class="lvl-6">
<p>目标主机的接收：目标主机接收到数据包后，进行解封装和处理，最终将数据交给应用层。</p>
</li>
</ul>
<p>在数据包传输过程中，DNS（域名系统）也发挥了重要的作用。DNS将域名转换为IP地址，使得源主机能够定位目标主机的位置，实现数据包的传输。</p>
</li>
</ul>
<p>#信息安全与计算机伦理</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>常见的网络安全威胁（如病毒、木马、黑客攻击等）和预防措施</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>病毒</p>
<p>病毒是一种程序，能够通过感染文件或操作系统来复制自身并传播。病毒可以通过电子邮件、文件下载、可移动存储设备等途径传播。为了预防病毒，用户应当安装杀毒软件，并定期更新病毒库以保持最新的防护能力。同时，用户也应当注意不要下载和打开来路不明的文件，尤其是在使用电子邮件和即时通讯软件时要小心。</p>
</li>
<li class="lvl-6">
<p>木马</p>
<p>木马是一种隐藏在正常程序中的恶意代码，能够在用户不知情的情况下控制计算机。木马可以通过电子邮件、文件下载、可移动存储设备等途径传播。为了预防木马，用户应当安装防火墙和杀毒软件，并定期更新病毒库和防火墙规则。同时，用户也应当注意不要下载和打开来路不明的文件，尤其是在使用电子邮件和即时通讯软件时要小心。</p>
</li>
<li class="lvl-6">
<p>黑客攻击</p>
<p>黑客攻击是指攻击者通过网络渗透到目标计算机或网络中，获取或破坏数据的行为。黑客攻击包括端口扫描、密码猜测、拒绝服务攻击、跨站脚本攻击等。为了预防黑客攻击，用户应当使用复杂的密码，并定期更换密码。同时，用户也应当定期更新操作系统和应用程序，以修补已知的漏洞。</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>计算机伦理的基本概念和原则</p>
<p>​		计算机伦理是指计算机使用和开发中所涉及的道德、价值和社会责任等方面的问题。计算机伦理包括隐私、知识产权、虚拟身份、网络道德等方面。计算机伦理的基本原则包括诚实、保密、隐私、财产权、版权、许可权、公共利益和社会责任等。</p>
</li>
<li class="lvl-2">
<p>相关法律法规（如《计算机信息系统安全保护条例》、《互联网管理办法》等）</p>
<p>计算机技术的发展使得我们的生活越来越依赖于计算机，也让计算机安全问题变得越来越重要。为了维护国家网络安全，国家出台了一系列相关法律法规。以下是一些常见的相关法律法规：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>计算机信息系统安全保护条例：是我国的第一部计算机安全专门法规，它规定了计算机信息系统的安全保护措施，明确了计算机信息系统的安全责任、安全管理制度、安全技术措施等方面的内容。</p>
</li>
<li class="lvl-6">
<p>互联网管理办法：该办法是中华人民共和国国务院于2000年颁布的互联网管理的重要法规，主要规定了互联网服务提供者的准入条件、互联网用户信息保护、互联网内容管理、互联网市场管理等方面的内容。</p>
</li>
<li class="lvl-6">
<p>信息安全技术基本要求：由中华人民共和国公安部制定，旨在规定我国信息安全技术的基本要求，为信息安全技术工作提供了指导和规范，规定了涉及信息安全的技术和管理要求等。</p>
</li>
<li class="lvl-6">
<p>电子签名法：是我国的一部关于电子签名法律规范，规定了电子签名的定义、电子签名的法律效力、电子签名的申请、审核、管理等方面的内容。</p>
</li>
<li class="lvl-6">
<p>中华人民共和国网络安全法：2016年11月1日实施的《中华人民共和国网络安全法》是我国第一部全面规范网络空间安全的基础性法律法规，明确了网络安全的基本要求和保护措施，规定了网络运营者的责任、网络安全检查和评估、网络安全事件的报告等内容，强化了国家对网络安全的管理和保护。</p>
</li>
</ul>
<p>这些法律法规为计算机网络安全提供了法律保障，并对网络安全工作提出了要求和规范。在计算机使用和网络使用过程中，我们需要遵守这些法律法规，加强对自己计算机和网络使用行为的管理和规范，保障自己的安全。</p>
</li>
</ul>
<p>#计算机应用与发展趋势</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>计算机在生产、科研、教育、医疗、金融等领域的应用</p>
<p>计算机在现代社会的各个领域都有广泛的应用，包括但不限于以下几个方面：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>生产领域：自动化生产线、智能机器人、计算机辅助设计等，能够提高生产效率、质量和降低成本。</p>
</li>
<li class="lvl-6">
<p>科研领域：计算机模拟、数据分析、人工智能等技术的应用，能够提高科研效率和水平。</p>
</li>
<li class="lvl-6">
<p>教育领域：网络教育、电子教室、电子图书等，能够提高教育资源的利用效率和教育质量。</p>
</li>
<li class="lvl-6">
<p>医疗领域：医疗信息管理系统、医学影像处理、远程医疗等，能够提高医疗服务的效率和质量。</p>
</li>
<li class="lvl-6">
<p>金融领域：电子支付、网上银行、证券交易系统等，能够提高金融服务的效率和安全性。</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p>人工智能、区块链、物联网等新技术的发展和应用</p>
<p>人工智能（Artificial Intelligence，简称AI）是一种模拟人类智能的技术，它主要包括机器学习、自然语言处理、计算机视觉等领域。随着计算机计算能力的提高和数据的不断增加，人工智能在语音识别、图像识别、自然语言处理等领域已经取得了很大的进展，并广泛应用于各行各业。</p>
<p>区块链（Blockchain）是一种去中心化的分布式账本技术，主要用于数据的存储和传输。其特点是去中心化、不可篡改、公开透明、可追溯等。区块链技术已经应用于数字货币、供应链管理、物联网等领域，并具有很大的发展潜力。</p>
<p>物联网（Internet of Things，简称IoT）是指将各种物理设备与互联网连接起来，实现设备之间的数据交换和通信，从而实现物理世界与数字世界的融合。物联网技术已经应用于智能家居、智能交通、智能制造等领域，并将对未来的生活、工作、生产等方面产生重大影响。</p>
</li>
<li class="lvl-2">
<p>计算机行业的趋势和前景分析</p>
<p>随着信息技术的不断发展，计算机行业将继续保持快速增长的态势。未来几年，计算机行业的发展趋势主要包括以下几个方面：</p>
<ol>
<li class="lvl-7">
<p>人工智能技术的不断应用，将带来更多的智能化产品和服务；</p>
</li>
<li class="lvl-7">
<p>区块链技术的应用将进一步拓展，对金融、供应链等领域产生更大的影响；</p>
</li>
<li class="lvl-7">
<p>物联网的发展将使得智能家居、智能城市等成为可能；</p>
</li>
<li class="lvl-7">
<p>云计算、大数据、边缘计算等技术将不断成熟和发展，使得计算机系统更加智能、高效和安全；</p>
</li>
<li class="lvl-7">
<p>随着5G网络的普及，网络带宽将大幅提升，推动计算机行业向更高的速度和更广泛的应用方向发展。</p>
</li>
</ol>
<p>总之，未来计算机行业将继续保持高速发展的态势，技术的进步将不断推动产业的变革和创新，人们的生产和生活也将因此得到更多的改善和提升。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>项目基本分包目录结构</title>
    <url>/2023/05/11/Springboot%E9%A1%B9%E7%9B%AE%E5%90%8E%E7%AB%AF%E5%9F%BA%E6%9C%AC%E5%88%86%E5%8C%85%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>​		代码分包一直以来都是程序员的一个必备技能，代码分包是指将代码按照一定的逻辑或功能进行分组，放置在不同的包中，从而组织好代码的层次结构。代码分包的重要性如下：</p>
<ol>
<li class="lvl-3"><code>提高代码的可读性和可维护性</code>：代码分包可以将相关的代码放在一起，有利于人们理解代码的逻辑和结构，减少代码的混乱和冗余，提高代码的可读性。此外，代码分包也有助于维护代码，当需要修改某个功能时，只需要修改与之相关的包中的代码，不会影响其他的代码。</li>
<li class="lvl-3"><code>便于团队协作开发</code>：在一个团队中，每个人都可能负责不同的代码模块或功能，代码分包可以将不同的功能或模块进行分离，不同的开发人员可以分别负责不同的包中的代码，可以有效减少代码冲突和合并的次数，提高团队的协作开发效率。</li>
<li class="lvl-3"><code>有利于代码重用</code>：代码分包可以将通用的功能代码封装到一个包中，不同的模块可以直接调用这个包中的代码，避免重复编写相同的代码，提高代码的重用性和开发效率。</li>
<li class="lvl-3"><code>有助于代码优化和调试</code>：通过代码分包可以更清晰地了解各个代码模块之间的依赖关系，有利于进行代码优化和调试。例如，当出现性能问题时，可以根据代码分包的结构，定位到具体的模块或功能，从而更快地找到问题的根本原因。</li>
</ol>
<p>​		代码分包是一个非常重要的技术，能够有效提高代码的可读性、可维护性、可重用性和协作开发效率，有助于代码的优化和调试，是现代软件开发中不可缺少的一部分。</p>
<p>#分包示例</p>
<p>##后端Springboot项目代码分包示例</p>
<p>在 Spring Boot 项目中，可以根据功能或模块将代码划分为不同的包，以便更好地组织和管理代码。</p>
<p>以下是一些可能的包分配方式：</p>
<ol>
<li class="lvl-3">
<p>控制器层和业务逻辑层分离：可以将所有控制器放在一个包中，将所有的业务逻辑层代码放在另一个包中。</p>
</li>
<li class="lvl-3">
<p>根据功能模块分离：将所有与用户身份验证相关的代码放在一个包中，将所有与订单处理相关的代码放在另一个包中，以此类推。</p>
</li>
<li class="lvl-3">
<p>按层分离：将所有的实体类放在一个包中，将所有的 DAO（数据访问对象）接口和实现类放在另一个包中，将所有的服务接口和实现类放在另一个包中，以此类推。</p>
</li>
<li class="lvl-3">
<p>按技术类型分离：将所有与数据库操作相关的代码放在一个包中，将所有与 RESTful API 相关的代码放在另一个包中，将所有与 WebSocket 相关的代码放在另一个包中，以此类推。</p>
</li>
</ol>
<p>无论您选择哪种方式，都需要考虑以下问题：</p>
<ol>
<li class="lvl-3">
<p>包的数量：您不希望包的数量太多，这会让您的项目变得杂乱无章。另一方面，也不要将太多的代码放在同一个包中，否则这将使代码难以阅读和维护。</p>
</li>
<li class="lvl-3">
<p>包的名称：尽量为包选择具有描述性的名称，以便其他人可以轻松地理解它们的目的。</p>
</li>
<li class="lvl-3">
<p>包之间的依赖关系：确保您的包之间的依赖关系合理。通常，较低级别的包不应该依赖于较高级别的包，因为这将增加耦合性。相反，较高级别的包应该依赖于较低级别的包，以确保代码的可维护性和可重用性。</p>
</li>
</ol>
<p>综上所述，根据您的具体项目需求和设计，选择适当的包划分方式是非常重要的。</p>
<p>下面是一个基本的 Spring Boot 项目标准分包目录结构示例，以 <code>com.example</code> 作为根包：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">src/main/java</span><br><span class="line">├─ com.example.demo</span><br><span class="line">│  ├─ config                   # 配置类</span><br><span class="line">│  ├─ controller               # 控制器层</span><br><span class="line">│  ├─ dao                      # 数据访问层</span><br><span class="line">│  ├─ entity                   # 实体类</span><br><span class="line">│  ├─ exception                # 异常类</span><br><span class="line">│  ├─ service                  # 服务层</span><br><span class="line">│  │  ├─ impl                  # 服务层实现类</span><br><span class="line">│  │  └─ dto                   # 数据传输对象</span><br><span class="line">│  └─ utils                    # 工具类</span><br><span class="line">└─ resources</span><br><span class="line">   ├─ static                   # 静态资源</span><br><span class="line">   ├─ templates                # 模板文件</span><br><span class="line">   ├─ application.properties   # 应用配置文件</span><br><span class="line">   └─ application.yml          # 应用配置文件</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>dao</code> 层和 <code>service</code> 层分别对应数据访问层和服务层，分别负责处理数据访问和业务逻辑，可以更好地实现职责分离和模块化设计。</p>
</li>
<li class="lvl-2">
<p><code>service</code> 层下面还有 <code>impl</code> 和 <code>dto</code> 两个子包，分别用于存放服务层的实现类和数据传输对象。<code>impl</code> 子包可以帮助我们更好地组织服务层的代码，<code>dto</code> 子包可以用于定义与前端交互的数据模型。</p>
</li>
<li class="lvl-2">
<p>新增了 <code>exception</code> 包，用于存放自定义异常类。自定义异常可以帮助我们更好地处理异常情况，并提供更加友好的错误提示信息。</p>
</li>
<li class="lvl-2">
<p><code>utils</code> 包用于存放通用工具类，如日期处理工具类、加密解密工具类、文件上传下载工具类等。</p>
</li>
<li class="lvl-2">
<p><code>resources</code> 目录下新增了 <code>static</code> 和 <code>templates</code> 两个子目录，用于存放静态资源和模板文件。静态资源包括图片、CSS 和 JavaScript 等文件，模板文件用于生成 HTML 页面。</p>
</li>
<li class="lvl-2">
<p><code>application.properties</code> 和 <code>application.yml</code> 分别对应应用的配置文件，可以用于配置应用的属性和参数。</p>
</li>
</ul>
<p>下面是一个基本的 Spring Boot 项目调用层级流程示意图：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">┌───────────────────┐          ┌───────────────────┐          ┌───────────────────┐</span><br><span class="line">│     Controller    │ ◄─────── │       Service     │ ◄─────── │         DAO       │</span><br><span class="line">└───────────────────┘          └───────────────────┘          └───────────────────┘</span><br><span class="line"><span class="code">            ▲                             ▲                             ▲        </span></span><br><span class="line"><span class="code">            │                             │                             │        </span></span><br><span class="line"><span class="code">            │                             │                             │        </span></span><br><span class="line"><span class="code">            │                             │                             │        </span></span><br><span class="line"><span class="code">┌───────────────────┐          ┌───────────────────┐          ┌───────────────────┐</span></span><br><span class="line"><span class="code">│       DTO         │ ◄─────── │       Entity      │ ◄─────── │       Mapper      │</span></span><br><span class="line"><span class="code">└───────────────────┘          └───────────────────┘          └───────────────────┘</span></span><br></pre></td></tr></table></figure>
<p>其中，Controller 层接收 HTTP 请求，调用 Service 层的方法处理业务逻辑，Service 层调用 DAO 层的方法访问数据库获取数据。DTO 用于数据传输对象，用于封装与 HTTP 请求和响应相关的数据，Entity 用于表示数据库中的表结构，Mapper 用于存储 MyBatis 的 SQL 映射语句。</p>
<p>调用层级流程可以总结为以下步骤：</p>
<ol>
<li class="lvl-3">
<p><code>Controller </code>接收 HTTP 请求，解析请求参数并将其转换为 <code>DTO </code>对象。</p>
</li>
<li class="lvl-3">
<p><code>Controller</code> 调用 <code>Service</code> 层的方法，将 <code>DTO</code> 对象作为参数传递给 <code>Service</code> 层。</p>
</li>
<li class="lvl-3">
<p><code>Service</code> 层处理业务逻辑，根据需要调用 <code>DAO</code> 层的方法获取数据。</p>
</li>
<li class="lvl-3">
<p><code>DAO</code> 层访问数据库获取数据，将数据转换为 <code>Entity </code>对象。</p>
</li>
<li class="lvl-3">
<p><code>DAO</code> 层将 <code>Entity</code> 对象返回给 <code>Service</code> 层。</p>
</li>
<li class="lvl-3">
<p><code>Service</code> 层将 <code>Entity</code> 对象转换为 <code>DTO</code> 对象，并将其返回给 <code>Controller</code> 层。</p>
</li>
<li class="lvl-3">
<p><code>Controller</code> 层将<code> DTO</code> 对象转换为 HTTP 响应并返回给客户端。</p>
</li>
</ol>
<p>以上是一个简单的调用层级流程示例，具体实现可能会因项目需求和设计而有所不同。</p>
<p>##前端Vue项目代码分包示例</p>
<p>下面是一个细致的 Vue 前端项目目录结构，按照功能划分：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">src/</span><br><span class="line">├── api/                        # 存放 API 接口相关文件</span><br><span class="line">│   ├── config.js               # API 配置文件</span><br><span class="line">│   ├── index.js                # API 接口的入口文件</span><br><span class="line">│   └── modules/                # 存放不同模块的 API 接口文件</span><br><span class="line">│       ├── auth.js              # 用户认证相关 API 接口</span><br><span class="line">│       ├── orders.js            # 订单相关 API 接口</span><br><span class="line">│       └── products.js          # 商品相关 API 接口</span><br><span class="line">├── assets/                     # 存放静态资源文件</span><br><span class="line">│   ├── fonts/                   # 存放字体文件</span><br><span class="line">│   ├── images/                  # 存放图片文件</span><br><span class="line">│   └── styles/                  # 存放样式文件</span><br><span class="line">│       ├── base.scss             # 全局基础样式</span><br><span class="line">│       ├── variables.scss        # 全局变量样式</span><br><span class="line">│       └── mixins/               # 存放 SCSS 混合</span><br><span class="line">├── components/                 # 存放全局组件</span><br><span class="line">│   ├── common/                  # 存放通用组件</span><br><span class="line">│   ├── layout/                  # 存放布局组件</span><br><span class="line">│   └── ui/                      # 存放 UI 组件</span><br><span class="line">├── router/                     # 存放路由相关文件</span><br><span class="line">│   ├── index.js                 # 路由配置文件</span><br><span class="line">│   └── middleware/              # 存放路由中间件文件</span><br><span class="line">├── store/                      # 存放 Vuex 状态管理相关文件</span><br><span class="line">│   ├── index.js                 # Vuex Store 的入口文件</span><br><span class="line">│   ├── modules/                 # 存放不同模块的 Vuex Store 文件</span><br><span class="line">│   │   ├── auth.js               # 用户认证相关 Vuex Store</span><br><span class="line">│   │   ├── orders.js             # 订单相关 Vuex Store</span><br><span class="line">│   │   └── products.js           # 商品相关 Vuex Store</span><br><span class="line">│   └── plugins/                 # 存放 Vuex 插件</span><br><span class="line">│       └── logger.js             # 日志插件</span><br><span class="line">├── utils/                      # 存放工具类相关文件</span><br><span class="line">│   ├── helpers/                 # 存放通用工具类</span><br><span class="line">│   ├── services/                # 存放数据服务相关文件</span><br><span class="line">│   ├── validators/              # 存放表单验证相关文件</span><br><span class="line">│   └── constants.js             # 存放常量文件</span><br><span class="line">├── views/                      # 存放视图相关文件</span><br><span class="line">│   ├── auth/                    # 存放用户认证相关视图</span><br><span class="line">│   ├── orders/                  # 存放订单相关视图</span><br><span class="line">│   ├── products/                # 存放商品相关视图</span><br><span class="line">│   └── dashboard.vue            # 控制面板视图</span><br><span class="line">├── App.vue                     # 根组件</span><br><span class="line">├── main.js                     # 应用程序的入口文件</span><br><span class="line">└── router.js                   # 路由配置文件的入口文件</span><br></pre></td></tr></table></figure>
<p>在这个目录结构中，我们将文件按照功能进行了分类。具体来说：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>api</code> 文件夹存放 API 接口相关文件，其中 <code>config.js</code> 为 API 配置文件，<code>index.js</code> 为API 接口的入口文件，<code>modules</code> 文件夹存放不同模块的 API 接口文件。</p>
</li>
<li class="lvl-2">
<p><code>assets</code> 文件夹存放静态资源文件，包括字体、图片和样式等。其中，<code>fonts</code> 文件夹存放字体文件，<code>images</code> 文件夹存放图片文件，<code>styles</code> 文件夹存放样式文件，包括全局基础样式、全局变量样式和 SCSS 混合等。</p>
</li>
<li class="lvl-2">
<p><code>components</code> 文件夹存放全局组件，包括通用组件、布局组件和 UI 组件等。</p>
</li>
<li class="lvl-2">
<p><code>router</code> 文件夹存放路由相关文件，其中 <code>index.js</code> 为路由配置文件，<code>middleware</code> 文件夹存放路由中间件文件。</p>
</li>
<li class="lvl-2">
<p><code>store</code> 文件夹存放 Vuex 状态管理相关文件，其中 <code>index.js</code> 为 Vuex Store 的入口文件，<code>modules</code> 文件夹存放不同模块的 Vuex Store 文件，<code>plugins</code> 文件夹存放 Vuex 插件。</p>
</li>
<li class="lvl-2">
<p><code>utils</code> 文件夹存放工具类相关文件，包括通用工具类、数据服务相关文件、表单验证相关文件和常量文件等。</p>
</li>
<li class="lvl-2">
<p><code>views</code> 文件夹存放视图相关文件，包括用户认证相关视图、订单相关视图、商品相关视图和控制面板视图等。</p>
</li>
<li class="lvl-2">
<p><code>App.vue</code> 文件为根组件，<code>main.js</code> 文件为应用程序的入口文件，<code>router.js</code> 文件为路由配置文件的入口文件。</p>
</li>
</ul>
<p>对于调用层级流程，我们可以简述如下：</p>
<ol>
<li class="lvl-3">
<p>用户在浏览器中访问 Vue 应用，浏览器请求后端获取 HTML 页面。</p>
</li>
<li class="lvl-3">
<p>后端返回 HTML 页面，并将 Vue 应用的 JavaScript 资源文件发送给浏览器。</p>
</li>
<li class="lvl-3">
<p>浏览器解析 HTML 页面和 JavaScript 文件，初始化 Vue 应用。</p>
</li>
<li class="lvl-3">
<p>Vue 应用根据路由配置文件加载对应的视图组件。</p>
</li>
<li class="lvl-3">
<p>视图组件向 Store 层请求数据，Store 层调用 API 层发送 HTTP 请求获取数据。</p>
</li>
<li class="lvl-3">
<p>API 层将请求发送给后端，后端返回数据。</p>
</li>
<li class="lvl-3">
<p>API 层将后端返回的数据解析后返回给 Store 层。</p>
</li>
<li class="lvl-3">
<p>Store 层将数据保存到 Vuex Store 中，并通知视图组件更新数据。</p>
</li>
<li class="lvl-3">
<p>视图组件根据 Store 中的数据渲染页面，并处理用户的交互行为。</p>
</li>
<li class="lvl-4">
<p>如果需要与后端进行数据交互，视图组件调用工具类层的 API 请求方法发送 HTTP 请求。</p>
</li>
<li class="lvl-4">
<p>工具类层调用 Axios 等库发送 HTTP 请求，获取后端返回的数据。</p>
</li>
<li class="lvl-4">
<p>如果需要进行数据持久化操作，视图组件调用 Store 层的数据读取和写入方法。</p>
</li>
</ol>
<p>总体来说，Vue 的调用层级流程相对清晰，不同的层级各司其职，实现了数据的分离和解耦，提高了项目的可维护性和可扩展性。</p>
<p>下面是一个基本的 Vue 前端项目调用层级流程示意图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────────────┐          ┌───────────────────┐          ┌───────────────────┐</span><br><span class="line">│       Router      │ ◄───────│        Store        │ ◄───────│      Component    │</span><br><span class="line">└───────────────────┘          └───────────────────┘          └───────────────────┘</span><br><span class="line">            ▲                             ▲                             ▲        </span><br><span class="line">            │                             │                             │        </span><br><span class="line">            │                             │                             │        </span><br><span class="line">            │                             │                             │        </span><br><span class="line">┌───────────────────┐          ┌───────────────────┐          ┌───────────────────┐</span><br><span class="line">│      View         │ ◄───────│        Vuex         │ ◄───────│      Component    │</span><br><span class="line">└───────────────────┘          └───────────────────┘          └───────────────────┘</span><br></pre></td></tr></table></figure>
<p>其中，Router 层负责处理页面路由，Store 层负责管理应用程序的状态，View 层负责渲染页面并与用户交互。Component 是一个概念性的层级，用于表示各种可复用的 Vue 组件。</p>
<p>调用层级流程可以总结为以下步骤：</p>
<ol>
<li class="lvl-3">
<p>Router 层根据路由信息，选择合适的视图组件进行展示。</p>
</li>
<li class="lvl-3">
<p>视图组件调用 Vuex 的方法，获取应用程序的状态。</p>
</li>
<li class="lvl-3">
<p>Vuex 状态管理层处理应用程序的状态，根据需要调用其他服务或者直接处理数据逻辑。</p>
</li>
<li class="lvl-3">
<p>组件层接收应用程序状态和其他参数，将其传递给子组件，进行页面的渲染。</p>
</li>
<li class="lvl-3">
<p>组件层处理用户的交互行为，调用对应的方法或者发送请求到后端获取数据。</p>
</li>
<li class="lvl-3">
<p>如果需要与后端进行数据交互，可以在 API 层中实现发送 HTTP 请求并接收后端响应的操作。在 Vue 项目中，通常会使用 Axios 或者 Vue-resource 等库来封装 HTTP 请求，方便在 API 层中调用。</p>
</li>
</ol>
<p><strong>本文只是针对前后端项目（前端使用Vue，后端使用Springboot）的一个标准的分包示例，可以为大家进行代码分包提供一定的参考，对于不同的项目和框架会有差异</strong></p>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>Java数据结构与算法</title>
    <url>/2023/03/24/Java%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1><span id="java数据结构与算法">Java数据结构与算法</span></h1>
<h2><span id="绪论">绪论</span></h2>
<blockquote>
<p><code>数据结构</code>是指所涉及的数据元素的集合以及数据元素之间的关系</p>
</blockquote>
<blockquote>
<p>逻辑结构的类型</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>集合</p>
</li>
<li class="lvl-2">
<p>线性结构</p>
</li>
<li class="lvl-2">
<p>树形结构</p>
</li>
<li class="lvl-2">
<p>图形结构</p>
</li>
</ul>
<blockquote>
<p>存储结构</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>顺序存储结构</p>
</li>
<li class="lvl-2">
<p>链式存储结构</p>
</li>
<li class="lvl-2">
<p>索引存储结构</p>
</li>
<li class="lvl-2">
<p>哈希（散列）存储结构</p>
</li>
</ul>
<blockquote>
<p><code>数据类型</code> 是一组性质相同的值的集合和定义在此集合上的一组操作的总称</p>
</blockquote>
<blockquote>
<p>ADT(抽象数据类型)</p>
</blockquote>
<blockquote>
<p>算法</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>有穷性 —&gt;不会出现无限循环</p>
</li>
<li class="lvl-2">
<p>确定性—&gt;不会出现二义性</p>
</li>
<li class="lvl-2">
<p>可行性—&gt;算法每条指令都可执行</p>
</li>
<li class="lvl-2">
<p>输入性—&gt;零个或者多个输入</p>
</li>
<li class="lvl-2">
<p>输出性—&gt;至少一个输出</p>
</li>
</ul>
<blockquote>
<p>算法时间复杂度</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>用T(n)的数量级表示，记作T(n)=O(f(n))</p>
</li>
</ul>
<blockquote>
<p>最好时间复杂度–》min{T(n)}</p>
<p>最坏时间复杂度–》max{T(n)}</p>
<p>平均时间复杂度–》概率</p>
</blockquote>
<h2><span id="线性表">线性表</span></h2>
<blockquote>
<p>线性表的顺序存储结构—顺序表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序表泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqListClass</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">initCapacity</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//顺序表初始容量</span></span><br><span class="line">    <span class="keyword">public</span> E[] data; <span class="comment">//存放顺序表中的元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> size; <span class="comment">//存放顺序表长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> capacity; <span class="comment">//顺序表的容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqListClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[initCapacity];</span><br><span class="line">        <span class="built_in">this</span>.capacity = initCapacity;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    更改容量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateCapacity</span><span class="params">(<span class="type">int</span> newCapacity)</span> &#123;</span><br><span class="line">        E[] newData = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[newCapacity];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.data.length; i++) &#123;</span><br><span class="line">            newData[i] = <span class="built_in">this</span>.data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.capacity = newCapacity;</span><br><span class="line">        <span class="built_in">this</span>.data = newData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    整体建立顺序表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createList</span><span class="params">(E[] a)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.size == <span class="built_in">this</span>.capacity) &#123;</span><br><span class="line">                <span class="built_in">this</span>.updateCapacity(<span class="built_in">this</span>.size * <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            data[i] = a[i];</span><br><span class="line">            size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    add</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size == capacity) &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateCapacity(size * <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        data[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    设置长度,主要用于缩短长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> nLen)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nLen &lt; <span class="number">0</span> || nLen &gt; <span class="built_in">this</span>.size) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;设置长度不在范围内&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size = nLen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    获取线性表中序号为i的元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getElem</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt; size - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;位置i不在有效范围内&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (E) <span class="built_in">this</span>.data[i];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    setElem();</span></span><br><span class="line"><span class="comment">//    求线性表中第一个为e的元素的序号：getNo(E e);</span></span><br><span class="line"><span class="comment">//    将序号为i和j的元素交换位置：swap(int i, int j);</span></span><br><span class="line"><span class="comment">//    在线性表中序号为i的位置插入元素e:insert(int i, E e);</span></span><br><span class="line"><span class="comment">//    删除线性表中序号为i的元素：delete(int i);</span></span><br><span class="line"><span class="comment">//    toString();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>线性表的链式存储结构–链表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 线性表;</span><br><span class="line"><span class="comment">//单链表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表结点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span>&lt;E&gt; &#123;</span><br><span class="line">    E data;</span><br><span class="line">    LinkNode&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单链表类</span></span><br><span class="line"><span class="comment">//public class LinkList&#123;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span>&lt;E&gt; &#123;</span><br><span class="line">    LinkNode&lt;E&gt; head; <span class="comment">//存放头结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkList</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;();<span class="comment">//设置头结点</span></span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    将s结点插入到p结点后面--&gt; s.next = p.next;p.next = s;</span></span><br><span class="line"><span class="comment">//    删除结点p的后继结点--&gt; p.next = p.next.next;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>建立单链表的方法(下面的代码块均位于LinkList类里)</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>头插法(数据结点次序和数组中数据次序正好相反)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createListF</span><span class="params">(E[]e)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e.length();i++)&#123;</span><br><span class="line">        s=<span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(e[i]); <span class="comment">//循环建立结点</span></span><br><span class="line">        s.next=<span class="built_in">this</span>.head.next;</span><br><span class="line">        <span class="built_in">this</span>.head.next=s;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>尾插法(数据结点次序和数组中数据次序相同)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createListR</span><span class="params">(E[]e)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s t;</span><br><span class="line">        t=<span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;e.length();i++)&#123;</span><br><span class="line">        s=<span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;(e[i]);</span><br><span class="line">        t.next=s;</span><br><span class="line">        t=s;</span><br><span class="line">        &#125;</span><br><span class="line">        t=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>线性表的基本运算在单链表中的实现</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>获得序号为i的元素（0&lt;= i &lt;=n-1）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> LinkNode&lt;E&gt; <span class="title function_">getI</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; h=<span class="built_in">this</span>.head;</span><br><span class="line">        <span class="type">int</span> j=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j&lt;i)&#123;</span><br><span class="line">        j++;</span><br><span class="line">        h=h.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>将元素e添加到线性表末尾</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s=<span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;&gt;(e);</span><br><span class="line">        LinkNode&lt;E&gt; p=head;</span><br><span class="line">        <span class="keyword">while</span>(p.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        p.next=s;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>求线性表的长度</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p=head;</span><br><span class="line">        <span class="type">int</span> size;</span><br><span class="line">        <span class="keyword">while</span>(p.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        size++;</span><br><span class="line">        p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>设置线性表的长度</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSize</span><span class="params">(<span class="type">int</span> nLen)</span>&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">this</span>.size();</span><br><span class="line">        <span class="keyword">if</span>(nLen&lt; <span class="number">0</span>||nLen&gt;len)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#x27;err-msg&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(nLen==len)<span class="keyword">return</span>;</span><br><span class="line">        LinkNode&lt;E&gt; p=<span class="built_in">this</span>.getI(nLen-<span class="number">1</span>);<span class="comment">//获取序号为 nLen-1 的结点</span></span><br><span class="line">        p.next=<span class="literal">null</span>;<span class="comment">//截断</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>获取线性表中序号为i的元素（data）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">getElem</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="type">int</span> len=<span class="built_in">this</span>.size();</span><br><span class="line">        <span class="keyword">if</span>(i&lt; <span class="number">0</span>||i&gt;len-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&#x27;err-msg&#x27;</span>);</span><br><span class="line">        LinkNode&lt;E&gt; p=getI(i);<span class="comment">//获取结点</span></span><br><span class="line">        <span class="keyword">return</span>(E)p.data;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>设置线性表中序号为i的元素setElem(int i,E e)  (与获取相似)</p>
</li>
<li class="lvl-2">
<p>求线性表中第一个为e的元素的逻辑序号</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNo</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="type">int</span> j;</span><br><span class="line">        LinkNode&lt;E&gt; p=<span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>&amp;&amp;!p.data.equals(e))&#123;</span><br><span class="line">        j++;</span><br><span class="line">        p=p.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="literal">null</span>)<span class="keyword">return</span>-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>交换序号为 i 和 j 的元素</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p=getI(i);</span><br><span class="line">        LinkNode&lt;E&gt; q=getI(j);</span><br><span class="line">        E temp=p.data;</span><br><span class="line">        p.data=q.data;</span><br><span class="line">        q.data=temp;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>插入 e 作为第i个元素(序号为i)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> i,E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt; <span class="number">0</span>||i&gt;size())<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegealArgumentException</span>();</span><br><span class="line">        LinkNode&lt;E&gt; p=<span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;&gt;(e);</span><br><span class="line">        LinkNode&lt;E&gt; s=getI(i-<span class="number">1</span>);</span><br><span class="line">        s.next=p.next;</span><br><span class="line">        p.next=s;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>删除第i个元素(序号为i)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt; <span class="number">0</span>||i&gt;size())<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegealArgumentException</span>();</span><br><span class="line">        LinkNode&lt;E&gt; p=getI(i-<span class="number">1</span>);</span><br><span class="line">        p.next</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>快慢指针法(返回单链表中间位置元素)(P66)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> E <span class="title function_">middle</span><span class="params">(LinkList&lt;E&gt; l)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; fast=l.head.next;</span><br><span class="line">        LinkNode&lt;E&gt; slow=l.head.next;</span><br><span class="line">        <span class="keyword">while</span>(fast.next!=<span class="literal">null</span>&amp;&amp;fast.next.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        slow=slow.next;</span><br><span class="line">        fast=fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> slow.data;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>利用头插法让单链表l逆序，如（1,2,3,4,5）==&gt;（5,4,3,2,1）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverse</span><span class="params">(LinkList&lt;E&gt; l)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; p=l.head.next;<span class="comment">//p指向头结点</span></span><br><span class="line">        LinkNode&lt;E&gt; q;</span><br><span class="line">        l.head.next=<span class="literal">null</span>;<span class="comment">//将l设置为一个空表</span></span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>)&#123;</span><br><span class="line">        q=p.next;<span class="comment">//先用q临时保存p的后继结点</span></span><br><span class="line">        p.next=l.head.next;</span><br><span class="line">        l.head.next=p;</span><br><span class="line">        p=q;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将两个递增有序单链表合并为一个递增有序单链表（二路归并 + 尾插法）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LinkNodeClass&lt;Integer&gt; <span class="title function_">Merge</span><span class="params">(LinkListClass&lt;Integer&gt; A,</span></span><br><span class="line"><span class="params">        LinkListClass&lt;Integer&gt; B)</span>&#123;</span><br><span class="line">        LinkNode&lt;Integer&gt; p=A.head.next;</span><br><span class="line">        LinkNode&lt;Integer&gt; q=B.head.next;<span class="comment">//p,q均指向头结点</span></span><br><span class="line">        LinkListClass&lt;Integer&gt; C=<span class="keyword">new</span> <span class="title class_">LinkListClass</span>&lt;&gt;();</span><br><span class="line">        LinkNode&lt;Integer&gt; t=C.head;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">null</span>&amp;&amp;q!=<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p.data&lt;q.data)&#123;</span><br><span class="line">        t.next=p;</span><br><span class="line">        t=p;</span><br><span class="line">        p=p.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        t.next=q;</span><br><span class="line">        t=q;</span><br><span class="line">        q=q.next;<span class="comment">//将较小的结点链接到C的末尾</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next=<span class="literal">null</span>;<span class="comment">//将C的尾结点的next设置为空</span></span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">null</span>)t.next=p;</span><br><span class="line">        <span class="keyword">if</span>(q!=<span class="literal">null</span>)t.next=q;</span><br><span class="line">        <span class="keyword">return</span> C;<span class="comment">//返回新链表</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>双链表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双链表的结点泛型类</span></span><br><span class="line"><span class="keyword">public</span> DLinkNode&lt;E&gt;&#123;</span><br><span class="line">        E data;</span><br><span class="line">        DlinkNode&lt;E&gt; prior;<span class="comment">//前驱结点</span></span><br><span class="line">        DlinkNode&lt;E&gt; next;<span class="comment">//后继结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DlinkNode</span><span class="params">()</span>&#123;</span><br><span class="line">        prior=<span class="literal">null</span>;</span><br><span class="line">        next=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DlinkNode</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        data=e;</span><br><span class="line">        <span class="built_in">this</span>.DlinkNode();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//双链表的泛型类</span></span><br><span class="line"><span class="keyword">public</span> DlinkListClass&lt;E&gt;&#123;</span><br><span class="line">        DlinkNode&lt;E&gt; dhead;<span class="comment">//头结点</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">DlinkListClass</span><span class="params">()</span>&#123;</span><br><span class="line">        dhead=<span class="keyword">new</span> <span class="title class_">DLinkNode</span>&lt;E&gt;();</span><br><span class="line">        dhead.prior=<span class="literal">null</span>;</span><br><span class="line">        dhead.next=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//头插法建立双链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createListF</span><span class="params">(E[]a)</span>&#123;</span><br><span class="line">        DLinkNode&lt;E&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length();i++)&#123;</span><br><span class="line">        s=<span class="keyword">new</span> <span class="title class_">DLinkNode</span>&lt;E&gt;(a[i]);</span><br><span class="line">        s.next=dhead.next;<span class="comment">//dhead 为类里面的头结点</span></span><br><span class="line">        <span class="keyword">if</span>(dhead.next!=<span class="literal">null</span>)&#123;</span><br><span class="line">        dhead.next.prior=s;</span><br><span class="line">        &#125;</span><br><span class="line">        dhead.next=s;</span><br><span class="line">        s.prior=dhead;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//尾插法建立双链表</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createListR</span><span class="params">(E[]a)</span>&#123;</span><br><span class="line">        DLinkNode&lt;E&gt; s;</span><br><span class="line">        t=dhead;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length();i++)&#123;</span><br><span class="line">        s=<span class="keyword">new</span> <span class="title class_">DLinkNode</span>&lt;E&gt;(a[i]);</span><br><span class="line">        t.next=s;</span><br><span class="line">        s.prior=t;</span><br><span class="line">        t=s;</span><br><span class="line">        &#125;</span><br><span class="line">        t.next=<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>循环链表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环单链表泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CLinkListClass</span> &#123;</span><br><span class="line">    LinkNode&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClinkListClass</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;();</span><br><span class="line">        head.next = head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>循环双链表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CDLinkNodeList</span>&lt;E&gt; &#123;</span><br><span class="line">    DLinkNode&lt;E&gt; dhead;<span class="comment">//存放头结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> CDLinkNodeList &#123;</span><br><span class="line">        dhead = <span class="keyword">new</span> <span class="title class_">DLinkNode</span>&lt;E&gt;();</span><br><span class="line">        dhead.next = dhead;</span><br><span class="line">        dhead.prior = dhead;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>顺序表和链表的比较</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>基于时间考虑</p>
</li>
</ul>
<p>存储密度 = 结点中数据本身所占用的存储量/整个结点占用的内存量</p>
<p>一般情况下，存储密度越大，存储空间利用率就越大</p>
<p>当线性表长度变化不大，易于事先估计的情况，为了节省内存空间，宜采用顺序表</p>
<p>反之，当变化较大，难以估计其内存大小时，为了节省存储空间，宜采用链表</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>基于时间考虑</p>
</li>
</ul>
<p>在顺序表进行插入删除操作时平均需要移动一半的元素；</p>
<blockquote>
<p>二路归并 + 顺序存储结构求解多项式相加（主要算法）</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>用i，j分别遍历L1和L2有序多项式顺序表的元素，先建立一个空的多项式顺序表L3，在L1，L2都没有遍历完时循环</p>
</li>
<li class="lvl-2">
<ol>
<li class="lvl-7">
<p>若i指向的元素的指数比较大，则根据其系数和指数新建一个元素并将其添加到L3，i++</p>
</li>
<li class="lvl-7">
<p>若j指向的元素的指数比较大，则根据其系数和指数新建一个元素并将其添加到L3，j++</p>
</li>
<li class="lvl-7">
<p>若i和j指向的元素的指数相同，则求出系数之和c，若c != 0,则由该系数和指数新建一个元素并将其添加到L3，否则不新建元素。最后 i++，j++</p>
</li>
</ol>
</li>
</ul>
<blockquote>
<p>采用链式存储结构求解多想是相加</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个多项式对应的结点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyNode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> coef;<span class="comment">//系数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> exp;<span class="comment">//指数</span></span><br><span class="line">    <span class="keyword">public</span> PolyNode next;<span class="comment">//指向下一项</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PolyNode</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PolyNode</span><span class="params">(<span class="type">double</span> coef, <span class="type">int</span> exp)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coef = coef;</span><br><span class="line">        <span class="built_in">this</span>.exp = exp;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多项式单链表PolyClass类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyClass</span> &#123;</span><br><span class="line">    PolyNode head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PolyClass</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">PolyClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="https://www.cnblogs.com/youxin/p/3279391.html">对单链表设置一个头结点的作用是什么？</a></p>
</blockquote>
<h2><span id="栈和队列">栈和队列</span></h2>
<blockquote>
<h3><span id="栈">栈</span></h3>
</blockquote>
<p>抽象来说，栈是一种只能在一段进行插入或者删除操作的线性表，允许插入和删除的一段叫做<code>栈顶</code>，另一端叫做<code>栈底</code>，插入操作通常称为<code>进栈</code>或<code>入栈</code>，删除操作通常称为<code>退栈</code>或<code>出栈</code></p>
<p>设n个元素进栈顺序为1,2,3…n，出栈顺序为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">p_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,若<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = n,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = n-1,…,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">p_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>= 1,</p>
<p>即：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> +<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> + 1, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> - <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> + 1</p>
<blockquote>
<p>顺序栈</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>顺序栈四要素：</p>
</li>
</ol>
<ul class="lvl-0">
<li class="lvl-2">
<p>栈空的条件是 <code>top = -1</code>;</p>
</li>
<li class="lvl-2">
<p>栈满（栈上溢出）的条件是 <code>top = capacity -1</code>   ，采用动态扩容的方法，即栈满时将data数组的容量扩大<code>两倍</code>;</p>
</li>
<li class="lvl-2">
<p>元素e进栈的操作是先将 <code>top+1</code>，然后将元素放在栈顶指针 <code>top</code> 处;</p>
</li>
<li class="lvl-2">
<p>出栈操作先将栈顶指针<code>top</code>处的元素取出，再将<code>top - 1</code>;</p>
</li>
</ul>
<ol start="2">
<li class="lvl-3">
<p>顺序栈的泛型类</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">S</span>    qStackClass&lt;E&gt;&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> initcapacity=<span class="number">10</span>;<span class="comment">//初始容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> capacity;<span class="comment">//存放顺序栈容量</span></span><br><span class="line"><span class="keyword">private</span> E[]data;<span class="comment">//存放顺序栈元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> top;<span class="comment">//存放栈顶指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">SqStackClass</span><span class="params">()</span>&#123;</span><br><span class="line">        data=(E[])<span class="keyword">new</span> <span class="title class_">Object</span>[initcapacity];<span class="comment">//强制转换为E类型数组</span></span><br><span class="line">        capacity=initcapacity;</span><br><span class="line">        top=-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变栈的容量大小</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCapacity</span><span class="params">(<span class="type">int</span> newcapacity)</span>&#123;</span><br><span class="line">        E[] newdata=(E[])<span class="keyword">new</span> <span class="title class_">Object</span>[newcapacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;top+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        newdata[i]=data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        capacity=newcapacity;</span><br><span class="line">        data=newdata;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否为空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> top==-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进栈</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(top==capacity-<span class="number">1</span>)&#123;</span><br><span class="line">        updateCapacity(<span class="number">2</span>*(top+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        top++;</span><br><span class="line">        data[top]=e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">illegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        E e=data[top];</span><br><span class="line">        top--;</span><br><span class="line">        <span class="keyword">if</span>(capacity&gt;initcapacity&amp;&amp;top+<span class="number">1</span>&lt;capacity/<span class="number">4</span>)&#123;</span><br><span class="line">        updateCapacity(capacity/<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈顶元素，但是top指针不移动，只是查看</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">illegalArgumentException</span>(<span class="string">&quot;栈空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>(E)data[top];</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查用户输入的括号是否配对</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMatch</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> e;</span><br><span class="line">        SqStackClass&lt;Character&gt; st=<span class="keyword">new</span> <span class="title class_">SqStackClass</span>&lt;&gt;();<span class="comment">//建立顺序栈</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;str.length)&#123;</span><br><span class="line">        e=str.charAt(i);</span><br><span class="line">        <span class="keyword">if</span>(e==<span class="string">&#x27;(&#x27;</span>||e==<span class="string">&#x27;&#123;&#x27;</span>||e==<span class="string">&#x27;[&#x27;</span>)&#123;</span><br><span class="line">        st.push(e);<span class="comment">//左括号入栈</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(e==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st.empty())<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空</span></span><br><span class="line">        <span class="keyword">if</span>(st.peek()!=<span class="string">&#x27;(&#x27;</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        st.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e==<span class="string">&#x27;]&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st.empty())<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空</span></span><br><span class="line">        <span class="keyword">if</span>(st.peek()!=<span class="string">&#x27;[&#x27;</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        st.pop();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e==<span class="string">&#x27;&#125;&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st.empty())<span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//栈空</span></span><br><span class="line">        <span class="keyword">if</span>(st.peek()!=<span class="string">&#x27;&#123;&#x27;</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        st.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>!empty();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断回文字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPalindrome</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        SqStackClass&lt;Character&gt; st=<span class="keyword">new</span> <span class="title class_">SqStackClass</span>&lt;&gt;();<span class="comment">//建立顺序栈</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//将前半字符入栈</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;n/<span class="number">2</span>)&#123;</span><br><span class="line">        st.push(str.charAt(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//n为奇数跳过最中间的字符</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">        i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将后面的一半字符从栈顶开始比较</span></span><br><span class="line">        <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line">        <span class="comment">//取出栈最上面的字符比较</span></span><br><span class="line">        <span class="keyword">if</span>(!str.charAt(i).equals(st.pop()))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>栈的链式存储结构（不用考虑栈满上溢出的情况）</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>栈空的条件为head.next == null, 初始时只有一个头结点</p>
</li>
<li class="lvl-2">
<p>由于只有内存溢出才会出现栈满的情况，所有一般不考虑</p>
</li>
<li class="lvl-2">
<p>元素e入栈时将包含该元素的结点插入作为首结点</p>
</li>
<li class="lvl-2">
<p>出栈操作返回首结点的值并删除该结点</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结点泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span>&lt;E&gt; &#123;</span><br><span class="line">    E data;</span><br><span class="line">    LinkNode&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链栈泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkStackClass</span>&lt;E&gt;() &#123;</span><br><span class="line">    LinkNode&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkStackClass</span><span class="params">()</span> &#123;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;E&gt;();</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断链栈是否为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> head.next == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进栈</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        LinkNode&lt;E&gt; s = <span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;&gt;(e);</span><br><span class="line">        s.next = head.next;</span><br><span class="line">        head.next = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">illegalArgumentException</span>(<span class="string">&quot;空栈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) head.next.data;</span><br><span class="line">        head.next = head.next.next;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取栈顶元素值</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">illegalArgumentException</span>(<span class="string">&quot;空栈&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E) head.next.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>中缀表达式转后缀表达式<a href="https://developer.aliyun.com/article/319924#:~:text=%E4%B8%AD%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BD%AC%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%9A%201.%E9%81%87%E5%88%B0%E6%93%8D%E4%BD%9C%E6%95%B0%EF%BC%9A%E7%9B%B4%E6%8E%A5%E8%BE%93%E5%87%BA%EF%BC%88%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%90%8E%E7%BC%80%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%EF%BC%89,2.%E6%A0%88%E4%B8%BA%E7%A9%BA%E6%97%B6%EF%BC%8C%E9%81%87%E5%88%B0%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%8C%E7%9B%B4%E6%8E%A5%E5%85%A5%E6%A0%88%203.%E9%81%87%E5%88%B0%E5%B7%A6%E6%8B%AC%E5%8F%B7%EF%BC%9A%E5%B0%86%E5%85%B6%E5%85%A5%E6%A0%88%204.%E9%81%87%E5%88%B0%E5%8F%B3%E6%8B%AC%E5%8F%B7%EF%BC%9A%E6%89%A7%E8%A1%8C%E5%87%BA%E6%A0%88%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%87%BA%E6%A0%88%E7%9A%84%E5%85%83%E7%B4%A0%E8%BE%93%E5%87%BA%EF%BC%8C%E7%9B%B4%E5%88%B0%E5%BC%B9%E5%87%BA%E6%A0%88%E7%9A%84%E6%98%AF%E5%B7%A6%E6%8B%AC%E5%8F%B7%EF%BC%8C%E5%B7%A6%E6%8B%AC%E5%8F%B7%E4%B8%8D%E8%BE%93%E5%87%BA%E3%80%82">【java】中缀表达式转后缀表达式 java实现-阿里云开发者社区 (aliyun.com)</a></p>
</blockquote>
<blockquote>
<h2><span id="队列">队列</span></h2>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>队列的顺序存储结构</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqQueueClass</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MaxSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front, rear;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqQueueClass</span><span class="params">()</span> &#123;</span><br><span class="line">        data = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[MaxSize];</span><br><span class="line">        front = -<span class="number">1</span>;</span><br><span class="line">        rear = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断为空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进队，先将rear+1，然后再将元素e放在该位置（总是尾部插入）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rear = MaxSize - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;队满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rear++;</span><br><span class="line">        data[rear] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队，现将front+1，然后再将该位置的元素取出（出队的元素总是从队头出来的）</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;队空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">return</span> (E) data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取队头元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;队空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E) data[front + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>假溢出</p>
</blockquote>
<p>进队时rear增加，出队rear不变，front增加，当rear==MaxSize-1队满，这种队列中有空位置但是满足队满条件的上溢出称为<code>假溢出</code></p>
<blockquote>
<p>循环队列</p>
</blockquote>
<p>循环队列首尾相连，当队尾指针rear=MaxSize-1时再前进一个位置就到达0位置，这个可以用%（求余）来实现</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>队首指针循环进1：front = (front+1) % MaxSize;</p>
</li>
<li class="lvl-2">
<p>队尾指针循环进1：rear = (rear+1) % MaxSize;</p>
</li>
</ul>
<p>循环队列的队头指针和队尾指针的初始化位置都是0，即front = rear = 0</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>队空条件：rear = front</p>
</li>
<li class="lvl-2">
<p>队满的条件为（rear+1）% MaxSize == front,(相当于试探进队一次，若rear达到了front，则认为队满了)</p>
</li>
<li class="lvl-2">
<p>元素e进队时，rear = (rear+1) % MaxSize,将元素e放置在该位置</p>
</li>
<li class="lvl-2">
<p>元素出队时，front = (front+1) % MaxSize,取出该位置元素</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CSqQueueClass</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MaxSize</span> <span class="operator">=</span> <span class="number">100</span>;<span class="comment">//容量</span></span><br><span class="line">    <span class="keyword">private</span> E[] data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> front, rear;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CSqQueueClass</span><span class="params">()</span> &#123;</span><br><span class="line">        data = (E[]) <span class="keyword">new</span> <span class="title class_">Object</span>[MaxSize];</span><br><span class="line">        front = <span class="number">0</span>;</span><br><span class="line">        rear = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断队空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> rear == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//进队</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ((rear + <span class="number">1</span>) % MaxSize == front) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArguementException</span>(<span class="string">&quot;队满&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        rear = (rear + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        data[rear] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArguementException</span>(<span class="string">&quot;队空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        front = (front + <span class="number">1</span>) % MaxSize;</span><br><span class="line">        <span class="keyword">return</span> (E) data[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取队头元素</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (empty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArguementException</span>(<span class="string">&quot;队空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (E) data[(front + <span class="number">1</span>) % MaxSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>队列的链式存储结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结点泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span>&lt;E&gt; &#123;</span><br><span class="line">    E data;</span><br><span class="line">    LinkNode&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        data = e;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkQueueClass</span>&lt;E&gt; &#123;</span><br><span class="line">    LinkNode&lt;E&gt; front;</span><br><span class="line">    LinkNode&lt;E&gt; rear;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span> &#123;</span><br><span class="line">        front = <span class="literal">null</span>;</span><br><span class="line">        rear = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>链队队空条件为front = rear = null或者front==null</p>
</li>
<li class="lvl-2">
<p>只有内存溢出才会出现队满，通常不考虑</p>
</li>
<li class="lvl-2">
<p>元素e进队操作：在单链表的尾部插入存放e的s结点，并让队尾指针指向它</p>
</li>
<li class="lvl-2">
<p>元素出队操作：取出队首结点的data值，并将其从链队中删除</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本方法</span></span><br><span class="line"><span class="comment">//队空</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front==<span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//进队</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        LinkNode&lt;E&gt; s=<span class="keyword">new</span> <span class="title class_">LinkNode</span>&lt;&gt;(e);</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">        front=rear=s;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">pop</span><span class="params">()</span>&#123;</span><br><span class="line">        E e;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArguementException</span>(<span class="string">&quot;队空&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rear==front)&#123;</span><br><span class="line">        <span class="comment">//只有一个结点</span></span><br><span class="line">        e=(E)front.data;</span><br><span class="line">        front=rear=<span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//多个结点</span></span><br><span class="line">        e=(E)front.data;</span><br><span class="line">        front=front.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//取队头元素</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArguementException</span>(<span class="string">&quot;队空&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>(E)front.data;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2><span id="串">串</span></h2>
<blockquote>
<p>基本概念</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>串</code>是由零个或多个字符组成的有限序列，里面的单个字符称为串的元素，是构成串的基本单位，串中包含的字符数称为串的长度，当个数为0为<code>空串</code></p>
</li>
</ul>
<blockquote>
<p>串的存储结构</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>顺序存储结构–顺序串</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序串类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqStringClass</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MaxSize</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="type">char</span>[] data;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SqStringClass</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">char</span>[MaxSize];</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>串的链式存储结构–链串</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链串结点类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkNode</span> &#123;</span><br><span class="line">    <span class="type">char</span> data;</span><br><span class="line">    LinkNode next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">()</span> &#123;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkNode</span><span class="params">(<span class="type">char</span> ch)</span> &#123;</span><br><span class="line">        data = ch;</span><br><span class="line">        next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链串类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkStringClass</span> &#123;</span><br><span class="line">    LinkNode head;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LinkStringClass</span><span class="params">()</span> &#123;</span><br><span class="line">        head.next = <span class="literal">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//尾插法插入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Java 里面的字符串</p>
</blockquote>
<blockquote>
<p>串的模式匹配</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>Brute-Force算法（BF算法）（简单匹配算法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">BF</span><span class="params">(String s, String t)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>( i&lt;s.length() &amp;&amp; j&lt;t.length() )&#123;<span class="comment">//s,t都没遍历完时循环</span></span><br><span class="line">        <span class="keyword">if</span>(s.charAt(i) == t.charAt(j))&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i = i-j+<span class="number">1</span>;</span><br><span class="line">            j = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &gt;= t.length()) <span class="keyword">return</span> ( i-t.length );</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p><a href="https://juejin.cn/post/6854573206896918542">KMP算法</a></p>
</li>
<li class="lvl-2">
</li>
<li class="lvl-2">
<p>求模式串的next数组</p>
</li>
<li class="lvl-2">
</li>
<li class="lvl-2">
</li>
</ul>
<pre><code>  1. 对于序号0，规定next[0] = -1;
  
  2. 对于序号1，置next[1] = 0;
  
  3. 如果&#123;% _internal_math_placeholder 25 %&#125;有多个相同的前后缀，应该取最长的长度为其next[&#123;% _internal_math_placeholder 26 %&#125;]值；
</code></pre>
<h2><span id="递归">递归</span></h2>
<blockquote>
<p>条件</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>调用次数有限</p>
</li>
<li class="lvl-2">
<p>有终止条件</p>
</li>
<li class="lvl-2">
<p>把一个问题化成很多小问题解决，这些小问题和大问题求解方法一样，只是规模不同</p>
</li>
</ul>
<blockquote>
<p>递归模型</p>
</blockquote>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">f(s_1)=m_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>c</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(s_n)=g(f(s_{n-1}),c_{n-1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>
<p>在递归算法的执行中最长的递归调用的链长称为该算法的<code>递归调用深度</code></p>
<p>例如<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow><annotation encoding="application/x-tex">n!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span></span>的递归算法在求<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>u</mi><mi>n</mi><mo stretchy="false">(</mo><mn>5</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">fun(5)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord">5</span><span class="mclose">)</span></span></span></span>的递归调用深度为5</p>
<blockquote>
<p>递归算法时间复杂度</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>给出执行时间对应的递推式；</p>
</li>
<li class="lvl-3">
<p>求解递推式得出算法的执行时间<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>;</p>
</li>
<li class="lvl-3">
<p>最后由<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>得出时间复杂度。</p>
</li>
</ol>
<blockquote>
<p>递归算法的空间复杂度</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>根据递归深度得到（同时间复杂度求法，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>−</mo><mo>−</mo><mo>&gt;</mo><mi>S</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(n)--&gt;S(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>）</p>
</li>
</ul>
<h2><span id="数组和稀疏矩阵">数组和稀疏矩阵</span></h2>
<blockquote>
<p>一维数组</p>
</blockquote>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>0</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo>∗</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">LOC(a_i)=LOC(a_0)+i*k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>
<blockquote>
<p>d维数组</p>
</blockquote>
<p>对于数组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo stretchy="false">[</mo><mi>m</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>n</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">a[m][n]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">[</span><span class="mord mathnormal">m</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal">n</span><span class="mclose">]</span></span></span></span>，假设每个元素占<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>个存储单元，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">LOC(a_{0,0})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub></mrow><annotation encoding="application/x-tex">a_{0,0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>元素的存储地址</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>行优先</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>i</mi><mo>∗</mo><mi>n</mi><mo>+</mo><mi>j</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">LOC(a_{i,j})=LOC(a_{0,0})+(i*n+j)*k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>
</li>
<li class="lvl-2">
<p>列优先</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo><mo>=</mo><mi>L</mi><mi>O</mi><mi>C</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mrow><mn>0</mn><mo separator="true">,</mo><mn>0</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><mo stretchy="false">(</mo><mi>j</mi><mo>∗</mo><mi>m</mi><mo>+</mo><mi>i</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>k</mi></mrow><annotation encoding="application/x-tex">LOC(a_{i,j})=LOC(a_{0,0})+(j*m+i)*k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.07153em;">OC</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span><span class="mpunct mtight">,</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span>
</li>
</ul>
<blockquote>
<p>稀疏数组</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>利用一个三元组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo separator="true">,</mo><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i,j,a_{i,j})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0361em;vertical-align:-0.2861em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>来表示，三元组每个元素的类定义如下：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TupElem</span> &#123;</span><br><span class="line">    <span class="type">int</span> r;<span class="comment">//行号</span></span><br><span class="line">    <span class="type">int</span> c;<span class="comment">//列号</span></span><br><span class="line">    <span class="type">int</span> d;<span class="comment">//元素值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TupElem</span><span class="params">(<span class="type">int</span> r1, <span class="type">int</span> c1, <span class="type">int</span> d1)</span> &#123;</span><br><span class="line">        r = r1;</span><br><span class="line">        c = c1;</span><br><span class="line">        d = d1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>稀疏矩阵三元组类定义</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TupClass</span> &#123;</span><br><span class="line">    <span class="type">int</span> rows;<span class="comment">//行数</span></span><br><span class="line">    <span class="type">int</span> cols;<span class="comment">//列数</span></span><br><span class="line">    <span class="type">int</span> nums;<span class="comment">//非0元素个数</span></span><br><span class="line">    ArrayList&lt;TupElem&gt; data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TupClass</span><span class="params">()</span> &#123;</span><br><span class="line">        data = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;TupElem&gt;();</span><br><span class="line">        nums = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>特殊矩阵的压缩存储</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>对称矩阵的压缩存储</p>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">
<p>可以使对称元素共享同一存储空间，可以将<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>个元素压缩存储到<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">n(n+1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span> 个元素的空间中。按照行优先存储时仅仅存储其下三角和主对角线部分的元素。</p>
</li>
<li class="lvl-4">
<ul class="lvl-4">
<li class="lvl-6">A中任一元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>a</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mrow><annotation encoding="application/x-tex">a_{i,j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span>和B中的元素<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>b</mi><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">b_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>之间的关系如下：</li>
</ul>
</li>
</ul>
</li>
</ul>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>k</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>i</mi><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>j</mi><mtext>       </mtext><mi>i</mi><mo>&gt;</mo><mo>=</mo><mi>j</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mfrac><mrow><mi>j</mi><mo stretchy="false">(</mo><mi>j</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac><mo>+</mo><mi>i</mi><mtext>       </mtext><mi>i</mi><mo>&lt;</mo><mi>j</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
k=\left\{
            \begin{matrix}
                {i(i+1) \over 2}+j~~~~~~~i&gt;=j \\
                \\
                \\
                {j(j+1) \over 2}+i~~~~~~~i&lt;j
                \end{matrix}
                \right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:5.14em;vertical-align:-2.32em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.65em;"><span style="top:-1.9em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.892em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.616em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.616em" style="width:0.8889em" viewbox="0 0 888.89 616" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V616 H384z M384 0 H504 V616 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.616em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.616em" style="width:0.8889em" viewbox="0 0 888.89 616" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V616 H384z M384 0 H504 V616 H384z"/></svg></span></span><span style="top:-4.9em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.82em;"><span style="top:-4.82em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-3.62em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"></span></span><span style="top:-2.42em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"></span></span><span style="top:-1.05em;"><span class="pstrut" style="height:3.01em;"></span><span class="mord"><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">i</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.32em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
<h2><span id="树和二叉树">树和二叉树</span></h2>
<blockquote>
<p>树的基本术语</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>结点的度</code>：树中某个结点的子树的个数</p>
</li>
<li class="lvl-2">
<p><code>树的度</code>：树中各结点的度的最大值（通常将度为m的树称为m次树）</p>
</li>
<li class="lvl-2">
<p><code>分支结点</code>：度不为0的结点</p>
</li>
<li class="lvl-2">
<p><code>叶子结点</code>：度为0 的结点</p>
</li>
<li class="lvl-2">
<p><code>双亲结点</code>、<code>孩子结点</code></p>
</li>
<li class="lvl-2">
<p><code>树的高度（深度）</code>：根节点为第一层，树的最大层级称为树的高度</p>
</li>
</ul>
<blockquote>
<p>树的性质</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>树中的结点数 <code>等于</code> 所有结点的度之和加一</p>
</li>
<li class="lvl-2">
<p>度为m的树的第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 层上最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>m</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">m^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span> 个结点</p>
</li>
<li class="lvl-2">
<p>高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span> 的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 次树最多有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mo stretchy="false">(</mo><msup><mi>m</mi><mi>h</mi></msup><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mrow><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">{(m^h-1) \over (m-1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.6539em;vertical-align:-0.52em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1339em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">m</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.927em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>个结点</p>
</li>
<li class="lvl-2">
<p>具有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 个结点的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span> 次树的最小高度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">(</mo><mi>m</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[log_m(n(m-1)+1)]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)]</span></span></span></span></p>
</li>
</ul>
<blockquote>
<p>在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span></span></span></span>次树中计算结点时常用的关系式有：</p>
</blockquote>
<ol>
<li class="lvl-3">
<p>树中所有结点的度之和 = 分支数 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></p>
</li>
<li class="lvl-3">
<p>所有结点的度之和 = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mn>2</mn><msub><mi>n</mi><mn>2</mn></msub><mo>+</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>+</mo><mi>m</mi><mo>∗</mo><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n_1 + 2n_2 + ··· + m*n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">+</span><span class="mpunct">⋅⋅⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></p>
</li>
<li class="lvl-3">
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><msub><mi>n</mi><mn>0</mn></msub><mo>+</mo><msub><mi>n</mi><mn>1</mn></msub><mo>+</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo separator="true">⋅</mo><mo>+</mo><msub><mi>n</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">n = n_0 + n_1 +···+ n_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">+</span><span class="mpunct">⋅⋅⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">+</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>
</li>
</ol>
<blockquote>
<p>树的存储结构</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>双亲存储结构</p>
</li>
</ul>
<p>为一种顺序存储结构，双亲存储结构结点类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PTree</span>&lt;E&gt; &#123;</span><br><span class="line">    E data;<span class="comment">//存放结点的值</span></span><br><span class="line">    <span class="type">int</span> parent;<span class="comment">//存放双亲结点的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>孩子链存储结构</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TSonNode</span>&lt;E&gt; &#123;</span><br><span class="line">    E data;<span class="comment">//结点的值</span></span><br><span class="line">    TSonNode&lt;E&gt;[] sons;<span class="comment">//指向孩子结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>二叉树（二分树）</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>二叉树的5中基本形态</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>空二叉树</p>
</li>
<li class="lvl-6">
<p>单结点二叉树</p>
</li>
<li class="lvl-6">
<p>右子树为空的二叉树</p>
</li>
<li class="lvl-6">
<p>左子树为空的二叉树</p>
</li>
<li class="lvl-6">
<p>左右子树都不为空的二叉树<br>
<img src="https://pdai.tech/_images/alg/alg-tree-3.png" alt="二叉树的5种状态" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
</li>
</ul>
</li>
<li class="lvl-2">
<p><code>满二叉树</code>的特点</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>叶子结点都在最下一层；</p>
</li>
<li class="lvl-6">
<p>只有度为0和度为2 的结点；</p>
</li>
<li class="lvl-6">
<p>含<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个结点的满二叉树的高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_2(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，叶子结点个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(n/2)+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，度为2的结点个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(n/2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/2</span><span class="mclose">)</span></span></span></span>。</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p><code>完全二叉树</code>的特点：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>叶子结点只可能出现在最下面两层；</p>
</li>
<li class="lvl-6">
<p>最下一层的叶子结点都依次排列在改层最左边的位置上；</p>
</li>
<li class="lvl-6">
<p>如果有度为 1 的结点，只可能有一个，且该结点最多只有左孩子而无右孩子；</p>
</li>
<li class="lvl-6">
<p>按照层序编号后，一旦出现某结点（编号为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>）为叶子结点或只有左孩子，则编号大于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 的结点均为叶子结点。</p>
</li>
</ul>
</li>
<li class="lvl-2">
<p><code>完全二叉树</code>的计算：</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>结点数为<code>偶</code>——&gt;只有一个分支</p>
</li>
<li class="lvl-6">
<p>结点数为<code>奇</code>——&gt;无单分支</p>
</li>
<li class="lvl-6">
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">(n-1)/2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/2</span></span></span></span>个双分支
</li>
</ul>
</li>
<li class="lvl-2">
<p>二叉树的<code>性质</code>:</p>
<ul class="lvl-2">
<li class="lvl-6">
<p>非空二叉树上叶子结点数等于双分支结点数加一；</p>
</li>
<li class="lvl-6">
<p>非空二叉树的第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>层上最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{i-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8247em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8247em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>个结点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo>&gt;</mo><mo>=</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i&gt;=1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>;</p>
</li>
<li class="lvl-6">
<p>高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>的二叉树最多有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>h</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^h-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9324em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">h</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个结点；</p>
</li>
<li class="lvl-6">
<p>具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个结点的完全二叉树的高度为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log_2(n+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">log_2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>。</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>二叉树的存储结构</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>二叉树的顺序存储结构</p>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">完全二叉树和满二叉树采用顺序存储结构比较合适，既能最大限度<code>节省存储空间</code>，又能利用下标迅速<code>确定二叉树中位置和结点之间的关系</code></li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">编号为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex"> i </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 的结点的层次为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌊</mo><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">\lfloor log_2(i+1) \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)⌋</span></span></span></span></li>
</ul>
</li>
<li class="lvl-2">
<p>二叉树的链式存储结构(二叉链)</p>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">
<p>二叉链结点类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTNode</span>&lt;E&gt;&#123;</span><br><span class="line">E data;</span><br><span class="line">BTNode lchild;<span class="comment">//指向左结点</span></span><br><span class="line">BTNode rchild;<span class="comment">//指向右结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BTNode</span><span class="params">()</span>&#123;</span><br><span class="line">    lchild=rchild=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BTNode</span><span class="params">(E e)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.data = e;</span><br><span class="line">    lchild=rchild=<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>二叉树的基本运算</p>
</blockquote>
</li>
</ul>
</li>
<li class="lvl-2">
<p>二叉树的类设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTreeClass</span>&#123;</span><br><span class="line">  BTNode&lt;Character&gt; b;<span class="comment">//根结点</span></span><br><span class="line">  String bstr;<span class="comment">//根结点字符串表达式</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">BTreeClass</span><span class="params">()</span>&#123;</span><br><span class="line">      b = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>二叉树的基本运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建二叉树</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">CreateBTree</span><span class="params">(String str)</span></span><br><span class="line"><span class="comment">//返回二叉树括号表示字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line"><span class="comment">//查找值为x的结点(递归查找)</span></span><br><span class="line">FindNode(x)</span><br><span class="line"><span class="comment">//求高度h(递归)</span></span><br><span class="line">Height()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>二叉树的遍历</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>先序遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先序遍历的递归算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PreOrder1</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">  PreOrder11(bt.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PreOrder11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">      System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">      PreOrder11(t.lchild);<span class="comment">//先序遍历左子树</span></span><br><span class="line">      PreOrder11(t.rchild);<span class="comment">//先序遍历右子树</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序遍历的递归算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InOrder1</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">  InOrder11(bt.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">InOrder11</span><span class="params">(BTNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">      InOrder11(t.lchild);<span class="comment">//中序遍历左子树</span></span><br><span class="line">      System.out.print(t.data + <span class="string">&quot; &quot;</span>);<span class="comment">//访问根结点</span></span><br><span class="line">      InOrder11(t.rchild);<span class="comment">//中序遍历右子树</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//后序遍历的递归算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PostOrder1</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">  PostOrder11(bt.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PostOrder11</span><span class="params">(BtNode&lt;Character&gt; t)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(t!=<span class="literal">null</span>)&#123;</span><br><span class="line">      PostOrder11(t.lchild);<span class="comment">//后序遍历左子树</span></span><br><span class="line">      PostOrder11(t.rchild);<span class="comment">//后序遍历右子树</span></span><br><span class="line">      System.out.print(t.data + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>二叉树的层次遍历</p>
</blockquote>
</li>
<li class="lvl-2">
<p>层次遍历基本步骤</p>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">访问根结点（第一层）</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">从左到右访问第二层的所有结点</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">从左到右访问第三层的所有结点，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.1056em;"></span><span class="mord">...</span></span></span></span>，第<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex"> h </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">h</span></span></span></span>层的所有结点</li>
</ul>
</li>
<li class="lvl-2">
<p>层次遍历算法设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">LevelOrder</span><span class="params">(BTreeClass bt)</span>&#123;</span><br><span class="line">  BTNode&lt;Character&gt; p;</span><br><span class="line">  Queue&lt;BTNode&gt; qu = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;BTNode&gt;();</span><br><span class="line">  qu.offer(bt.b);<span class="comment">//根结点进队</span></span><br><span class="line">  <span class="keyword">while</span>(!qu.isEmpty())&#123;<span class="comment">//队列不为空时循环</span></span><br><span class="line">       P = qu.poll();<span class="comment">//出队第一个结点</span></span><br><span class="line">       System.out.print(p.data + <span class="string">&quot; &quot;</span>);<span class="comment">//输出</span></span><br><span class="line">       <span class="keyword">if</span>(p.lchild!=<span class="literal">null</span>)&#123;<span class="comment">//有左孩子，进队</span></span><br><span class="line">          qu.offer(p.lchild);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(p.rchild!=<span class="literal">null</span>)&#123;<span class="comment">//有右孩子，进队</span></span><br><span class="line">          qu.offer(p.rchild);</span><br><span class="line">       &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于二叉树构造的一些结论</p>
</blockquote>
</li>
<li class="lvl-2">
<p>任何<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> n(n&gt;=0) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>个不同结点的二叉树都可以由它的中序序列和先序序列唯一地确定</p>
</li>
<li class="lvl-2">
<p>任何<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>&gt;</mo><mo>=</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> n(n&gt;=0) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>个不同结点的二叉树都可以由它的中序序列和后序序列唯一地确定</p>
</li>
</ul>
<blockquote>
<p>线索二叉树</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>定义对于n个结点的二叉树，在二叉链存储结构中有n+1个空链域，利用这些空链域存放在<code>某种遍历次序</code>下该结点的<code>前驱结点</code>和<code>后继结点</code>的<code>指针</code>，这些指针称为线索，加上<code>线索</code>的二叉树称为<code>线索二叉树</code>。</p>
</li>
<li class="lvl-2">
<p>区分“前驱结点”和“孩子结点”<br>
<code>标识</code></p>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>左标识</mtext><mi>l</mi><mi>t</mi><mi>a</mi><mi>g</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext>    表示</mtext><mi>l</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mtext>指向左孩子结点</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext>    表示</mtext><mi>l</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mtext>指向前驱结点的线索</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
  左标识ltag=\left\{
  \begin{matrix}
  0~~~~表示lchild指向左孩子结点\\\\
  1~~~~表示lchild指向前驱结点的线索
  \end{matrix}
  \right.
  </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">左标识</span><span class="mord mathnormal">lt</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">表示</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">c</span><span class="mord mathnormal">hi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">指向左孩子结点</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">表示</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">c</span><span class="mord mathnormal">hi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">指向前驱结点的线索</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
</li>
</ul>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>右标识</mtext><mi>l</mi><mi>t</mi><mi>a</mi><mi>g</mi><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext>    表示</mtext><mi>r</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mtext>指向右孩子结点</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext>    表示</mtext><mi>r</mi><mi>c</mi><mi>h</mi><mi>i</mi><mi>l</mi><mi>d</mi><mtext>指向后继结点的线索</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
右标识ltag=\left\{
\begin{matrix}
0~~~~表示rchild指向右孩子结点\\\\
1~~~~表示rchild指向后继结点的线索
\end{matrix}
\right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">右标识</span><span class="mord mathnormal">lt</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">表示</span><span class="mord mathnormal">rc</span><span class="mord mathnormal">hi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">指向右孩子结点</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">表示</span><span class="mord mathnormal">rc</span><span class="mord mathnormal">hi</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">指向后继结点的线索</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
<p>每个这样的结点存储结构如下：</p>
<table>
<thead>
<tr>
<th>ltag</th>
<th>lchild</th>
<th>data</th>
<th>rchild</th>
<th>rtag</th>
</tr>
</thead>
</table>
<blockquote>
<p>线索化二叉树（建立线索二叉树）（以下以中序遍历为主）</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>二叉链结点类</p>
</li>
<li class="lvl-2">
<p>左孩子为空</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>^</th>
<th>data</th>
<th>rchild</th>
</tr>
</thead>
</table>
<p>左指针指向中序遍历的<code>直接前驱</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>右孩子为空</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>lchild</th>
<th>data</th>
<th>^</th>
</tr>
</thead>
</table>
<p>右指针指向中序遍历的<code>直接后继</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThNode</span>&#123;</span><br><span class="line">    <span class="type">char</span> data;<span class="comment">//数据</span></span><br><span class="line">    ThNode lchild, rchild;</span><br><span class="line">    <span class="type">int</span> ltag, rtag;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThNode</span><span class="params">()</span>&#123;</span><br><span class="line">        lchild = rchild = <span class="literal">null</span>;</span><br><span class="line">        ltag = rtag = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>中序线索化二叉树类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadClass</span>&#123;</span><br><span class="line">    ThNode b;<span class="comment">//二叉树根结点</span></span><br><span class="line">    ThNode root;<span class="comment">//线索二叉树的头结点</span></span><br><span class="line">    ThNode pre;<span class="comment">//用于中序线索化，指向中序前驱结点</span></span><br><span class="line">    String bstr;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadClass</span><span class="params">()</span>&#123;</span><br><span class="line">        root = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//基本运算</span></span><br><span class="line">    <span class="comment">//建立以root为头结点的中序线索二叉树</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createThread</span><span class="params">()</span>&#123;……&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对以P为根结点的二叉树进行中序线索化</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Thread</span><span class="params">(ThNode p)</span>&#123;……&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="%22https://zhuanlan.zhihu.com/p/134184036%22">遍历线索二叉树</a>  &lt;—click here to learn</p>
</blockquote>
<blockquote>
<p>哈夫曼树（最优二叉树）（P272）</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>权值越大，离根结点越近</p>
</li>
<li class="lvl-2">
<p>权值越小，离根结点越远</p>
</li>
<li class="lvl-2">
<p>具有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>n</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">n_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>个叶子结点的哈夫曼树共有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><msub><mi>n</mi><mn>0</mn></msub><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n_0-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7944em;vertical-align:-0.15em;"></span><span class="mord">2</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>个结点</p>
</li>
</ul>
<blockquote>
<p>哈夫曼编码</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>在一组字符的哈夫曼编码中，任一字符的哈夫曼编码<code>不可能</code>是另一字符的哈夫曼编码的前缀。</p>
</li>
</ul>
<blockquote>
<p>二叉树与树、森林之间的转换</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>树到二叉树的转换步骤</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">加线：在各兄弟结点之间加一连线</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">抹线：对于任意结点，除了其<code>最左子树</code>之外，抹掉该结点与其他子树之间的<code>双亲-孩子</code>关系</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">调整：（排列整齐）</li>
</ul>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<p>一棵由树转换的二叉树与还原为树</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">加线：在<code>各结点的双亲</code>与<code>该结点右链</code>上的每个结点之间加一条连线</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">抹线：抹掉二叉树中所有双亲结点与其右孩子之间的<code>双亲-右孩子</code>关系</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">调整：（排列整齐）</li>
</ul>
</li>
</ul>
<blockquote>
<p>森林到二叉树的转换及还原</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>森林转换为二叉树</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">转换：将森林中每一棵树转换为二叉树</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">连接：将转换后的二叉树根结点相连</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">调整：（排列整齐）</li>
</ul>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<p>二叉树还原为森林</p>
</li>
</ul>
<ul class="lvl-0">
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">抹线：抹掉根结点右链上所有<code>双亲-右孩子</code>关系</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">转换：分别将抹线后的二叉树还原为树</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">调整：（排列整齐）</li>
</ul>
</li>
</ul>
<h2><span id="图">图</span></h2>
<blockquote>
<p>基本概念</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>由两个集合<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mtext>和</mtext><mi>E</mi></mrow><annotation encoding="application/x-tex">V和E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>组成，记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">G=(V,E)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi></mrow><annotation encoding="application/x-tex">V</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span></span></span></span>是顶点的有限集合,记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>V</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">V(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span>,</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi></mrow><annotation encoding="application/x-tex">E</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span></span></span></span>是连接两个不同顶点的边的有限集合，记为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E(G)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span></span>。
<p>+无向图：在图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>中，如果代表边的顶点对（或序偶）是无序的，则成<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi></mrow><annotation encoding="application/x-tex">G</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span></span></span></span>为无向图，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo>−</mo><mo>&gt;</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">--&gt;(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></p>
</li>
<li class="lvl-2">
<p>有向图：顶点对有序<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>−</mo><mo>−</mo><mo>&gt;</mo><mo>&lt;</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo>&gt;</mo><mtext>和</mtext><mo>&lt;</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>&gt;</mo></mrow><annotation encoding="application/x-tex">--&gt;&lt;a,b&gt;和&lt;b,a&gt;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7224em;vertical-align:-0.0391em;"></span><span class="mord cjk_fallback">和</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span></span></span></span>不一样</p>
</li>
</ul>
<blockquote>
<p>基本术语</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>端点和邻接点</p>
<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mo>−</mo><mo>&gt;</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mtext>互为邻接点</mtext><mo separator="true">,</mo><mi>a</mi><mtext>、</mtext><mi>b</mi><mtext>顶点称为该边的两个端点</mtext></mrow><annotation encoding="application/x-tex">(a,b)--&gt;a,b互为邻接点,a、b顶点称为该边的两个端点</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">互为邻接点</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mord cjk_fallback">、</span><span class="mord mathnormal">b</span><span class="mord cjk_fallback">顶点称为该边的两个端点</span></span></span></span>
</li>
<li class="lvl-2">
<p>顶点的度、入度、出度</p>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4"><code>顶点的度</code>：顶点所关联的边的数目</li>
</ul>
</li>
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4"><code>入度、出度</code>：以该顶点为终点的边的数目，反之，以该端点为起点的边的数目为出度若一个图中有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>个顶点和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi></mrow><annotation encoding="application/x-tex">e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span>条边，每个顶点的度为  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>0</mn><mo>&lt;</mo><mo>=</mo><mi>i</mi><mo>&lt;</mo><mo>=</mo><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> d_i(0&lt;=i&lt;=(n-1))</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6986em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span></span>,则有：</li>
</ul>
</li>
</ul>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>e</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></munderover><msub><mi>d</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">
e = \frac{1}{2}\sum_{i=0}^{n-1}d_i
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.0788em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8011em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">d</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span>
<p>相当于一个图中<code>顶点的度之和</code>等于<code>边数</code>的<code>两倍</code></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>完全图<code>有向图</code>每两个顶点之间都存在着<code>方向相反</code>的<code>两条边</code></p>
</li>
</ul>
<pre class="mermaid">graph TD;
0-->1
1-->0
1-->2
2-->1
2-->3
3-->2
3-->0
0-->3
3-->1
1-->3
0-->2
2-->0</pre>
<p><code>无向图</code>每两个端点之间都存在<code>一条边</code></p>
<pre class="mermaid">graph LR;
0---1
1---2
2---3
3---0
3---1
2---0</pre>
<ul class="lvl-0">
<li class="lvl-2">
<p>稠密图和稀疏图</p>
<ul class="lvl-2">
<li class="lvl-6">当一个图接近万全图时称为稠密图</li>
<li class="lvl-6">当一个图边数较少[有向图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>&lt;</mo><mo>&lt;</mo><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>无向图</mtext><mi>e</mi><mo>&lt;</mo><mo>&lt;</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">e&lt;&lt;n(n-1),无向图e&lt;&lt;\frac{n(n-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">无向图</span><span class="mord mathnormal">e</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>]称为稀疏图</li>
</ul>
</li>
<li class="lvl-2">
<p>子图</p>
<ul class="lvl-2">
<li class="lvl-6">两个图<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy="false">(</mo><mi>V</mi><mo separator="true">,</mo><mi>E</mi><mo stretchy="false">)</mo><mtext>和</mtext><msup><mi>G</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mo stretchy="false">(</mo><msup><mi>V</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>E</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mtext>若</mtext><msup><mi>V</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext>是</mtext><mi>V</mi><mtext>的子集，且</mtext><msup><mi>E</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext>是</mtext><mi>E</mi><mtext>的子集，则</mtext><msup><mi>G</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mtext>是</mtext><mi>G</mi><mtext>的子图</mtext></mrow><annotation encoding="application/x-tex">G=(V,E)和G&#x27;=(V&#x27;,E&#x27;),若V&#x27;是V的子集，且E&#x27;是E的子集，则G&#x27;是G的子图</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">G</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mord cjk_fallback">和</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0019em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">若</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">是</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord cjk_fallback">的子集，且</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">是</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord cjk_fallback">的子集，则</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7519em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord cjk_fallback">是</span><span class="mord mathnormal">G</span><span class="mord cjk_fallback">的子图</span></span></span></span></li>
</ul>
</li>
<li class="lvl-2">
<p>路径和路径长度</p>
<ul class="lvl-2">
<li class="lvl-6">从<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>顶点</mtext><mi>i</mi><mtext>到顶点</mtext><mi>j</mi></mrow><annotation encoding="application/x-tex">顶点i到顶点j</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">顶点</span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">到顶点</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span></span>的一条<code>路径</code>是一个顶点序列<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><msub><mi>i</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>i</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>i</mi><mi>m</mi></msub><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(i,i_1,i_2,...,i_m,j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">...</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">i</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span></span></span></span></li>
<li class="lvl-6"><code>路径长度</code>是指一条路径上经过的边的数目</li>
<li class="lvl-6"><code>简单路径</code>是指一条路径上除开始点和结束点可以相同外，其余端点均不相同</li>
</ul>
</li>
<li class="lvl-2">
<p>回路和环</p>
<ul class="lvl-2">
<li class="lvl-6">一条路径开始点和结束点相同，该路径被称为<code>回路</code>或<code>环</code></li>
</ul>
</li>
<li class="lvl-2">
<p>连通、连通图、连通分量</p>
<ul class="lvl-2">
<li class="lvl-6">图的任意两个端点都是连通的图称为<code>连通图</code>，否则为<code>非连通图</code></li>
<li class="lvl-6">无向图G的<code>极大连通子图</code>称为G的<code>连通分量</code></li>
</ul>
</li>
<li class="lvl-2">
<p>强连通图和强连通分量</p>
<ul class="lvl-2">
<li class="lvl-6">强连通图：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>从顶点</mtext><mi>i</mi><mtext>到</mtext><mi>j</mi><mtext>和</mtext><mi>j</mi><mtext>到</mtext><mi>i</mi><mtext>都有路径</mtext></mrow><annotation encoding="application/x-tex">从顶点i到j和j到i都有路径</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">从顶点</span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback">到</span><span class="mord mathnormal">i</span><span class="mord cjk_fallback">都有路径</span></span></span></span></li>
<li class="lvl-6">强连通分量：有向图的极大强连通子图称为该图的强连通分量</li>
</ul>
</li>
<li class="lvl-2">
<p>关结点和重连通图</p>
</li>
<li class="lvl-2">
<p>权和网</p>
<ul class="lvl-2">
<li class="lvl-6">边上带有权的图称为带权图，也称作网</li>
</ul>
</li>
</ul>
<blockquote>
<p>图的存储结构</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>邻接矩阵</p>
<ul class="lvl-2">
<li class="lvl-6">存储方法</li>
<li class="lvl-6">
<ul class="lvl-4">
<li class="lvl-8">G不带权</li>
</ul>
</li>
</ul>
</li>
</ul>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn><mtext>    ，</mtext><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo><mtext>或者</mtext><mo>&lt;</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>&gt;</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext>    ，其他</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
A[i][j]=\left\{
\begin{matrix}
1~~~~，(i,j) \in E(G)或者&lt;i,j&gt; \in E(G)\\
0~~~~，其他
\end{matrix}
\right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">{</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">，</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span><span class="mord cjk_fallback">或者</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">，其他</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
<ul class="lvl-0">
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">
<ul class="lvl-4">
<li class="lvl-6">G带权</li>
</ul>
</li>
</ul>
</li>
</ul>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mi>j</mi><mo stretchy="false">]</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>w</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub><mtext>    ，</mtext><mi>i</mi><mo mathvariant="normal">≠</mo><mi>j</mi><mtext>并且</mtext><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo><mtext>或者</mtext><mo>&lt;</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo>&gt;</mo><mo>∈</mo><mi>E</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>0</mn><mtext>    ，</mtext><mi>i</mi><mo>=</mo><mi>j</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">∞</mi><mtext>    </mtext><mo separator="true">,</mo><mtext>其他</mtext></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">
A[i][j]=\left\{
\begin{matrix}
w_{ij}~~~~，i \neq j 并且(i,j) \in E(G) 或者 &lt;i,j&gt; \in E(G) \\
0~~~~，i = j \\
\infty~~~~,其他
\end{matrix}
\right.
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">A</span><span class="mopen">[</span><span class="mord mathnormal">i</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.6em;vertical-align:-1.55em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-2.5em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.492em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.292em;"><span class="pstrut" style="height:3.15em;"></span><span style="height:0.016em;width:0.8889em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.8889em" height="0.016em" style="width:0.8889em" viewbox="0 0 888.89 16" preserveaspectratio="xMinYMin"><path d="M384 0 H504 V16 H384z M384 0 H504 V16 H384z"/></svg></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0269em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">ij</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mord cjk_fallback">并且</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span><span class="mord cjk_fallback">或者</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">G</span><span class="mclose">)</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mord cjk_fallback">，</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mspace nobreak"> </span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">其他</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span>
<ul class="lvl-0">
<li class="lvl-2">
<ul class="lvl-2">
<li class="lvl-4">
<ul class="lvl-4">
<li class="lvl-6">三个邻接矩阵</li>
</ul>
</li>
</ul>
</li>
</ul>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">
A_1=\begin{bmatrix}
      0&amp;1&amp;0&amp;1&amp;1\\
      1&amp;0&amp;1&amp;1&amp;0\\
      0&amp;1&amp;0&amp;1&amp;1\\
      1&amp;1&amp;1&amp;0&amp;1\\
      1&amp;0&amp;1&amp;1&amp;0\\
      \end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:6.0001em;vertical-align:-2.75em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-2.311em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.458em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="2.416em" style="width:0.6667em" viewbox="0 0 666.67 2416" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V2416 H319z M319 0 H403 V2416 H319z"/></svg></span></span><span style="top:-6.5111em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-2.311em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.458em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="2.416em" style="width:0.6667em" viewbox="0 0 666.67 2416" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V2416 H263z M263 0 H347 V2416 H263z"/></svg></span></span><span style="top:-6.5111em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A_2=\begin{bmatrix}
0&amp;1&amp;0&amp;1&amp;0\\
0&amp;0&amp;1&amp;1&amp;0\\
0&amp;0&amp;0&amp;1&amp;1\\
0&amp;0&amp;0&amp;0&amp;0\\
1&amp;0&amp;0&amp;1&amp;0\\
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:6.0001em;vertical-align:-2.75em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-2.311em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.458em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="2.416em" style="width:0.6667em" viewbox="0 0 666.67 2416" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V2416 H319z M319 0 H403 V2416 H319z"/></svg></span></span><span style="top:-6.5111em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-2.311em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.458em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="2.416em" style="width:0.6667em" viewbox="0 0 666.67 2416" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V2416 H263z M263 0 H347 V2416 H263z"/></svg></span></span><span style="top:-6.5111em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span>
<span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>A</mi><mn>3</mn></msub><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.16em" columnalign="center center center center center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">∞</mi></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">A_3=\begin{bmatrix}
0&amp;8&amp;\infty&amp;5&amp;\infty\\
\infty&amp;0&amp;3&amp;\infty&amp;\infty\\
\infty&amp;\infty&amp;0&amp;\infty&amp;6\\
\infty&amp;\infty&amp;9&amp;0&amp;\infty\\
\infty&amp;\infty&amp;\infty&amp;\infty&amp;0\\
\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:6.0001em;vertical-align:-2.75em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-2.311em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-3.458em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="2.416em" style="width:0.6667em" viewbox="0 0 666.67 2416" preserveaspectratio="xMinYMin"><path d="M319 0 H403 V2416 H319z M319 0 H403 V2416 H319z"/></svg></span></span><span style="top:-6.5111em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-3.01em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.81em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∞</span></span></span><span style="top:-0.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-2.311em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-3.458em;"><span class="pstrut" style="height:4.416em;"></span><span style="height:2.416em;width:0.6667em;"><svg xmlns="http://www.w3.org/2000/svg" width="0.6667em" height="2.416em" style="width:0.6667em" viewbox="0 0 666.67 2416" preserveaspectratio="xMinYMin"><path d="M263 0 H347 V2416 H263z M263 0 H347 V2416 H263z"/></svg></span></span><span style="top:-6.5111em;"><span class="pstrut" style="height:4.416em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75em;"><span></span></span></span></span></span></span></span></span></span></span></span>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java五大机制</title>
    <url>/2023/04/14/Java%E4%BA%94%E5%A4%A7%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1><span id="泛型机制">泛型机制</span></h1>
<h2><span id="为什么会有泛型">为什么会有泛型</span></h2>
<p>​		为了实现参数化类型的控制，引入了泛型。泛型能够使得不同的类型在执行相同的代码时得到重复利用（代码复用）。泛型可以用在类、接口和方法中，分别称为泛型类、泛型接口和泛型方法。通过一个例子来解释，以多个加法方法为例，如果没有泛型，我们需要为每种类型都写一个加法方法。但是，通过泛型，我们可以使用一个加法方法实现多种数据类型的加法。</p>
<p>下面是一个使用泛型的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt; <span class="type">double</span> <span class="title function_">add</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line">		System.out.println(a + “+” + b + “=” + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">		<span class="keyword">return</span> a.doubleValue() + b.doubleValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在这个示例中，泛型的类型在实际使用时进行指定，从而避免了需要进行强制类型转换的问题，同时由于编译期进行类型检查，也可以保证程序的类型安全。</p>
<p>​		以一个List集合为例，如果不使用泛型，其中的元素类型不受约束，需要开发者手动进行类型转换，从而容易引发ClassCastException异常。但是，使用泛型后，集合中仅允许存储指定类型的元素，可以在编译前自动检查类型，确保类型安全：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>list中只能放String, 不能放其它类型的元素</p>
</blockquote>
<h2><span id="泛型基本使用">泛型基本使用</span></h2>
<p>当你编写一些通用代码时，你可能想要编写可以适用于多种不同类型的数据的函数或类。泛型是一种编程技术，它允许你编写这样的代码。</p>
<p>在大多数编程语言中，泛型使用尖括号来指定类型参数。例如，在Java中，你可以编写一个泛型类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyGenericClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T myField;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getMyField</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> myField;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyField</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        myField = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>&lt;T&gt;</code>表示这是一个泛型类，<code>T</code>是类型参数的名称。这个类有一个<code>myField</code>属性，类型为<code>T</code>，并且有一个可以设置和获取这个属性的方法。</p>
<p>你可以创建一个<code>MyGenericClass</code>对象，并指定类型参数的实际类型，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyGenericClass&lt;String&gt; myString = <span class="keyword">new</span> <span class="title class_">MyGenericClass</span>&lt;String&gt;();</span><br><span class="line">myString.setMyField(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> myString.getMyField(); <span class="comment">// value is &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>&lt;String&gt;</code>指定了<code>MyGenericClass</code>的类型参数为<code>String</code>，因此你可以在<code>myField</code>中存储字符串，并使用<code>getMyField</code>方法来获取它。</p>
<p>泛型主要有泛型类、泛型方法、泛型接口、泛型数组几种最为常见的用法</p>
<h3><span id="泛型类">泛型类</span></h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>简单的泛型</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T contents;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContents</span><span class="params">(T contents)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contents = contents;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getContents</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> contents;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例中，我们定义了一个Box类，它只包含一个泛型类型T。Box类有两个方法：setContents和getContents，它们分别用于设置和获取Box对象的内容。这个内容的类型为T，也就是泛型类型参数。</p>
<p>使用Box类时，可以指定泛型类型参数的具体类型。例如，下面的代码创建了两个Box对象，它们的泛型类型分别为String和Integer：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Box&lt;String&gt; boxOfStrings = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">boxOfStrings.setContents(<span class="string">&quot;Hello, Generic Types!&quot;</span>);</span><br><span class="line"></span><br><span class="line">Box&lt;Integer&gt; boxOfIntegers = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;&gt;();</span><br><span class="line">boxOfIntegers.setContents(<span class="number">42</span>);</span><br></pre></td></tr></table></figure>
<p>可以通过调用getContents方法来获取Box对象的内容，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">contentsString</span> <span class="operator">=</span> boxOfStrings.getContents();</span><br><span class="line"><span class="type">Integer</span> <span class="variable">contentsInteger</span> <span class="operator">=</span> boxOfIntegers.getContents();</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>多元泛型</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Entry&lt;K, V&gt;&gt; entries;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Map</span><span class="params">()</span> &#123;</span><br><span class="line">        entries = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        entries.add(<span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(K key)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K, V&gt; entry : entries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(key)) &#123;</span><br><span class="line">                <span class="keyword">return</span> entry.getValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Entry</span>&lt;K, V&gt; &#123;</span><br><span class="line">        <span class="keyword">private</span> K key;</span><br><span class="line">        <span class="keyword">private</span> V value;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Entry</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.key = key;</span><br><span class="line">            <span class="built_in">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> K <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> V <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例中，我们定义了一个Map类，使用K和V表示泛型类型。类内部使用List来存储键值对，其中键类型为K，值类型为V。put方法将一个键值对添加到Map中，get方法则根据指定的键返回相应的值。此外，Map类内部还定义了一个Entry类，用来表示键值对。</p>
<h3><span id="泛型方法">泛型方法</span></h3>
<p>泛型方法，是在调用方法的时候指明泛型的具体类型。重点看下泛型的方法（图参考自：<a href="https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html%EF%BC%89">https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html）</a></p>
<p><img src="https://gitee.com/zhang-jie-king/myfigurebed/raw/master/202304261039114.png" alt="img" loading="lazy" onerror='this.onerror=null;this.src="/img/404.jpg"'></p>
<p>下面是一个简单的Java泛型方法的示例，它用于判断一个元素是否存在于一个数组中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(T[] array, T element)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (T item : array) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.equals(element)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例中，我们声明了一个泛型方法contains，它接受一个泛型类型为T的数组array和一个泛型类型为T的元素element作为参数，并返回一个boolean值，表示数组中是否存在该元素。</p>
<p>在方法实现中，我们使用了for-each循环遍历数组中的每一个元素，然后使用equals方法判断该元素是否与指定元素相等。由于在声明泛型方法时没有使用 extends 关键字来限制泛型类型参数，因此该方法适用于任何类型的数组和元素。</p>
<p>可以通过以下代码来使用该泛型方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String[] array1 = &#123;&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;&#125;;</span><br><span class="line">boolean result1 = Utils.contains(array1, &quot;banana&quot;);  // 返回true</span><br><span class="line"></span><br><span class="line">Integer[] array2 = &#123;1, 2, 3&#125;;</span><br><span class="line">boolean result2 = Utils.contains(array2, 4);  // 返回false</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们分别用一个字符串数组和一个整数数组来调用contains方法，检查指定元素是否存在于数组中。由于在方法实现中使用了泛型，因此可以处理不同类型的数组和元素。</p>
<p>下面是一个复杂一点的Java泛型方法的示例，用于比较两个对象的大小：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Utils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T a, T b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a.compareTo(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们声明了一个泛型方法compare，它接受两个泛型类型相同的参数a和b，并返回它们之间的比较结果。这里使用了 extends 关键字限制泛型类型参数为 Comparable 接口的子类型，即要求 T 必须能够进行比较。</p>
<p>使用泛型方法时，编译器会根据实际参数的类型自动推断出泛型类型参数的具体类型，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result1</span> <span class="operator">=</span> Utils.compare(<span class="number">1</span>, <span class="number">2</span>);          <span class="comment">// 返回-1，即1 &lt; 2</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> Utils.compare(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);  <span class="comment">// 返回负数，即&quot;hello&quot; &lt; &quot;world&quot;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们分别比较了两个整数和两个字符串的大小。由于整数和字符串都实现了 Comparable 接口，所以它们可以作为泛型类型参数传递给compare方法。</p>
<h3><span id="泛型接口">泛型接口</span></h3>
<p>下面是一个简单的Java泛型接口的示例，它定义了一个通用的栈（stack）接口，其中的元素可以是任何类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Stack</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(T element)</span>;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">pop</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们定义了一个Stack接口，使用泛型类型T表示栈中元素的类型。接口中定义了三个方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>push方法：将一个元素压入栈中；</p>
</li>
<li class="lvl-2">
<p>pop方法：从栈中弹出一个元素，并返回该元素；</p>
</li>
<li class="lvl-2">
<p>isEmpty方法：判断栈是否为空。</p>
</li>
</ul>
<p>由于在声明接口时使用了泛型类型参数，因此实现该接口的类可以针对不同的类型进行栈的操作。</p>
<p>例如，可以定义一个String类型的栈：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringStack</span> <span class="keyword">implements</span> <span class="title class_">Stack</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; elements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringStack</span><span class="params">()</span> &#123;</span><br><span class="line">        elements = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(String element)</span> &#123;</span><br><span class="line">        elements.add(<span class="number">0</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> elements.remove(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> elements.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们实现了一个String类型的栈StringStack，它针对字符串类型进行栈的操作。在类定义中使用了implements关键字来表示实现了Stack接口，并且在声明时使用了具体的泛型类型参数String。然后，定义了三个方法来实现Stack接口中定义的方法。</p>
<p>可以使用以下代码来对该栈进行操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringStack</span> <span class="variable">stack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringStack</span>();</span><br><span class="line">stack.push(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">stack.push(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    System.out.println(stack.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们创建一个StringStack对象，并使用push方法将两个字符串压入栈中。然后使用while循环依次弹出栈中的元素，并将它们输出到控制台。由于在定义StringStack类时指定了泛型类型参数String，因此该类只能处理字符串类型的元素。如果想要处理其他类型的元素，可以定义其他类型的栈类并实现Stack接口。</p>
<h3><span id="泛型数组">泛型数组</span></h3>
<p>Java 中的泛型数组有些限制，无法用具体类型参数直接创建泛型数组。一种常见的解决方案是定义一个类型为 Object 的数组，并将其转换为泛型数组。下面是一个简单的Java泛型数组的示例，演示了如何创建一个指定类型的泛型数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] createArray(<span class="type">int</span> length, T sample) &#123;</span><br><span class="line">        T[] array = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            array[i] = sample;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们定义了一个泛型方法 createArray，它接受两个参数：一个整数length，表示数组的长度；一个泛型类型参数sample，表示数组中的元素类型和默认值。在方法实现中，我们首先创建了一个类型为 Object 的数组，然后将其转换为泛型类型数组。</p>
<p>使用泛型数组时，可以通过传递一个示例元素来确定元素的具体类型。例如，可以使用以下代码创建一个字符串类型的数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] strings = ArrayUtils.createArray(<span class="number">5</span>, <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>在这个示例中，我们使用 createArray 方法来生成一个长度为 5 的字符串类型的数组，其初始值均为 “”。</p>
<p>需要注意的是，Java 中的泛型数组存在与类型擦除相关的限制，具体实现时需要考虑到类型安全和性能问题。在实际应用中，需要权衡使用泛型数组和其他数据结构的优缺点。</p>
<h2><span id="泛型上下限">泛型上下限</span></h2>
<p>Java中的泛型上限（Upper Bound）和下限（Lower Bound）指的是限制泛型参数类型的范围，可以用在泛型方法、泛型接口、泛型类等多种场景中。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>上限（Upper Bound）：使用 extends 关键字，表示泛型参数必须是指定类型或者其子类型。例如，&lt;? extends Number&gt; 表示泛型参数必须是 Number 类型或其子类的类型。</p>
<ul class="lvl-2">
<li class="lvl-6">数组 <code>T[]</code> 是一个特殊的类型，它没有上限，也就是说，不能声明为 <code>T extends E[]</code> 的形式。如果需要声明一个可以包含数组元素的泛型类或者泛型方法，可以将其定义为 <code>T[]</code> 类型。</li>
</ul>
</li>
<li class="lvl-2">
<p>下限（Lower Bound）：使用 super 关键字，表示泛型参数必须是指定类型或者其父类型。例如，&lt;? super Integer&gt; 表示泛型参数必须是 Integer 类型或其父类的类型。</p>
</li>
</ul>
<p>下面是一个简单的示例，演示了上限和下限的用法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoundExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&lt;T&gt;&gt; T <span class="title function_">max</span><span class="params">(T[] array)</span> &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">max</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i].compareTo(max) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                max = array[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addNumbers</span><span class="params">(List&lt;? <span class="built_in">super</span> Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了两个示例方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>max方法：接受一个泛型类型为T的数组，使用 extends 关键字来限定泛型参数类型必须是Comparable接口的子类。该方法返回数组中最大的元素。</p>
</li>
<li class="lvl-2">
<p>addNumbers方法：接受一个泛型类型为List&lt;? super Integer&gt;的参数，使用 super 关键字限制泛型参数类型必须是Integer类型或其父类。该方法用于向列表中添加数字。</p>
</li>
</ul>
<p>可以使用以下代码来调用这些方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] integers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">String[] strings = &#123;<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;orange&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;Max integer: &quot;</span> + BoundExample.max(integers)); <span class="comment">// 输出：Max integer: 5</span></span><br><span class="line"><span class="comment">// 下行中不能将`strs`传给`max`方法, 因为泛型参数必须是 Comparable&lt;T&gt; 的子类型</span></span><br><span class="line"><span class="comment">// System.out.println(&quot;Max string: &quot; + BoundExample.max(strings));</span></span><br><span class="line"></span><br><span class="line">List&lt;Number&gt; numbers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">BoundExample.addNumbers(numbers);</span><br><span class="line">System.out.println(<span class="string">&quot;Numbers: &quot;</span> + numbers); <span class="comment">// 输出：Numbers: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们分别使用 Integer 和 String 类型的数组来调用 max 方法，说明了使用 extends 关键字时的限制。在调用 addNumbers 方法时，我们使用了 List<number> 类型的参数，演示了使用 super 关键字时的限制。</number></p>
<h2><span id="泛型的一些其他知识">泛型的一些其他知识</span></h2>
<ol>
<li class="lvl-3">
<p>泛型的类型擦除</p>
</li>
</ol>
<p>Java 中的泛型本身并不是一种运行时的机制，它仅仅是一种编译时的类型检查机制。在 Java 代码被编译成字节码后，泛型信息被擦除了，也就是说，编译器在编译时会自动将泛型转换为相应的较低类型，比如 Object 类型。例如，一个<code>List&lt;Integer&gt;</code>在运行时会成为一个<code>List</code>类型。</p>
<p>由于类型擦除的存在，有时候在泛型类和泛型方法中，我们并不能直接获取到泛型类型的具体信息。为了解决这个问题，可以使用反射机制来获取泛型类型的信息。</p>
<ol start="2">
<li class="lvl-3">
<p>关于类型通配符</p>
</li>
</ol>
<p>在 Java 中，我们使用通配符（wildcard）来表示通用类型，通配符可以用来声明泛型的上限和下限。有三种使用通配符的方式：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>&lt;?&gt;</code>：表示未知类型，相当于不限定泛型类型；</p>
</li>
<li class="lvl-2">
<p><code>&lt;? extends T&gt;</code>：表示泛型类型必须是T类型或其子类类型；</p>
</li>
<li class="lvl-2">
<p><code>&lt;? super T&gt;</code>：表示泛型类型必须是T类型或其父类类型。</p>
</li>
</ul>
<p>需要注意的是，类型通配符是一种泛型限制，只能使用在参数中，不能用于类、方法的定义上。</p>
<ol start="3">
<li class="lvl-3">
<p>泛型和继承的关系</p>
</li>
</ol>
<p>泛型和继承都是 Java 中的重要特性，它们之间有着紧密的联系。Java 中的泛型可以用来实现多态，而继承则是 Java 中的一种多态机制。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>父类的泛型可以传递给子类：如果一个类使用了泛型，那么它的子类可以继承它，并且子类也可以使用泛型，这样就可以实现泛型的传递。例如，<code>List&lt;String&gt;</code>是<code>List&lt;?&gt;</code>的子类型。</p>
</li>
<li class="lvl-2">
<p>泛型类型不能区分父类与子类：Java 中的泛型是通过类型擦除来实现的，因此在泛型类或方法的继承关系中，子类不能区分父类与子类的类型。</p>
</li>
</ul>
<ol start="4">
<li class="lvl-3">
<p>泛型和数组的区别</p>
</li>
</ol>
<p>Java 的泛型和数组有些相似，但也有不同之处：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>泛型与数组都能够对元素进行类型检查，并提供相关的方法和操作；</p>
</li>
<li class="lvl-2">
<p>与数组不同，泛型不能直接创建具体的类型，只能创建通用类型；</p>
</li>
<li class="lvl-2">
<p>与泛型不同，数组可以定义具体类型的多维数组，而泛型无法直接实现多维泛型数组。</p>
</li>
</ul>
<p>需要注意的是，Java 中的泛型是在编译时进行类型擦除的，而数组则是在运行时进行类型检查的。因此，在使用泛型和数组时，需要根据具体的情况进行选择。</p>
<ol start="5">
<li class="lvl-3">
<p>泛型和反射的结合应用</p>
</li>
</ol>
<p>Java 中的泛型和反射是两个非常强大的特性，在实际应用时可以结合使用，实现更高级、更灵活的编程技巧。例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用反射获取泛型类型信息：由于泛型的类型信息在编译时被擦除了，因此我们可以使用反射机制来获取泛型类型的信息，包括类、方法、字段等级别的泛型类型信息。使用反射的泛型信息可以在运行时做到更加灵活和高效地处理对象和数据。</p>
</li>
<li class="lvl-2">
<p>通过反射操作泛型数组：Java 中的泛型数组有一些限制，不能用具体类型参数数组直接创建泛型数组。但是通过反射，我们可以使用 Java 提供的 Array 类来创建特定的泛型数组，并进行相关的操作。</p>
</li>
</ul>
<p>下面是一个使用反射操作泛型数组的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericArray</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T[] array;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GenericArray</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        array = (T[]) <span class="keyword">new</span> <span class="title class_">Object</span>[length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, T item)</span> &#123;</span><br><span class="line">        array[index] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> array[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T[] getArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericArray&lt;String&gt; ga = <span class="keyword">new</span> <span class="title class_">GenericArray</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用反射设置元素</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">m</span> <span class="operator">=</span> ga.getClass().getMethod(<span class="string">&quot;set&quot;</span>, <span class="type">int</span>.class, Object.class);</span><br><span class="line">            m.invoke(ga, <span class="number">0</span>, <span class="string">&quot;Hello, Generic Array!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取一个Object[]数组</span></span><br><span class="line">        Object[] objects = ga.getArray();</span><br><span class="line">        objects[<span class="number">1</span>] = <span class="number">123</span>; <span class="comment">// 运行时错误：ArrayStoreException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了一个泛型类 GenericArray，并使用反射来操作它的元素，并演示了泛型数组的限制。</p>
<p>需要注意的是，泛型数组在 Java 中有其局限性，因此在实际使用时需要谨慎开发。</p>
<ol start="6">
<li class="lvl-3">
<p>泛型与静态方法和静态属性</p>
</li>
</ol>
<p>Java泛型不能用在静态方法或静态属性上面，是因为泛型类型的擦除机制在这种情况下会导致类型信息的丢失。由于静态方法和静态属性是属于类本身的，不属于类的实例，因此在使用泛型时，它们并没有明确的实例化对象来指定类型。这就导致在编译时，JVM无法确定泛型类型的具体信息，只能使用Object类型来代替，而这样会导致编译错误或者运行时类型错误的出现。</p>
<p>例如，我们考虑下面这个不合法的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        Test.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了一个静态变量value和两个静态方法setValue和getValue，其中value的类型参数为T。由于静态变量和静态方法是属于类本身的，而非类的实例，因此在静态方法中并不能访问泛型的类型参数T。这就会导致编译时出现错误，提示无法引用非静态变量T。</p>
<p>虽然Java中不能直接在静态方法或静态属性上使用泛型，但可以通过传递类类型做为参数，实现在静态方法中使用泛型的目的。例如，可以将类型参数传递给静态方法，或将类型参数传递给泛型类的构造函数来实现泛型的静态方法或属性使用。</p>
<ol start="7">
<li class="lvl-3">
<p>异常与泛型</p>
</li>
</ol>
<p>Java中的异常处理机制允许我们在throw和catch语句中使用泛型，从而实现异常信息的类型安全和灵活性。Java的异常层次结构中定义了一些通用的异常类，例如Exception、RuntimeException、Error等，这些异常类能够用于处理不同类型的异常情况。使用泛型可以使异常处理更加具有通用性、灵活性和类型安全性。</p>
<p>Java泛型与异常处理通常需要结合在一起使用，其主要使用方式包括以下几点：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>使用泛型来定义异常类</p>
</li>
</ul>
<p>在Java中，可以使用泛型来定义异常类，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> T detail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(T detail)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.detail = detail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getDetail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> detail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了一个泛型异常类MyException，它继承了Exception类。在MyException类中，我们定义了一个泛型变量detail，用于存储异常的详细信息。使用泛型定义异常类，可以使得异常类的使用更加的通用和灵活。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>抛出泛型异常</p>
</li>
</ul>
<p>在Java中，我们可以使用throw关键字来抛出一个异常，如果该异常是一个泛型异常，我们也需要使用泛型类型传递异常信息，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">someMethod</span><span class="params">()</span> <span class="keyword">throws</span> MyException&lt;String&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>&lt;&gt;(<span class="string">&quot;An error occurred&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们使用MyException泛型异常类抛出了一个异常，并使用泛型类型String传递了异常信息。这样可以使得异常信息更具有类型安全性。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>捕获泛型异常</p>
</li>
</ul>
<p>在Java中，我们可以使用catch关键字来捕获一个异常，如果该异常是一个泛型异常，我们也需要使用泛型类型对异常进行捕获，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Some code that may throw an exception</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (MyException&lt;String&gt; ex) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Error: &quot;</span> + ex.getDetail());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们捕获了一个MyException类型的泛型异常，并使用泛型类型String来处理异常信息。这样可以使得异常处理更加类型安全和灵活。</p>
<p>总之，Java中的异常处理机制允许我们使用泛型来实现更具类型安全和灵活性的异常处理。通过使用泛型，可以让异常处理更加通用和灵活，同时防止出现类型错误，使程序更加健壮和安全。</p>
<ol start="8">
<li class="lvl-3">
<p>获取java泛型的参数类型</p>
</li>
</ol>
<p>在Java中，我们可以使用反射机制获取泛型参数的类型。Java泛型在编译时会进行类型擦除，将泛型类型的所有参数都替换成它们的上界类型或Object类型，这可能会导致实例化时无法获取泛型的具体类型。但是，在通过反射机制访问类的内容时，可以获取泛型的类型参数。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>原生反射</p>
<p><code>java.lang.reflect.Type</code>是Java中所有类型的公共高级接口, 代表了Java中的所有类型. Type体系中类型的包括：数组类型(GenericArrayType)、参数化类型(ParameterizedType)、类型变量(TypeVariable)、通配符类型(WildcardType)、原始类型(Class)、基本类型(Class), 以上这些类型都实现Type接口。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericType</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        GenericType&lt;String&gt; genericType = <span class="keyword">new</span> <span class="title class_">GenericType</span>&lt;String&gt;() &#123;&#125;;</span><br><span class="line">        <span class="type">Type</span> <span class="variable">superclass</span> <span class="operator">=</span> genericType.getClass().getGenericSuperclass();</span><br><span class="line">        <span class="comment">//getActualTypeArguments 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span></span><br><span class="line">        <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> ((ParameterizedType) superclass).getActualTypeArguments()[<span class="number">0</span>]; </span><br><span class="line">        System.out.println(type);<span class="comment">//class java.lang.String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中 <code>ParameterizedType</code>:</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ParameterizedType</span> <span class="keyword">extends</span> <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="comment">// 返回确切的泛型参数, 如Map&lt;String, Integer&gt;返回[String, Integer]</span></span><br><span class="line">    Type[] getActualTypeArguments();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回当前class或interface声明的类型, 如List&lt;?&gt;返回List</span></span><br><span class="line">    Type <span class="title function_">getRawType</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回所属类型. 如,当前类型为O&lt;T&gt;.I&lt;S&gt;, 则返回O&lt;T&gt;. 顶级类型将返回null </span></span><br><span class="line">    Type <span class="title function_">getOwnerType</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<p>参考链接：<a href="https://pdai.tech/md/java/basic/java-basic-x-generic.html">https://pdai.tech/md/java/basic/java-basic-x-generic.html</a></p>
</li>
</ul>
<p>还可以使用TypeToken和TypeReference两种方式获取泛型参数的类型，这两种方式都是通过创建带泛型参数的子类并提取类型信息来实现的。以下是两种方式的介绍及代码示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TypeToken方式获取泛型参数的类型</p>
</li>
</ul>
<p>TypeToken是Gson库中的一个类，可以用来获取泛型的类型信息。可以通过继承TypeToken类来获取泛型参数的类型信息，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyTypeToken</span> <span class="keyword">extends</span> <span class="title class_">TypeToken</span>&lt;MyGenericType&lt;String&gt;&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTypeToken</span>().getType();</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了一个MyTypeToken类，它继承了TypeToken&lt;MyGenericType<string>&gt;类，其中MyGenericType是一个泛型类，String是它的类型参数。通过调用getType方法可以获取泛型的类型参数。</string></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>TypeReference方式获取泛型参数的类型</p>
</li>
</ul>
<p>TypeReference是jackson库中的一个类，也可以用来获取泛型参数的类型信息。与TypeToken类似，可以通过继承TypeReference类来获取泛型参数的类型信息，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MyTypeReference</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">TypeReference</span>&lt;T&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyTypeReference</span>&lt;MyGenericType&lt;String&gt;&gt;()&#123;&#125;.getType();</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们定义了一个抽象类MyTypeReference，它继承了TypeReference&lt;MyGenericType<string>&gt;类。通过在MyTypeReference类中加入类型参数T并对其进行继承，就可以获取泛型的类型参数。</string></p>
<p>总之，通过使用TypeToken和TypeReference等方式可以获取Java泛型的参数类型，使得泛型类型更具有灵活性和通用性。这些方式可以通过创建带泛型参数的子类获取泛型类型信息，使得泛型的使用更加灵活和类型安全。</p>
<h1><span id="注解机制">注解机制</span></h1>
<blockquote>
<p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。它是框架学习和设计者必须掌握的基础。</p>
</blockquote>
<h2><span id="内置注解">内置注解</span></h2>
<p>Java内置了许多注解，其中一些常见的注解包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Override：用于表示一个方法是覆盖了父类的方法。</p>
</li>
<li class="lvl-2">
<p>@Deprecated：用于标记一个类、方法或字段已经过时，建议不再使用。</p>
</li>
<li class="lvl-2">
<p>@SuppressWarnings：用于抑制编译器警告，可以用来禁止特定的警告或全部警告。</p>
</li>
</ul>
<p>以下是这些常见内置注解的具体用法示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Override：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moving</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Moving...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">moving</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>Tiger</code>类覆盖了<code>Animal</code>类的<code>moving()</code>方法，并使用了<code>@Override</code>注解来表示它们的关系，这样做在代码审查时可以更容易地发现代码中的错误。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Deprecated：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>getName()</code>方法被标记为不推荐使用。在实际应用中，如果开发人员使用了<code>getName()</code>方法，开发工具将弹出一个警告窗口，提醒开发人员该方法已被弃用，需要使用其他替代方法。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@SuppressWarnings：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(Collection books)</span> &#123;</span><br><span class="line">        books.add(<span class="keyword">new</span> <span class="title class_">Book</span>()); <span class="comment">// 这里会出现“未经检查的类型转换”警告</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>addAll()</code>方法将一个<code>Collection</code>对象作为参数，并使用了<code>@SuppressWarnings(&quot;unchecked&quot;)</code>注解来抑制Java编译器产生的“未经检查的类型转换”警告。由于Java的类型擦除机制，<code>Collection</code>对象的类型在运行时是不可知的，因此需要使用注解来提示编译器这是有意为之的。</p>
<p>##元注解</p>
<p>元注解是用于注解其他注解的注解。Java中的元注解包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Target：指定注解可以用在哪些地方，如类、方法、字段等。</p>
</li>
<li class="lvl-2">
<p>@Retention：指定注解保留的时间，可以是编译时、运行时或者源代码中。</p>
</li>
<li class="lvl-2">
<p>@Documented：指定注解会被包含在Java文档中。</p>
</li>
<li class="lvl-2">
<p>@Inherited：指定注解可以被子类继承。</p>
</li>
<li class="lvl-2">
<p>@Repeatable：指定注解可以重复使用（Java8之后引入）。</p>
</li>
<li class="lvl-2">
<p>@Native：指定本地方法的签名（Java8之后引入）。</p>
</li>
</ul>
<p>以下是元注解的具体使用示例：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Target：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>@MyAnnotation</code>注解只能用于方法上。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Retention：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>@MyAnnotation</code>注解会被保留到运行时。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Documented：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>@MyAnnotation</code>注解会被包含在Java文档中。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Inherited：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>@MyAnnotation</code>注解可以被子类继承。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Repeatable：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repeatable(MyAnnos.class)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnno &#123;</span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@interface</span> MyAnnos &#123;</span><br><span class="line">    MyAnno[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>@MyAnno</code>注解可以多次使用，并使用<code>@MyAnnos</code>来包装它们。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Native：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyLibrary</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>; <span class="comment">// method signature is declared as native</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，<code>fun()</code>方法是一个本地方法，其方法签名被声明为<code>native</code>。这样编译器就会知道在编译期间需要为该方法生成本地代码。</p>
<p>##自定义注解</p>
<p>除了内置注解之外，Java还支持自定义注解。自定义注解可以用于标记代码中的特定元素，例如类、方法、变量等，以实现各种功能，如配置、文档生成、代码分析等。自定义注解可以使用Java反射机制来访问和处理。</p>
<p>以下是一个简单的Java自定义注解的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">int</span>[] numbers() <span class="keyword">default</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，我们使用了<code>@interface</code>来定义自己的注解，注解名字为<code>MyAnnotation</code>，注解内容包括一个<code>String</code>类型的属性<code>value</code>和一个整型数组类型的属性<code>numbers</code>。<code>@Retention</code>注解指定该注解在运行时保留，<code>@Target</code>注解指定该注解只能用于方法上。在使用<code>MyAnnotation</code>时，我们可以通过<code>value</code>属性设置该注解的值，在使用<code>numbers</code>属性时，我们可以通过赋值来给数组赋初值。以下是一个使用该自定义注解的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation(value = &quot;Hello, world!&quot;, numbers = &#123;1, 2, 3, 4&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// some code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，我们在<code>doSomething()</code>方法上应用了自定义注解<code>@MyAnnotation</code>，并设置了<code>value</code>和<code>numbers</code>属性的值。在实际应用中，我们可以通过反射机制来获取注解信息，并据此进行一些特定的操作，例如根据注解的值来判断是否执行某个方法，或者根据注解的信息来生成代码等。</p>
<p>##Java8新的注解</p>
<p>Java8引入了一些新的注解，包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@FunctionalInterface：用于标记一个接口是函数式接口，即只包含一个抽象方法的接口。</p>
</li>
<li class="lvl-2">
<p>@Repeatable：用于标记一个注解可以重复使用。</p>
</li>
<li class="lvl-2">
<p>@SafeVarargs：用于标记一个方法使用了可变参数，并且不会出现类型安全问题。</p>
</li>
<li class="lvl-2">
<p>@FunctionalInterface：用于标记一个接口是函数式接口，即只包含一个抽象方法的接口。</p>
</li>
<li class="lvl-2">
<p>@Repeatable：用于标记一个注解可以重复使用。</p>
</li>
</ul>
<ol start="5">
<li class="lvl-3">
<p>注解的应用场景</p>
</li>
</ol>
<p>Java注解的应用场景很广泛，常见的应用场景包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>配置信息：例如Spring框架中的@Value注解，用于指定属性的值。</p>
</li>
<li class="lvl-2">
<p>文档生成：例如JavaDoc注解，用于生成Java文档。</p>
</li>
<li class="lvl-2">
<p>代码分析：例如JUnit框架中的@Test注解，用于标记测试方法。</p>
</li>
<li class="lvl-2">
<p>依赖注入：例如Spring框架中的@Autowired注解，用于自动注入依赖对象。</p>
</li>
<li class="lvl-2">
<p>AOP：例如Spring框架中的@Aspect注解，用于声明切面。</p>
</li>
</ul>
<p>##配置化到注解化 - 框架的演进</p>
<p>随着软件开发的不断演进，从传统的配置文件到注解配置的转变成为趋势。例如Spring框架最初使用XML配置，但随着注解的发展，现在Spring框架可以通过注解配置。这种配置方式更加直观和简洁，也更容易维护。除了Spring框架之外，许多现代化的框架都支持使用注解进行配置，例如Hibernate、MyBatis、Struts2等。</p>
<p>##自定义注解和AOP</p>
<p>自定义注解和AOP（面向切面编程）相结合，可以实现更加灵活和高效的编程。通过定义切点和切面，可以在代码中对特定的方法或类进行切入，从而实现各种功能，如事务管理、日志记录、性能监控等。</p>
<p>##注解支持继承吗？</p>
<p>Java注解支持继承，子类可以继承父类的注解。如果一个注解被@Inherited修饰，那么它可以被子类继承。如果一个注解没有被@Inherited修饰，那么它不能被子类继承。</p>
<p>以下是一个Java注解的继承案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@interface</span> ParentAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@interface</span> ChildAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParentAnnotation(value = &quot;Parent Annotation&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ChildAnnotation(value = &quot;Child Annotation&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，我们定义了两个注解: <code>ParentAnnotation</code>和<code>ChildAnnotation</code> 。 <code>Parent</code>类使用<code>ParentAnnotation</code>注解进行标记， <code>Child</code>继承了<code>Parent</code>，并使用了<code>ChildAnnotation</code>注解。我们还对<code>ParentAnnotation</code>注解用<code>@Inherited</code>进行修饰，使得这个注解可以从父类继承到子类。</p>
<p>我们可以通过以下代码来获取类的注解信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Class&lt;Child&gt; childClass = Child.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">ParentAnnotation</span> <span class="variable">parentAnnotation</span> <span class="operator">=</span> childClass.getAnnotation(ParentAnnotation.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ParentAnnotation: &quot;</span> + parentAnnotation);</span><br><span class="line"></span><br><span class="line">        <span class="type">ChildAnnotation</span> <span class="variable">childAnnotation</span> <span class="operator">=</span> childClass.getAnnotation(ChildAnnotation.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;ChildAnnotation: &quot;</span> + childAnnotation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们通过<code>getAnnotation()</code>方法分别获取了<code>Child</code>和<code>Parent</code>的注解信息。由于<code>ParentAnnotation</code>被标记为<code>@Inherited</code>，因此<code>ParentAnnotation</code>的信息会被<code>Child</code>类所继承 , 上述代码会输出以下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParentAnnotation: <span class="meta">@ParentAnnotation(value=Parent Annotation)</span></span><br><span class="line">ChildAnnotation: <span class="meta">@ChildAnnotation(value=Child Annotation)</span></span><br></pre></td></tr></table></figure>
<p>从输出可以看到，<code>Child</code>类成功继承了<code>ParentAnnotation</code>注解。</p>
<p>##注解实现的原理</p>
<p>Java注解的实现原理是使用反射机制来访问和处理注解。当程序使用注解时，编译器会将注解信息保存到编译后的.class文件中。在运行时，使用反射机制可以访问.class文件中的注解信息，并进行相应的处理。</p>
<p>下面是一个具体的示例，将展示如何使用反射机制访问和处理Java注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation(value = &quot;Hello, world!&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// some code here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> myObj.getClass().getMethod(<span class="string">&quot;doSomething&quot;</span>);</span><br><span class="line">        <span class="type">MyAnnotation</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(MyAnnotation.class);</span><br><span class="line">        System.out.println(annotation.value()); <span class="comment">// 输出: &quot;Hello, world!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，我们定义了一个自定义的 <code>MyAnnotation</code>注解以及一个 <code>MyClass</code>类，其中 <code>doSomething()</code> 方法被标记了 <code>@MyAnnotation</code> 注解。</p>
<p>在 <code>Test</code> 类的 <code>main()</code> 方法中，首先创建了 <code>MyClass</code> 的实例 <code>myObj</code>，然后使用反射机制获取了 <code>doSomething()</code> 方法的引用对象 <code>Method</code>。接着，通过 <code>Method</code> 的 <code>getAnnotation()</code> 方法读取了 <code>doSomething()</code> 方法标记的 <code>@MyAnnotation</code> 注解，并将注解信息存储在 <code>annotation</code> 变量中。</p>
<p>最后，通过打印输出 <code>annotation.value()</code>，成功地将注解的值 “Hello, world!” 输出到了控制台。</p>
<p>从上述分析中，我们可以看出，Java 注解的实现原理就是在编译器将注解信息保存到字节码文件中，并通过反射机制在运行时读取和处理注解信息。这种机制使开发者可以通过非常简单的语法来给代码添加元数据，从而在运行时得到更多的程序信息，进而实现更加灵活和高效的编程。</p>
<p>##Java8提供了哪些新的注解？</p>
<p>Java8提供了一些新的注解，例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>@Repeatable：可以用于声明一个注解可以重复使用多次。</p>
</li>
<li class="lvl-2">
<p>@Native：可以用于声明一个本地方法（Native Method）。</p>
</li>
<li class="lvl-2">
<p>@FunctionalInterface：可以用于声明一个函数式接口。</p>
</li>
<li class="lvl-2">
<p>@SafeVarargs：可以用于声明一个方法使用可变参数，但是不会产生类型安全问题。</p>
</li>
<li class="lvl-2">
<p>@Deprecated：可以用于声明一个方法或类已经被弃用。</p>
</li>
<li class="lvl-2">
<p>@FunctionalInterface：可以用于声明一个函数式接口。</p>
</li>
</ul>
<h2><span id="注解的应用场景">注解的应用场景</span></h2>
<p>Java注解的应用场景非常广泛，可以用于各种领域和用途，例如：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>配置文件：可以用注解代替XML或属性文件进行配置。</p>
</li>
<li class="lvl-2">
<p>代码分析：可以用注解标记代码中的特定元素，如不安全的方法、过时的方法等。</p>
</li>
<li class="lvl-2">
<p>依赖注入：可以用注解注入对象或属性，如Spring框架的@Autowired注解。</p>
</li>
<li class="lvl-2">
<p>日志记录：可以用注解标记需要记录日志的方法或类，如Log4j框架的@Log注解。</p>
</li>
<li class="lvl-2">
<p>AOP：可以用注解实现面向切面编程，如Spring框架的@Aspect注解。</p>
</li>
</ul>
<p>##配置化到注解化 - 框架的演进</p>
<p>在软件开发的不同阶段，从配置化到注解化的演进是非常明显的趋势。传统的配置文件方式，比如XML、属性文件等，存在很多弊端，如复杂、容易出错、难以维护等。而注解化的方式更加直观、简洁、灵活，使得代码更加易于阅读和维护。</p>
<p>随着框架的不断演进，从继承实现到注解实现，是一个非常明显的趋势。比如，JUnit3是通过继承TestCase类来实现单元测试的，而JUnit4则是通过注解来实现单元测试。这种方式不仅使得测试代码更加简洁、易读，还可以将测试代码和被测试代码分离，使得代码更加松耦合。</p>
<p>##自定义注解和AOP - 通过切面实现解耦</p>
<p>自定义注解和AOP结合起来，可以实现更加灵活、高效的编程方式。通过定义切点和切面，可以对特定的方法或类进行切入，从而实现各种功能，如事务管理、日志记录、性能监控等。这种方式可以将关注点从业务逻辑中分离出来，提高代码的可维护性和可扩展性。</p>
<p>##总结</p>
<p>Java注解是一种强大的元数据机制，可以用于标记和处理代码中的特定元素，如类、方法、变量等。Java注解可以通过反射机制来访问和处理，可以实现各种功能，如配置、文档生成、代码分析、依赖注入、AOP等。随着软件开发的不断演进，从传统的配置文件到注解配置的转变成为趋势，注解化的编程方式可以使代码更加简洁、灵活和高效。</p>
<h1><span id="异常机制">异常机制</span></h1>
<p>Java中的异常机制是指在程序运行时出现错误或异常情况时，程序可以通过抛出异常来通知调用者发生了异常，从而使得调用者有机会处理这个异常。异常机制可以保证程序的健壮性和可靠性。</p>
<p>##异常的层次结构</p>
<p>Java中的异常分为两大类：Error和Exception。Error表示系统级别的错误，一般由虚拟机自己处理，程序员无需干预；Exception则表示程序运行时的异常情况，需要程序员进行处理。Exception又分为可查的异常（checked exceptions）和不可查的异常（unchecked exceptions），前者必须在方法签名中声明，后者不需要声明。</p>
<p>首先，我们来看一下Error类异常的例子。Error表示系统级别的错误，一般由虚拟机自己处理，程序员无需干预。例如，OutOfMemoryError表示内存不足错误，通常无法通过代码来处理它。下面是一个简单的OutOfMemoryError的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OutOfMemoryErrorExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] array = <span class="keyword">new</span> <span class="title class_">int</span>[Integer.MAX_VALUE];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们创建了一个长度为<code>Integer.MAX_VALUE</code>的数组，这远远超过了Java虚拟机所能分配的最大内存，因此会抛出OutOfMemoryError异常。</p>
<p>接下来，我们来看一下Exception类异常的例子。Exception表示程序运行时的异常情况，需要程序员进行处理。Exception又分为可查的异常（checked exceptions）和不可查的异常（unchecked exceptions），前者必须在方法签名中声明，后者不需要声明。下面是一个简单的IOException的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;file.txt&quot;</span>));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            System.out.println(line);</span><br><span class="line">            reader.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们尝试读取一个文件并打印其中的一行。由于文件可能不存在或读取过程中发生错误，因此我们使用了try-catch语句来捕获可能抛出的IOException异常。如果出现了异常，我们会打印异常信息并继续执行程序。</p>
<p>最后，我们来看一下RuntimeException类异常的例子。RuntimeException是Exception的一个子类，表示程序运行时的异常情况，不需要在方法签名中声明。下面是一个简单的ArithmeticException的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b; <span class="comment">// 除以0会抛出ArithmeticException异常</span></span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们尝试将10除以0，这会抛出ArithmeticException异常。由于ArithmeticException是RuntimeException的子类，因此我们不需要在方法签名中声明它，但我们仍然可以使用try-catch语句来捕获它。</p>
<p>总之，Java中的异常分为两大类：Error和Exception。Error表示系统级别的错误，一般由虚拟机自己处理，程序员无需干预；Exception则表示程序运行时的异常情况，需要程序员进行处理。Exception又分为可查的异常（checked exceptions）和不可查的异常（unchecked exceptions），前者必须在方法签名中声明，后者不需要声明。</p>
<p>##异常基础</p>
<p>​		Java中的异常关键字包括throws、throw和try-catch。throws用于在方法签名中声明可能抛出的异常类型，throw用于手动抛出一个异常，try-catch用于捕获并处理异常。</p>
<p>​		首先，我们来看一下throws关键字的例子。throws用于在方法签名中声明可能抛出的异常类型。例如，我们定义了一个方法<code>readFile</code>，它可能会抛出IOException异常，我们可以在方法签名中使用throws关键字来声明这个异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> readFile(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">            System.out.println(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String filename)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filename));</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们定义了一个静态方法<code>readFile</code>，它接受一个文件名作为参数，并返回文件的第一行内容。由于读取文件时可能会发生IOException异常，因此我们在方法签名中使用throws关键字来声明这个异常。在调用<code>readFile</code>方法时，我们使用try-catch语句来捕获可能抛出的IOException异常。</p>
<p>​		接下来，我们来看一下throw关键字的例子。throw用于手动抛出一个异常。例如，我们定义了一个方法<code>divide</code>，它接受两个整数作为参数，并返回它们的商。如果除数为0，则无法计算，我们可以使用throw关键字手动抛出一个ArithmeticException异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArithmeticExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> divide(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ArithmeticException</span>(<span class="string">&quot;Division by zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们定义了一个静态方法<code>divide</code>，它接受两个整数作为参数，并返回它们的商。如果除数为0，则无法计算，我们使用throw关键字手动抛出一个ArithmeticException异常。在调用<code>divide</code>方法时，我们使用try-catch语句来捕获可能抛出的ArithmeticException异常。</p>
<p>​		最后，我们来看一下try-catch关键字的例子。try-catch用于捕获并处理异常。例如，我们定义了一个方法<code>readFile</code>，它接受一个文件名作为参数，并返回文件的第一行内容。如果读取文件时发生IOException异常，则返回空字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IOExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> readFile(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">        System.out.println(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readFile</span><span class="params">(String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(filename));</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="keyword">return</span> line;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们定义了一个静态方法<code>readFile</code>，它接受一个文件名作为参数，并返回文件的第一行内容。在方法中，我们使用try-catch语句来捕获可能抛出的IOException异常。如果发生异常，我们打印异常信息并返回空字符串。</p>
<p>​		总之，Java中的异常关键字包括throws、throw和try-catch。throws用于在方法签名中声明可能抛出的异常类型，throw用于手动抛出一个异常，try-catch用于捕获并处理异常。在实际开发中，我们应该根据具体情况合理使用这些关键字，以保证程序的健壮性和可靠性。</p>
<p>##异常的自定义和捕获</p>
<p>​		程序员可以自定义异常，继承Exception或其子类，并通过throw手动抛出异常。异常的捕获可以使用try-catch、try-catch-finally或try-with-resource语句。</p>
<p>在Java中，我们可以通过继承Exception类或其子类来自定义异常。例如，我们可以定义一个自定义异常类<code>MyException</code>，它继承自Exception类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们定义了一个自定义异常类<code>MyException</code>，它继承自Exception类。我们在构造方法中传入异常信息，并调用父类的构造方法来初始化异常信息。</p>
<p>​		接下来，我们可以在程序中抛出自定义异常。例如，我们可以定义一个方法<code>divide</code>，它接受两个整数作为参数，并返回它们的商。如果除数为0，则抛出自定义异常<code>MyException</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> divide(<span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MyException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> <span class="keyword">throws</span> MyException &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;Division by zero&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们定义了一个静态方法<code>divide</code>，它接受两个整数作为参数，并返回它们的商。如果除数为0，则抛出自定义异常<code>MyException</code>。在调用<code>divide</code>方法时，我们使用try-catch语句来捕获可能抛出的<code>MyException</code>异常。</p>
<p>​		当程序抛出自定义异常时，我们可以使用try-catch语句来捕获并处理异常。例如，我们可以在上面的代码中使用try-catch语句来捕获可能抛出的<code>MyException</code>异常。在catch块中，我们可以打印异常信息或进行其他操作。</p>
<p>​		总之，在Java中，我们可以通过继承Exception类或其子类来自定义异常。自定义异常可以帮助我们更好地组织和管理代码中的异常情况。在程序中抛出自定义异常时，我们可以使用try-catch语句来捕获并处理异常，以保证程序的健壮性和可靠性。</p>
<p>##异常基础总结</p>
<p>​		在使用异常时，应该优先捕获最具体的异常，不要捕获Throwable类或忽略异常，不要记录并抛出异常，不要抛弃原始的异常，不要使用异常控制程序的流程，在finally块中不要使用return。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>优先捕获最具体的异常</p>
</li>
</ul>
<p>​		在Java中，异常类之间存在继承关系。一般来说，我们应该优先捕获最具体的异常，而不是捕获Throwable类或忽略异常。例如，如果我们需要读取一个文件，但文件不存在，则应该捕获FileNotFoundException异常，而不是捕获更通用的IOException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;file.txt&quot;</span>);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;File not found&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>不要记录并抛出异常</p>
</li>
</ul>
<p>​		有时候，我们可能会在catch块中记录异常信息，并将异常重新抛出。这种做法会导致异常信息丢失，并且增加了代码的复杂性。因此，我们应该避免记录并抛出异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;An error occurred: &quot;</span> + e.getMessage());</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;An error occurred&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>不要抛弃原始的异常</p>
</li>
</ul>
<p>​		有时候，我们可能会在catch块中抛出新的异常，并且不带原始的异常信息。这种做法会导致原始异常信息丢失，并且增加了代码的复杂性。因此，我们应该避免抛弃原始的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;An error occurred&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;An error occurred&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>不要使用异常控制程序的流程</p>
</li>
</ul>
<p>​		异常机制的主要作用是处理异常情况，而不是控制程序的流程。因此，我们应该避免使用异常来控制程序的流程。例如，在循环中使用异常来跳出循环是不好的做法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p>在finally块中不要使用return</p>
</li>
</ul>
<p>​		finally块中的代码会在try或catch块中的代码执行完毕后执行，无论是否发生异常。因此，在finally块中使用return语句会导致前面的代码被忽略，从而可能导致不可预期的结果。因此，我们应该避免在finally块中使用return语句。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不好的写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 好的写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总之，在使用异常时，我们应该遵循上述几个原则，以保证代码的可读性、可维护性和可靠性。</p>
<p>##异常实践</p>
<p>​		在实践中，应该只针对不正常的情况才使用异常，可以在finally块中清理资源或使用try-with-resource语句，尽量使用标准的异常对异常进行文档说明。</p>
<p>下面是一个Java通过JDBC连接MySQL数据库查询数据并在finally里面关闭资源的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 加载驱动</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 建立连接</span></span><br><span class="line">            conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建PreparedStatement对象</span></span><br><span class="line">            stmt = conn.prepareStatement(<span class="string">&quot;SELECT * FROM users WHERE id=?&quot;</span>);</span><br><span class="line">            stmt.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            rs = stmt.executeQuery();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理结果集</span></span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getInt(<span class="string">&quot;id&quot;</span>) + <span class="string">&quot;, &quot;</span> + rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    rs.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们首先加载了MySQL的JDBC驱动。然后，我们建立了与MySQL数据库的连接，并创建了一个PreparedStatement对象，用于执行查询操作。接着，我们执行查询，并处理结果集。最后，在finally块中关闭了ResultSet、PreparedStatement和Connection对象。</p>
<p>​		通过JDBC连接MySQL数据库查询数据是Java开发中的常见操作。为了保证程序的健壮性和可靠性，我们应该在finally块中关闭资源。</p>
<p>##JVM处理异常的机制</p>
<p>​		JVM会在抛出异常时创建一个异常对象，并将其传递给方法调用栈中的第一个catch块。如果没有catch块捕获这个异常，JVM会终止当前线程并打印异常堆栈信息。</p>
<p>​		当程序执行到可能会抛出异常的代码时，如果发生了异常，JVM会创建一个异常对象，并将其传递给方法调用栈中的第一个catch块。这个异常对象包含了异常的类型、消息和堆栈信息等信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;An exception occurred: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，我们试图对10进行除以0的操作，这会导致一个ArithmeticException异常被抛出。JVM会创建一个ArithmeticException对象，并将其传递给try块中的catch块。</p>
<p>​		如果没有catch块捕获这个异常，JVM会终止当前线程并打印异常堆栈信息。异常堆栈信息包含了异常的类型、消息和堆栈跟踪信息等信息，用于帮助开发人员定位和解决问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们没有使用try-catch语句来捕获ArithmeticException异常，因此JVM会终止当前线程并打印异常堆栈信息。</p>
<p>​		JVM在抛出异常时会创建一个异常对象，并将其传递给方法调用栈中的第一个catch块。如果没有catch块捕获这个异常，JVM会终止当前线程并打印异常堆栈信息。因此，在编写Java程序时，我们应该合理地使用异常机制，以保证程序的健壮性和可靠性。</p>
<p>##异常是否耗时？</p>
<blockquote>
<p>异常本身不会耗时，但是在异常处理过程中，可能需要进行一些额外的操作，例如记录日志、资源清理等，这些操作可能会耗费时间。</p>
</blockquote>
<p>##为什么会耗时？</p>
<p>​		异常处理过程中可能需要进行一些额外的操作，例如记录日志、资源清理等，这些操作可能会耗费时间。另外，如果异常处理不当，可能会导致性能问题。</p>
<p>​		在Java中，异常本身不会耗时，它只是一个对象，包含了异常的类型、消息和堆栈信息等信息。但是，在异常处理过程中，可能需要进行一些额外的操作，例如记录日志、资源清理等，这些操作可能会耗费时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 记录日志</span></span><br><span class="line">            System.out.println(<span class="string">&quot;An exception occurred: &quot;</span> + e.getMessage());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 清理资源</span></span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，我们使用try-catch语句来捕获ArithmeticException异常，并在catch块中记录日志和清理资源。这些操作都可能会耗费时间。</p>
<p>​		如果程序中存在大量的异常处理逻辑，这些额外的操作可能会对程序的性能产生影响。因此，在编写Java程序时，我们应该尽量减少异常的发生，并合理地处理异常，以保证程序的性能和可靠性。</p>
<p>​		总之，异常本身不会耗时，但是在异常处理过程中，可能需要进行一些额外的操作，例如记录日志、资源清理等，这些操作可能会耗费时间。因此，在编写Java程序时，我们应该合理地使用异常机制，以保证程序的性能和可靠性。</p>
<h1><span id="反射机制">反射机制</span></h1>
<p>##了解反射机制的概念和原理</p>
<p>###反射机制是什么？</p>
<p>​		反射机制是指程序在运行时动态地获取自身信息并进行操作的能力。简单来说，就是程序在运行时能够访问自己的属性和方法，并且可以通过这些属性和方法对自己进行修改和操作。</p>
<p>###反射机制的原理是什么？</p>
<p>​		反射机制的原理是通过获取程序中的类型信息，进而访问该类型的属性和方法。在Java中，可以使用Class类来获取类型信息，通过该类的方法可以访问类型的属性和方法，并且可以通过反射机制来创建对象、调用方法、获取属性等。</p>
<p>###反射机制的优缺点是什么？</p>
<p>​		反射机制的优点是可以让程序在运行时动态地获取类型信息，从而可以实现更加灵活的编程。例如，可以在运行时动态地创建对象、调用方法等。反射机制还可以用于实现框架和工具，例如JUnit测试框架和Spring框架。</p>
<p>​		反射机制的缺点是会降低程序的性能，因为反射调用需要额外的时间来获取类型信息和执行调用操作。此外，反射机制也会破坏代码的封装性和可读性，因为通过反射可以访问私有属性和方法，从而破坏了程序的封装性。</p>
<p>##掌握反射机制的基础知识</p>
<p>###反射机制的主要类和接口</p>
<p>反射机制在Java中主要涉及以下类和接口：</p>
<ol>
<li class="lvl-3">
<p>Class类：表示一个类的类型，通过该类可以获取类的信息和实例化对象。</p>
</li>
<li class="lvl-3">
<p>Constructor类：表示一个类的构造函数，通过该类可以创建对象。</p>
</li>
<li class="lvl-3">
<p>Method类：表示一个类的方法，通过该类可以调用对象的方法。</p>
</li>
<li class="lvl-3">
<p>Field类：表示一个类的属性，通过该类可以获取和设置对象的属性。</p>
</li>
</ol>
<p>###如何获取Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>); <span class="comment">// 通过类的全限定名获取Class对象</span></span><br><span class="line">Class&lt;?&gt; cls2 = String.class; <span class="comment">// 通过类字面常量获取Class对象</span></span><br><span class="line">Class&lt;?&gt; cls3 = <span class="keyword">new</span> <span class="title class_">String</span>().getClass(); <span class="comment">// 通过对象的getClass()方法获取Class对象</span></span><br></pre></td></tr></table></figure>
<p>###如何获取类的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取类名、包名、父类信息和接口信息</span></span><br><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> cls.getName();</span><br><span class="line"><span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> cls.getPackage().getName();</span><br><span class="line">Class&lt;?&gt; superClass = cls.getSuperclass();</span><br><span class="line">Class&lt;?&gt;[] interfaces = cls.getInterfaces();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取构造函数信息</span></span><br><span class="line">Constructor&lt;?&gt;[] constructors = cls.getConstructors();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取方法信息</span></span><br><span class="line">Method[] methods = cls.getMethods();</span><br><span class="line">Method[] declaredMethods = cls.getDeclaredMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性信息</span></span><br><span class="line">Field[] fields = cls.getFields();</span><br><span class="line">Field[] declaredFields = cls.getDeclaredFields();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>###如何操作对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> (String) cls.newInstance(); <span class="comment">// 使用无参构造函数创建对象</span></span><br><span class="line">Constructor&lt;?&gt; constructor = cls.getConstructor(String.class); <span class="comment">// 获取有参构造函数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> (String) constructor.newInstance(<span class="string">&quot;Hello World&quot;</span>); <span class="comment">// 使用有参构造函数创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;length&quot;</span>); <span class="comment">// 获取方法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> (<span class="type">int</span>) method.invoke(str); <span class="comment">// 调用方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取和设置属性</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> cls.getDeclaredField(<span class="string">&quot;value&quot;</span>); <span class="comment">// 获取属性</span></span><br><span class="line">field.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置属性可访问</span></span><br><span class="line"><span class="type">char</span>[] value = (<span class="type">char</span>[]) field.get(str); <span class="comment">// 获取属性值</span></span><br><span class="line">field.set(str, <span class="string">&quot;Hello World&quot;</span>.toCharArray()); <span class="comment">// 设置属性值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>##深入了解反射机制的实现细节</p>
<p>###反射机制的类加载过程</p>
<p>​		Java程序中的类加载过程通常分为三个阶段：加载、链接和初始化。在反射机制中，获取Class对象的过程涉及到类加载的第一个阶段。</p>
<p>​		当使用Class.forName()方法获取Class对象时，会触发类的加载过程。具体来说，类加载器会根据类的全限定名查找类文件，并将其字节码加载到内存中。加载完成后，会生成一个对应的Class对象，该对象包含了该类的类型信息。</p>
<p>###反射机制的性能影响</p>
<p>反射机制的使用会带来一定的性能影响，主要表现在以下方面：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>反射调用需要额外的时间来获取类型信息和执行调用操作，因此比直接调用方法或访问属性要慢。</p>
</li>
<li class="lvl-2">
<p>反射调用无法进行编译期优化，因此会导致代码执行速度更慢。</p>
</li>
<li class="lvl-2">
<p>反射调用可能会破坏代码的封装性和可读性。</p>
</li>
</ul>
<p>###反射机制与泛型的关系</p>
<p>反射机制可以与泛型相结合使用，可以通过反射机制获取泛型信息并进行操作。例如，可以使用ParameterizedType接口获取泛型类型信息，使用TypeVariable接口获取类型变量信息。下面是一个获取泛型信息的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericClass</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> GenericClass.class.getField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Type</span> <span class="variable">type</span> <span class="operator">=</span> field.getGenericType();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType) &#123;</span><br><span class="line">            <span class="type">ParameterizedType</span> <span class="variable">paramType</span> <span class="operator">=</span> (ParameterizedType) type;</span><br><span class="line">            Type[] typeArgs = paramType.getActualTypeArguments();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (Type typeArg : typeArgs) &#123;</span><br><span class="line">                System.out.println(typeArg.getTypeName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：<code>T</code>。</p>
<p>###反射机制的安全问题</p>
<p>反射机制的使用可能会带来一些安全问题，因为反射调用可以绕过访问控制机制，从而访问私有属性和方法。为了避免这种情况，可以使用setAccessible()方法将属性和方法设置为可访问的，但这样会降低程序的安全性。因此，在使用反射机制时需要谨慎处理，遵循安全编程的原则。</p>
<p>下面是一个使用反射机制访问私有属性的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Tom&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Person.class.getDeclaredField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) field.get(person);</span><br><span class="line"></span><br><span class="line">        System.out.println(name); <span class="comment">// 输出结果为：Tom</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上述示例代码中，通过反射机制获取了Person类的私有属性name，并将其值设置为可访问的，从而可以访问私有属性并获取其值。但这种做法会破坏类的封装性和安全性，因此在实际开发中应该尽量避免这种做法。</p>
<p>​		为了避免这种安全问题，可以使用安全管理器（SecurityManager）来控制反射调用的权限。例如，可以定义一个安全策略类，对反射调用进行限制，只允许调用指定的方法和属性。</p>
<p>下面是一个安全策略类的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySecurityManager</span> <span class="keyword">extends</span> <span class="title class_">SecurityManager</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkMemberAccess</span><span class="params">(Class&lt;?&gt; clazz, <span class="type">int</span> which)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (clazz.getName().equals(<span class="string">&quot;com.example.Person&quot;</span>) &amp;&amp; which == Member.PUBLIC) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.setSecurityManager(<span class="keyword">new</span> <span class="title class_">MySecurityManager</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        System.out.println(person.name); <span class="comment">// 抛出SecurityException异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上述示例代码中，定义了一个安全策略类MySecurityManager，并重写了checkMemberAccess()方法来控制反射调用的权限。当调用Person类的公共成员时，如果没有通过权限检查，则会抛出SecurityException异常。在main()方法中，通过System.setSecurityManager()方法设置了安全管理器，从而对反射调用进行限制。</p>
<p>​		除了使用安全管理器来控制反射调用的权限之外，还可以使用访问控制（Access Control）来保护Java应用程序的安全。</p>
<p>​		访问控制是指Java语言提供的一种安全机制，它可以控制Java应用程序的访问权限，包括文件系统、网络连接、系统属性等。访问控制是建立在Java安全体系结构之上的，其核心思想是基于代码来源的安全机制，也就是说，只有来自可信任源的代码才能访问受保护资源。</p>
<p>​		Java的访问控制是通过Java安全管理器（SecurityManager）实现的，它是Java安全体系结构中的一部分。安全管理器是一个Java类，它可以拦截Java应用程序的系统访问请求，并检查该请求是否符合安全策略。安全策略是一个规则集合，它定义了哪些操作是安全的，哪些操作是危险的，以及如何控制这些操作。</p>
<p>下面是一个使用访问控制来保护Java应用程序安全的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">sm</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (sm != <span class="literal">null</span>) &#123;</span><br><span class="line">            sm.checkPermission(<span class="keyword">new</span> <span class="title class_">FilePermission</span>(<span class="string">&quot;&lt;&lt;ALL FILES&gt;&gt;&quot;</span>, <span class="string">&quot;read&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.name = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">        System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上述示例代码中，首先通过System.getSecurityManager()方法获取系统安全管理器，并调用其checkPermission()方法来检查文件系统的读取权限。如果没有该权限，则会抛出SecurityException异常。接着创建一个Person对象，并将其name属性设置为&quot;Tom&quot;，最后输出name属性的值。由于没有对Person类进行任何反射操作，因此不存在任何安全问题。</p>
<p>##学习反射机制的高级应用</p>
<p>###如何使用反射机制实现动态代理</p>
<p>​		动态代理是一种常用的设计模式，它允许在运行时动态地创建代理对象，从而实现对原对象的间接访问。Java中的动态代理机制是通过反射机制实现的，主要涉及到两个类：Proxy和InvocationHandler。</p>
<p>​		Proxy类是Java提供的一个用于创建代理对象的工具类，它有两个常用的方法：newProxyInstance()和isProxyClass()。其中，newProxyInstance()方法用于创建代理对象，其参数包括：类加载器、实现的接口列表和InvocationHandler接口实现类对象。InvocationHandler接口是用于处理代理对象上的方法调用的接口，通常将代理对象的方法调用转发给另一个对象。</p>
<p>下面是一个使用反射机制实现动态代理的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, I am a student.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyInvocationHandler</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Before calling &quot;</span> + method.getName() + <span class="string">&quot; method.&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;After calling &quot;</span> + method.getName() + <span class="string">&quot; method.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">MyInvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyInvocationHandler</span>(student);</span><br><span class="line">        <span class="type">Person</span> <span class="variable">proxy</span> <span class="operator">=</span> (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Person.class &#125;, handler);</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上述示例代码中，首先定义了一个Person接口和其实现类Student。然后定义了一个实现了InvocationHandler接口的MyInvocationHandler类，用于处理代理对象上的方法调用。在Main类中，首先创建一个Student对象，并将其传递给MyInvocationHandler的构造函数。接着使用Proxy类的newProxyInstance()方法创建一个代理对象，并将其转换为Person类型。最后调用代理对象的sayHello()方法，此时代理对象会将方法调用转发给MyInvocationHandler对象进行处理。</p>
<p>###如何使用反射机制实现注解处理器</p>
<p>​		<code>注解处理器</code>是Java提供的一种用于处理注解的机制，它可以通过反射机制获取类、方法、字段等元素上的注解，并对其进行处理。Java中的注解处理器是通过编写注解处理器类来实现的，其核心就是利用反射机制获取注解信息。</p>
<p>下面是一个使用反射机制实现注解处理器的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="meta">@MyAnnotation(&quot;Hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyAnnotationProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processAnnotations</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            <span class="type">MyAnnotation</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(MyAnnotation.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Method &quot;</span> + method.getName() + <span class="string">&quot; has annotation value: &quot;</span> + annotation.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        Class&lt;?&gt; clazz = myClass.getClass();</span><br><span class="line">        <span class="type">MyAnnotationProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyAnnotationProcessor</span>();</span><br><span class="line">        processor.processAnnotations(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>​		在上述示例代码中，首先定义了一个MyAnnotation注解，并在MyClass的sayHello()方法上使用了该注解。然后定义了一个处理注解的MyAnnotationProcessor类，该类可以处理MyAnnotation注解，并输出注解信息。</p>
<p>​		在MyAnnotationProcessor类的processAnnotations()方法中，首先获取MyClass类的Class对象，然后使用getDeclaredMethods()方法获取所有声明的方法，接着使用getAnnotation()方法获取每个方法上的注解，并输出注解信息。在Main类中，首先创建了一个MyClass对象，并获取其Class对象。接着创建一个MyAnnotationProcessor对象，并调用其processAnnotations()方法输出注解信息。</p>
<p>​		通过反射机制，我们可以在运行时获取注解的信息并执行相应的操作。注解处理器可以帮助我们实现许多功能，如自定义注解、注解解析器、自动化代码生成等。但是，在使用注解处理器时也需要注意性能问题和安全问题。</p>
<p>###如何使用反射机制实现对象池</p>
<p>对象池是一种常用的设计模式，它可以避免频繁创建和销毁对象的开销，提高程序的性能。Java中的对象池可以通过反射机制来实现，主要涉及到两个类：Array.newInstance()和Class.newInstance()。</p>
<p>Array.newInstance()方法可以创建指定类型和长度的数组对象，而Class.newInstance()方法可以创建指定类的实例对象。使用这两个方法可以实现对象池中对象的创建和回收。</p>
<p>下面是一个使用反射机制实现对象池的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectPool</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; pool;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectPool</span><span class="params">(Class&lt;T&gt; clazz, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">        pool = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;T&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            pool.add(createObject());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">borrowObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pool.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">object</span> <span class="operator">=</span> pool.remove(pool.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> object;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnObject</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        pool.add(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T <span class="title function_">createObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello, I am a student.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ObjectPool&lt;Student&gt; pool = <span class="keyword">new</span> <span class="title class_">ObjectPool</span>&lt;Student&gt;(Student.class, <span class="number">3</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> pool.borrowObject();</span><br><span class="line">        s1.sayHello();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> pool.borrowObject();</span><br><span class="line">        s2.sayHello();</span><br><span class="line">        pool.returnObject(s2);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> pool.borrowObject();</span><br><span class="line">        s3.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述示例代码中，首先定义了一个ObjectPool泛型类，用于存储对象池中的对象。在ObjectPool类的构造函数中，使用反射机制创建clazz类型的对象，并添加到pool列表中。在borrowObject()方法中，如果pool列表不为空，则从中取出一个对象并返回；否则调用createObject()方法创建一个新的对象并返回。在returnObject()方法中，将对象添加到pool列表中。在createObject()方法中，使用反射机制创建clazz类型的对象。</p>
<p>在Main类中，首先创建一个Student类型的对象池，然后从中借用一个对象并调用其sayHello()方法，接着从中借用另一个对象并调用其sayHello()方法，最后将第二个对象归还给对象池，并再次从对象池中借用一个对象并调用其sayHello()方法。</p>
<p>###如何使用反射机制实现模板方法</p>
<p>​		模板方法是一种常用的设计模式，它定义了一个算法的框架，将算法中的具体步骤延迟到子类中实现。在Java中，可以使用反射机制实现模板方法，主要涉及到两个类：Class.getMethod()和Method.invoke()。</p>
<p>​		Class.getMethod()方法可以获取指定方法名和参数类型的Method对象，而Method.invoke()方法可以调用指定对象的指定方法。使用这两个方法可以实现模板方法中的具体步骤。</p>
<p>下面是一个使用反射机制实现模板方法的示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        drawShape();</span><br><span class="line">        drawLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawLine</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw a line.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw a rectangle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">drawShape</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw a circle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">shape</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Circle</span>();</span><br><span class="line">        Class&lt;?&gt; clazz = shape.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">drawShapeMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;drawShape&quot;</span>);</span><br><span class="line">        drawShapeMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        drawShapeMethod.invoke(shape);</span><br><span class="line">        shape.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上述示例代码中，首先定义了一个Shape抽象类，其中包含了一个final的draw()方法和一个抽象的drawShape()方法和一个默认的drawLine()方法。在draw()方法中，调用了drawShape()和drawLine()方法。在子类中实现drawShape()方法即可实现具体的绘制图形操作。</p>
<p>​		在Main类中，首先创建了一个Circle对象，并获取其Class对象。接着使用Class.getDeclaredMethod()方法获取drawShape()方法的Method对象，并使用Method.setAccessible()方法将其访问权限设置为可访问。然后使用Method.invoke()方法调用drawShape()方法实现具体的绘制操作。最后调用shape对象的draw()方法实现模板方法的调用。</p>
<p>​		通过反射机制，我们可以在运行时获取对象的信息并执行相应的操作。反射机制可以帮助我们实现许多复杂的功能，如动态代理、注解处理器、对象池、模板方法等。但是，反射机制也会对程序的性能产生一定的影响，因此在使用反射机制时需要注意性能问题。同时，由于反射机制可以访问和修改对象的私有属性和方法，因此也可能存在一些安全问题，需要在使用时注意防范。</p>
<p>##实践反射机制的应用案例</p>
<p>###反射机制在框架和库中的应用</p>
<p>​		在框架和库中，反射机制经常被用来实现插件化、AOP（面向切面编程）、ORM（对象关系映射）等功能。例如，在Spring框架中，通过反射机制实现了依赖注入、AOP等核心功能。在Hibernate框架中，通过反射机制实现了ORM的功能。</p>
<ol>
<li class="lvl-3">
<p>Spring框架</p>
</li>
</ol>
<p>Spring框架是一个非常流行的Java企业级开发框架，提供了多种常用的开发功能，如依赖注入、AOP、事务管理等。其中，反射机制在Spring框架中的应用非常广泛。</p>
<p>（1）依赖注入</p>
<p>Spring框架的核心之一就是依赖注入（DI）功能。通过依赖注入，Spring框架可以将各个组件之间的依赖关系交给容器来维护，使得组件之间解耦。依赖注入的实现依赖于反射机制，通过反射机制，Spring框架可以动态地创建Bean对象并注入到其他Bean中。</p>
<p>下面是一个简单的示例，通过反射机制实现依赖注入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMyService</span><span class="params">(MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        myService.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyService do something.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyController</span> <span class="variable">myController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyController</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过反射机制动态创建MyService对象</span></span><br><span class="line">        <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyService</span>();</span><br><span class="line">        Class&lt;?&gt; clazz = MyService.class;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">            myController.setMyService((MyService)object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        myController.doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的示例中，我们首先创建了一个MyController对象，然后通过反射机制动态地创建了一个MyService对象，并将其注入到MyController对象中。最后，调用MyController对象的doSomething()方法，可以看到MyService对象的doSomething()方法被调用了。</p>
<p>（2）AOP</p>
<p>​		AOP（面向切面编程）是Spring框架的另一个核心功能。通过AOP，可以将通用的代码（如日志、事务、安全控制等）与业务逻辑代码分离，使得代码更加简洁、易于维护。在Spring框架中，AOP的实现依赖于反射机制。</p>
<p>下面是一个简单的示例，通过反射机制实现AOP：</p>
<p>首先定义一个接口Subject：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后实现该接口的具体实现类RealSubject：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;RealSubject request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着定义一个代理类ProxySubject，该类通过反射机制在实现Subject接口的方法调用前后进行一些额外的操作：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxySubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Subject subject;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxySubject</span><span class="params">(Subject subject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">before</span> <span class="operator">=</span> subject.getClass().getMethod(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">            before.invoke(subject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        subject.request();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">after</span> <span class="operator">=</span> subject.getClass().getMethod(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">            after.invoke(subject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在上面的代码中，首先通过反射机制获取代理对象实际所代表的对象的Class对象，然后获取before和after方法，并调用它们。这样，我们就实现了在实现Subject接口的方法调用前后进行一些额外的操作。</p>
<p>最后，我们可以通过如下代码测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Subject</span> <span class="variable">realSubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line"><span class="type">Subject</span> <span class="variable">proxySubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxySubject</span>(realSubject);</span><br><span class="line">proxySubject.request();</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">RealSubject request</span><br></pre></td></tr></table></figure>
<p>###反射机制在开源项目中的应用</p>
<p>​		在开源项目中，反射机制也经常被使用。例如，在JUnit中，通过反射机制实现了自动化测试。在Log4j中，通过反射机制实现了配置文件的自动解析。在Apache Struts框架中，通过反射机制实现了Web请求的处理。</p>
<p>###如何编写自己的反射工具</p>
<p>​		如果需要编写自己的反射工具，可以参考Java提供的反射API，使用Class、Method、Field等类来获取类、方法、字段等信息，并使用Constructor、Method等类来创建对象或调用方法。可以使用反射机制实现一些常见的工具，如对象池、动态代理、注解处理器等。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对象池</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectPool</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; pool;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxPoolSize;</span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectPool</span><span class="params">(<span class="type">int</span> initialPoolSize, <span class="type">int</span> maxPoolSize, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pool = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(initialPoolSize);</span><br><span class="line">        <span class="built_in">this</span>.maxPoolSize = maxPoolSize;</span><br><span class="line">        <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; initialPoolSize; i++) &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> createNewObject();</span><br><span class="line">            pool.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title function_">acquireObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (pool.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pool.size() &lt; maxPoolSize) &#123;</span><br><span class="line">                <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> createNewObject();</span><br><span class="line">                pool.add(obj);</span><br><span class="line">                <span class="keyword">return</span> obj;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Pool is full&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> pool.remove(pool.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">releaseObject</span><span class="params">(T obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">null</span>) &#123;</span><br><span class="line">            pool.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T <span class="title function_">createNewObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;T&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> constructor.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在这个对象池中，我们使用了泛型来支持任意类型的对象池，同时使用了反射机制来创建新的对象。在构造函数中，我们需要传入对象池的最大容量、对象类型的Class对象，以及对象池的初始容量。在创建对象时，我们首先尝试从对象池中获取对象，如果对象池为空，则需要创建一个新的对象。而创建新对象的过程则是通过反射机制实现的，我们使用Class对象的getDeclaredConstructor()方法获取类的默认构造方法，然后调用newInstance()方法创建新的对象。最后，我们使用同步方法来保证对象池的线程安全性。</p>
<p>可以通过以下代码测试这个对象池的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ObjectPool&lt;Connection&gt; pool = <span class="keyword">new</span> <span class="title class_">ObjectPool</span>&lt;&gt;(<span class="number">3</span>, <span class="number">5</span>, Connection.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn1</span> <span class="operator">=</span> pool.acquireObject();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn2</span> <span class="operator">=</span> pool.acquireObject();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn3</span> <span class="operator">=</span> pool.acquireObject();</span><br><span class="line"></span><br><span class="line">        pool.releaseObject(conn3);</span><br><span class="line">        pool.releaseObject(conn2);</span><br><span class="line">        pool.releaseObject(conn1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn4</span> <span class="operator">=</span> pool.acquireObject();</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn5</span> <span class="operator">=</span> pool.acquireObject();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;conn1 == conn4 ? &quot;</span> + (conn1 == conn4)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;conn2 == conn5 ? &quot;</span> + (conn2 == conn5)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在这个示例中，我们使用了一个Connection类来模拟对象池中的对象类型，首先创建了3个对象放入对象池中，然后分别获取并释放了这3个对象。在获取新的对象时，我们可以看到如果对象池中有对象，则会从对象池中获取，否则会创建新的对象。最后，我们通过比较对象的引用来验证，新创建的对象是从对象池中获取的还是通过构造方法创建的。</p>
<p>​		在代码中，我们使用了System.identityHashCode()方法来获取对象的哈希码，然后比较两个对象的哈希码是否相等。如果两个对象的哈希码相等，说明它们是同一个对象，即新创建的对象是从对象池中获取的。如果两个对象的哈希码不相等，说明它们是不同的对象，即新创建的对象是通过构造方法创建的。</p>
<p>​		需要注意的是，通过比较对象引用来验证对象是否来自对象池并不是绝对可靠的方法，因为Java中存在一些情况下，同一个对象的哈希码可能会发生变化。因此，在实际应用中，我们需要根据具体的情况来选择合适的验证方法。</p>
<p>###如何使用反射机制提高代码的灵活性和可扩展性</p>
<p>​		使用反射机制可以提高代码的灵活性和可扩展性。例如，在框架中使用反射机制可以实现插件化，让用户可以动态地添加、删除、替换组件。在ORM框架中，使用反射机制可以将Java对象和数据库表进行映射，从而减少代码的重复性。在实现动态代理、注解处理器等功能时，使用反射机制可以提高代码的复用性和可读性，减少重复的代码。</p>
<h1><span id="spi机制">SPI机制</span></h1>
<p>##了解SPI机制的概念和原理</p>
<p>###SPI是什么？</p>
<p>​		SPI（Service Provider Interface）是Java提供的一种服务发现机制，它允许在运行时动态地加载实现某个特定接口的类。SPI主要用于框架和库的扩展，它通过让框架在运行时动态加载实现了某个接口的类来达到扩展的目的。</p>
<p>###SPI的原理是什么？</p>
<p>​		SPI的原理是基于Java的ClassLoader机制实现的。在Java中，类的加载是由ClassLoader负责的。ClassLoader可以从不同的源加载类，例如从本地文件系统、网络、JAR文件或其他任何资源中加载类。SPI将服务的接口定义放在一个模块中，服务的实现放在另外的模块中，并通过ClassLoader动态地加载实现类。</p>
<p>###SPI机制的优缺点是什么？</p>
<p>​		SPI机制的优点是灵活性高，可以通过简单地添加或替换实现类来扩展应用程序的功能。同时，SPI机制也具有一定的可扩展性和可维护性，因为它将应用程序和具体实现解耦，实现了高内聚、低耦合的目标。</p>
<p>​		SPI机制的缺点是需要程序员手动编写实现类并在META-INF/services目录下创建配置文件，这样会增加代码量和工作量。同时，SPI机制也存在安全风险，因为实现类是由外部提供的，可能存在恶意实现类的风险。</p>
<h3><span id="实现spi机制">实现SPI机制</span></h3>
<h3><span id="使用spi机制的步骤">使用SPI机制的步骤</span></h3>
<ol>
<li class="lvl-3">
<p>定义接口：定义一个接口，声明一些抽象方法。</p>
</li>
<li class="lvl-3">
<p>创建实现类：创建一个或多个实现该接口的类。</p>
</li>
<li class="lvl-3">
<p>配置文件：在META-INF/services/目录下创建一个以接口全限定名为命名的文件，内容为实现类的全限定名，每行一个。</p>
</li>
<li class="lvl-3">
<p>加载配置：使用ServiceLoader类加载配置文件并解析出实现类。</p>
</li>
</ol>
<h3><span id="注意事项">注意事项</span></h3>
<ol>
<li class="lvl-3">
<p>配置文件必须放在META-INF/services/目录下。</p>
</li>
<li class="lvl-3">
<p>配置文件的文件名必须为接口的全限定名。</p>
</li>
<li class="lvl-3">
<p>配置文件中每行只能有一个实现类的全限定名。</p>
</li>
<li class="lvl-3">
<p>实现类必须有一个无参构造函数。</p>
</li>
<li class="lvl-3">
<p>在实现类中可以通过@AutoService注解自动生成配置文件，但需要引入google-auto-service库。</p>
</li>
</ol>
<p>下面我们通过一个示例来演示如何使用SPI机制。</p>
<p>假设我们有一个接口Animal和两个实现类Cat和Dog，我们希望通过SPI机制来加载实现类。</p>
<ol>
<li class="lvl-3">
<p>定义接口</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>创建实现类</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat says hello.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Dog says hello.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>配置文件</p>
</li>
</ol>
<p>在src/main/resources/META-INF/services/目录下创建一个名为com.example.Animal的文件，内容为实现类的全限定名，每行一个。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Copy</span> codecom.example.Cat</span><br><span class="line">com.example.Dog</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>加载配置</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;Animal&gt; loader = ServiceLoader.load(Animal.class);</span><br><span class="line">        <span class="keyword">for</span> (Animal animal : loader) &#123;</span><br><span class="line">            animal.sayHello();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Cat</span> says hello.</span><br><span class="line">Dog says hello.</span><br></pre></td></tr></table></figure>
<p>可以看到，我们使用SPI机制成功加载了实现类，并调用了sayHello()方法。</p>
<p>SPI机制的优点在于可以通过配置文件来动态指定实现类，从而实现灵活的扩展和替换。缺点在于实现类必须有一个无参构造函数，且无法传递参数。</p>
<p>##掌握SPI机制的使用方式</p>
<p>###SPI机制的主要接口和类</p>
<p>​		在Java中，SPI（Service Provider Interface）是一种面向接口编程的方式，它是一组标准的Java API，用于在运行时发现和加载实现某个接口的服务提供者。</p>
<p>SPI机制的主要接口和类包括：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>ServiceLoader类：该类是Java提供的用于加载和查找服务提供者实现的工具类。它通过读取类路径下的META-INF/services目录中的配置文件，自动加载并实例化配置文件中指定的服务提供者实现类。</p>
</li>
<li class="lvl-2">
<p>Provider接口：该接口是服务提供者实现类需要实现的接口。它通常是一个空接口，用于标识服务提供者实现类的身份。</p>
</li>
</ul>
<p>###如何创建和配置SPI实现</p>
<p>要创建和配置SPI实现，需要进行以下步骤：</p>
<ol>
<li class="lvl-3">
<p>创建一个服务接口：定义一个服务接口，用于描述该服务的功能和方法。例如，定义一个数据库访问接口：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DatabaseAccess</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>创建一个服务提供者实现类：实现服务接口，并在该实现类中添加一个名为<code>META-INF/services/服务接口全限定名</code>的文件。该文件中包含了该服务提供者实现类的全限定名。例如，创建一个MySQL数据库访问服务提供者实现类：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySQLDatabaseAccess</span> <span class="keyword">implements</span> <span class="title class_">DatabaseAccess</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Connect to MySQL database</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">disconnect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Disconnect from MySQL database</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isConnected</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// Check if connected to MySQL database</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>在该实现类的<code>META-INF/services/服务接口全限定名</code>文件中添加以下内容：</p>
</li>
</ol>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">com.example.DatabaseAccess</span><br><span class="line">com.example.MySQLDatabaseAccess</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>使用ServiceLoader类加载服务提供者实现类：使用ServiceLoader类加载服务提供者实现类，可以通过以下代码实现：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceLoader&lt;DatabaseAccess&gt; loader = ServiceLoader.load(DatabaseAccess.class);</span><br><span class="line"><span class="keyword">for</span> (DatabaseAccess databaseAccess : loader) &#123;</span><br><span class="line">    <span class="comment">// Do something with databaseAccess</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3><span id="如何获取spi实现">如何获取SPI实现</span></h3>
<p>要获取SPI实现，只需要使用ServiceLoader类即可。ServiceLoader类提供了以下方法：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>load(Class&lt;S&gt; service)</code>：加载指定接口的服务提供者实现。</p>
</li>
<li class="lvl-2">
<p><code>reload()</code>：重新加载所有的服务提供者实现。</p>
</li>
<li class="lvl-2">
<p><code>iterator()</code>：获取服务提供者实现的迭代器。</p>
</li>
</ul>
<p>以下代码展示了如何获取MySQL数据库访问服务提供者实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceLoader&lt;DatabaseAccess&gt; loader = ServiceLoader.load(DatabaseAccess.class);</span><br><span class="line"><span class="keyword">for</span> (DatabaseAccess databaseAccess : loader) &#123;</span><br><span class="line">    <span class="keyword">if</span> (databaseAccess <span class="keyword">instanceof</span> MySQLDatabaseAccess) &#123;</span><br><span class="line">        <span class="type">MySQLDatabaseAccess</span> <span class="variable">mySQLDatabaseAccess</span> <span class="operator">=</span> (MySQLDatabaseAccess) databaseAccess;</span><br><span class="line">        mySQLDatabaseAccess.connect();</span><br><span class="line">        <span class="comment">// Do something with mySQLDatabaseAccess</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码，ServiceLoader类加载了DatabaseAccess接口的所有实现类，然后使用forEach()方法遍历所有实现类，并调用其方法进行数据库操作。</p>
<p>SPI机制在实际项目中的应用非常广泛，常见的应用场景有：</p>
<ol>
<li class="lvl-3">
<p>日志框架。例如SLF4J、Log4j等都使用了SPI机制，让用户自由选择使用不同的实现库。</p>
</li>
<li class="lvl-3">
<p>数据库访问框架。例如Mybatis、Hibernate等都使用了SPI机制，让用户自由选择使用不同的数据库驱动。</p>
</li>
<li class="lvl-3">
<p>RPC框架。例如Dubbo、Motan等都使用了SPI机制，让用户自由选择使用不同的序列化协议、负载均衡算法等。</p>
</li>
<li class="lvl-3">
<p>容器框架。例如Spring、Guice等都使用了SPI机制，让用户自由选择使用不同的依赖注入、AOP等实现。</p>
</li>
</ol>
<p>总之，SPI机制在Java开发中有着广泛的应用，可以让应用程序更加灵活、可扩展。但是，需要注意的是，SPI机制的实现需要遵循一定的规范，否则可能会引发一些问题。同时，SPI机制也有一些缺陷，例如无法在运行时动态添加实现类等，需要开发者在实际应用中进行权衡和选择。</p>
<p>##深入了解SPI机制的实现细节</p>
<p>###SPI实现的加载过程</p>
<p>​		SPI机制的实现需要遵循一定的规则，主要是在META-INF/services目录下创建以接口的全限定名命名的文件，并将实现类的全限定名按行写入该文件。例如，如果我们有一个名为com.example.MyService的接口，那么在META-INF/services目录下应该创建一个名为com.example.MyService的文件，并将实现类的全限定名写入该文件。</p>
<p>SPI机制的加载过程主要涉及以下步骤：</p>
<ol>
<li class="lvl-3">
<p>当应用程序调用ServiceLoader.load(service)方法时，ServiceLoader类会通过当前线程的上下文类加载器（context class loader）来加载服务提供者配置文件。</p>
</li>
<li class="lvl-3">
<p>ServiceLoader类会将服务提供者配置文件中的每一行作为一个服务实现类的全限定名，使用类加载器加载并实例化这些类，最后返回实现了该服务接口的所有对象的集合（Lazy Loading）。</p>
</li>
<li class="lvl-3">
<p>当应用程序需要使用服务时，可以通过ServiceLoader.iterator()方法获取一个迭代器，遍历并使用服务提供者的实现。</p>
</li>
</ol>
<p>###如何在META-INF/services目录下注册SPI实现</p>
<p>​		在META-INF/services目录下注册SPI实现需要创建以接口的全限定名命名的文件，并将实现类的全限定名按行写入该文件。例如，如果我们有一个名为com.example.MyService的接口，那么在META-INF/services目录下应该创建一个名为com.example.MyService的文件，并将实现类的全限定名写入该文件。</p>
<p>​		以DatabaseAccess接口为例，我们可以在META-INF/services目录下创建名为com.example.DatabaseAccess的文件，并将实现类的全限定名按行写入该文件，如下所示：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">com.example.DatabaseAccessImpl1</span><br><span class="line">com.example.DatabaseAccessImpl2</span><br></pre></td></tr></table></figure>
<p>###如何使用SPI机制加载不同的实现</p>
<p>​		使用SPI机制加载不同的实现可以通过以下代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceLoader&lt;DatabaseAccess&gt; serviceLoader = ServiceLoader.load(DatabaseAccess.class);</span><br><span class="line"><span class="keyword">for</span> (DatabaseAccess databaseAccess : serviceLoader) &#123;</span><br><span class="line">    databaseAccess.queryData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		通过ServiceLoader.load(DatabaseAccess.class)方法加载指定接口的实现，并通过迭代器遍历获取实现对象，即可使用不同的实现。</p>
<p>###如何避免SPI机制的安全问题</p>
<p>​		SPI机制存在安全问题，因为SPI的实现类是由应用程序的上下文类加载器加载的，而如果存在恶意的SPI实现，它可能会通过修改ClassPath的方式来影响应用程序。为了避免SPI机制的安全问题，可以考虑以下几个方面：</p>
<ol>
<li class="lvl-3">
<p>验证实现类的合法性：SPI实现类必须是提供者定义的、公开可见的、具有无参构造函数并实现了SPI接口，如果不符合这些条件则应该抛出异常或忽略掉该实现类。</p>
</li>
<li class="lvl-3">
<p>防止恶意实现类：SPI实现类在被加载时，其构造函数可能会被执行，因此应该避免在构造函数中执行任何具有副作用的代码，以防止恶意实现类的攻击。</p>
</li>
<li class="lvl-3">
<p>使用安全沙箱机制：可以使用Java提供的安全沙箱机制，对SPI实现类的代码进行隔离和控制，防止恶意实现类对系统进行攻击。</p>
</li>
<li class="lvl-3">
<p>定期更新SPI实现：由于SPI实现通常是通过外部库或框架提供的，因此应该定期更新这些库或框架，以确保其包含的SPI实现都是安全的。</p>
</li>
<li class="lvl-3">
<p>不依赖SPI实现的具体实现类：在代码中不应该直接依赖于SPI实现的具体实现类，而应该通过接口或抽象类来定义API，以便在需要时更换不同的实现类。</p>
</li>
</ol>
<p>##学习SPI机制的高级应用</p>
<p>###如何扩展和定制SPI机制</p>
<p>SPI机制在Java平台上已经得到广泛的应用，而在某些场景下，我们可能需要扩展和定制SPI机制以满足特定的需求。下面介绍一些常见的扩展和定制方法：</p>
<ol>
<li class="lvl-3">
<p>自定义SPI接口</p>
</li>
</ol>
<p>可以定义自己的SPI接口，实现SPI机制的扩展和定制。比如，可以定义一个新的SPI接口，实现与标准SPI接口不同的实现机制，或者在标准SPI接口的基础上添加新的功能。</p>
<ol start="2">
<li class="lvl-3">
<p>自定义SPI实现</p>
</li>
</ol>
<p>除了自定义SPI接口之外，也可以自定义SPI实现来扩展和定制SPI机制。这种方式可以在标准SPI实现的基础上，添加自己的实现逻辑，或者修改标准SPI实现的行为。</p>
<ol start="3">
<li class="lvl-3">
<p>自定义SPI配置文件</p>
</li>
</ol>
<p>可以通过自定义SPI配置文件，来扩展和定制SPI机制。SPI配置文件的格式与标准的SPI配置文件相同，只是内容不同。在自定义SPI配置文件中，可以定义新的SPI实现，或者修改标准SPI实现的行为。</p>
<p>###如何使用SPI机制实现插件化架构</p>
<p>插件化架构是一种通过插件扩展系统功能的设计模式。在Java平台上，可以使用SPI机制来实现插件化架构。下面是一个简单的插件化示例：</p>
<p>首先，定义一个插件接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Plugin</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，定义两个插件实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginA</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PluginA.execute() is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PluginB</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PluginB.execute() is called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接着，创建一个SPI配置文件<code>META-INF/services/com.example.Plugin</code>，并在其中定义插件实现类：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">com.example.PluginA</span><br><span class="line">com.example.PluginB</span><br></pre></td></tr></table></figure>
<p>最后，通过ServiceLoader类加载插件实现类，并调用插件的执行方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;Plugin&gt; plugins = ServiceLoader.load(Plugin.class);</span><br><span class="line">        <span class="keyword">for</span> (Plugin plugin : plugins) &#123;</span><br><span class="line">            plugin.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行该程序，可以看到输出结果：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">PluginA.execute() is called.</span><br><span class="line">PluginB.execute() is called.</span><br></pre></td></tr></table></figure>
<p>通过SPI机制，我们可以将插件的实现类动态地加载到程序中，从而实现插件化架构。</p>
<p>###如何使用SPI机制实现动态配置</p>
<p>使用SPI机制可以实现动态配置，这是因为在SPI机制中，不同的实现类都通过一定的配置方式注册到META-INF/services目录下，因此可以通过修改或替换META-INF/services目录下的配置文件来实现动态配置。</p>
<p>具体实现方法如下：</p>
<ol>
<li class="lvl-3">
<p>定义接口</p>
</li>
</ol>
<p>首先，需要定义一个接口，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Configurable</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Properties properties)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该接口包含一个configure方法，用于接收配置参数。</p>
<ol start="2">
<li class="lvl-3">
<p>实现接口</p>
</li>
</ol>
<p>在不同的实现类中，可以根据具体需求实现该接口。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfigurableImpl</span> <span class="keyword">implements</span> <span class="title class_">Configurable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="comment">// 从properties中读取配置参数，并做相应处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li class="lvl-3">
<p>注册实现类</p>
</li>
</ol>
<p>将实现类的全限定名写入META-INF/services/com.example.Configurable配置文件中。例如，在项目中创建META-INF/services/com.example.Configurable文件，写入以下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">com.example.MyConfigurableImpl</span><br></pre></td></tr></table></figure>
<ol start="4">
<li class="lvl-3">
<p>加载并配置实现类</p>
</li>
</ol>
<p>在需要使用实现类的地方，可以使用ServiceLoader类加载实现类，并调用configure方法进行配置。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceLoader&lt;Configurable&gt; serviceLoader = ServiceLoader.load(Configurable.class);</span><br><span class="line"><span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> loadPropertiesFromConfigFile();</span><br><span class="line"><span class="keyword">for</span> (Configurable configurable : serviceLoader) &#123;</span><br><span class="line">    configurable.configure(properties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述代码中，首先通过ServiceLoader类加载Configurable接口的实现类，然后从配置文件中读取配置参数，并依次调用每个实现类的configure方法进行配置。</p>
<p>通过修改META-INF/services/com.example.Configurable配置文件，可以动态修改实现类，从而实现动态配置。</p>
<p>###如何使用SPI机制实现服务发现和注册</p>
<p>​		SPI机制也可以用于实现服务发现和注册的功能。服务发现和注册是指在分布式系统中，服务提供者将自己提供的服务注册到服务注册中心，服务消费者从服务注册中心获取可用的服务列表，并调用相应的服务。</p>
<p>​		在Java中，可以使用SPI机制实现服务注册和发现。具体实现方式为，在服务提供者实现接口时，在META-INF/services目录下创建一个以接口全限定名命名的文件，文件中每行填写一个实现类的全限定名，表示这个实现类是服务提供者提供的服务。服务消费者使用ServiceLoader类加载这个接口的实现，获取可用的服务列表，并调用相应的服务。</p>
<p>以下是一个示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务提供者接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务提供者实现类1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl1</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl1 login: &quot;</span> + username + <span class="string">&quot;, &quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务提供者实现类2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl2</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl2 login: &quot;</span> + username + <span class="string">&quot;, &quot;</span> + password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务提供者在META-INF/services目录下注册服务</span></span><br><span class="line"><span class="comment">// 文件名为服务接口的全限定名，文件内容为实现类的全限定名</span></span><br><span class="line"><span class="comment">// META-INF/services/com.example.UserService</span></span><br><span class="line"><span class="comment">// com.example.UserServiceImpl1</span></span><br><span class="line"><span class="comment">// com.example.UserServiceImpl2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务消费者使用ServiceLoader类获取服务列表并调用服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceConsumer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;UserService&gt; serviceLoader = ServiceLoader.load(UserService.class);</span><br><span class="line">        <span class="keyword">for</span> (UserService userService : serviceLoader) &#123;</span><br><span class="line">            userService.login(<span class="string">&quot;admin&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>​		在这个例子中，服务提供者实现了UserService接口，将自己的实现类注册到META-INF/services/com.example.UserService文件中。服务消费者使用ServiceLoader类加载UserService接口的实现，并调用它们的login方法。这样，服务消费者就可以通过SPI机制发现并使用服务提供者提供的服务了。</p>
<p>​		需要注意的是，服务提供者和消费者需要约定服务接口和SPI文件的格式。如果格式不正确，SPI机制就无法正常工作。同时，服务提供者还需要注意不要将敏感信息泄露到SPI文件中，以免造成安全问题。</p>
<p>##实践SPI机制的应用案例</p>
<p>###SPI机制在Java框架中的应用</p>
<p>SPI机制在Java框架中得到了广泛应用，以下是一些常见的使用场景：</p>
<ol>
<li class="lvl-3">
<p>JDBC驱动：Java中的JDBC规范定义了一组接口，允许应用程序访问不同数据库的统一方式。JDBC驱动程序实现了这些接口。Java应用程序通过SPI机制加载所需的数据库驱动程序。</p>
</li>
<li class="lvl-3">
<p>Servlet容器：Java Servlet API定义了一组接口，用于处理HTTP请求和响应。Web服务器或Servlet容器通过SPI机制加载Servlet API实现，以便可以执行应用程序定义的Servlet。</p>
</li>
<li class="lvl-3">
<p>日志系统：Java中的日志系统允许开发人员在应用程序中记录消息和异常。许多常见的日志系统都使用SPI机制加载不同的日志实现。</p>
</li>
<li class="lvl-3">
<p>Spring框架：Spring框架使用SPI机制实现了许多核心功能，如依赖注入、AOP、事务管理等。</p>
</li>
</ol>
<p>###SPI机制在开源项目中的应用</p>
<p>除了Java框架之外，许多开源项目也使用SPI机制实现插件化、扩展性和可配置性。以下是一些常见的使用场景：</p>
<ol>
<li class="lvl-3">
<p>Elasticsearch：Elasticsearch是一款分布式搜索和分析引擎，使用SPI机制来加载插件。Elasticsearch本身只提供了一组核心功能，如文档存储和搜索。其他功能，如集群管理、安全性和监控等，则由插件实现。</p>
</li>
<li class="lvl-3">
<p>Dubbo：Dubbo是一款高性能、轻量级的RPC框架，使用SPI机制来加载扩展点。Dubbo本身只提供了一组核心功能，如服务注册和发现、负载均衡、容错处理等。其他功能，如协议、序列化、路由等，则由扩展点实现。</p>
</li>
<li class="lvl-3">
<p>Hadoop：Hadoop是一款分布式计算框架，使用SPI机制来加载各种文件系统。Hadoop支持不同类型的文件系统，如HDFS、S3、Swift等。每种文件系统都由独立的模块实现，这些模块通过SPI机制加载。</p>
</li>
</ol>
<p>###如何使用SPI机制实现跨组件的扩展性和可配置性</p>
<p>SPI机制可以帮助实现跨组件的扩展性和可配置性，具体方法如下：</p>
<ol>
<li class="lvl-3">
<p>定义SPI接口，定义需要扩展的功能，并提供接口方法。</p>
</li>
<li class="lvl-3">
<p>实现SPI接口，编写具体的实现逻辑，并在META-INF/services目录下创建对应的配置文件，将实现类的全类名写入配置文件中。</p>
</li>
<li class="lvl-3">
<p>在需要使用SPI功能的组件中，通过ServiceLoader类加载SPI接口的所有实现类，得到实现类的实例，实现扩展性和可配置性。</p>
</li>
</ol>
<p>下面以一个简单的例子说明如何使用SPI机制实现跨组件的扩展性和可配置性：</p>
<ol>
<li class="lvl-3">
<p>定义SPI接口：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataProvider</span> &#123;</span><br><span class="line">    String <span class="title function_">getData</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li class="lvl-3">
<p>实现SPI接口：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDataProvider</span> <span class="keyword">implements</span> <span class="title class_">DataProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 从文件中读取数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;data from file&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在META-INF/services目录下创建文件 “com.example.DataProvider”，并写入 “com.example.FileDataProvider”，表示FileDataProvider是DataProvider的实现类。</p>
<ol start="3">
<li class="lvl-3">
<p>使用SPI功能的组件中加载DataProvider的实现类：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ServiceLoader&lt;DataProvider&gt; serviceLoader = ServiceLoader.load(DataProvider.class);</span><br><span class="line">        <span class="keyword">for</span> (DataProvider provider : serviceLoader) &#123;</span><br><span class="line">            System.out.println(provider.getData());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过ServiceLoader类加载DataProvider接口的实现类，得到FileDataProvider实例，并调用getData()方法获取数据。</p>
<p>这样，通过SPI机制，可以方便地实现跨组件的扩展性和可配置性，将不同组件的功能进行解耦和灵活配置。</p>
]]></content>
      <categories>
        <category>code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
